
stm32_usb_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080085b8  080085b8  000095b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008670  08008670  0000a154  2**0
                  CONTENTS
  4 .ARM          00000008  08008670  08008670  00009670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008678  08008678  0000a154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800867c  0800867c  0000967c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08008680  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ec  20000154  080087d4  0000a154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001740  080087d4  0000a740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010909  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ebe  00000000  00000000  0001aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001d950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad1  00000000  00000000  0001e7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  0001f271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014549  00000000  00000000  0003770a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089228  00000000  00000000  0004bc53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fe4  00000000  00000000  000d4ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d8ea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085a0 	.word	0x080085a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	080085a0 	.word	0x080085a0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	461a      	mov	r2, r3
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4413      	add	r3, r2
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2307      	movs	r3, #7
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	463b      	mov	r3, r7
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2200      	movs	r2, #0
 80005e8:	21d0      	movs	r1, #208	@ 0xd0
 80005ea:	481f      	ldr	r0, [pc, #124]	@ (8000668 <Get_Time+0x98>)
 80005ec:	f000 ff5a 	bl	80014a4 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80005f0:	783b      	ldrb	r3, [r7, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffd4 	bl	80005a0 <bcdToDec>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <Get_Time+0x9c>)
 80005fe:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000600:	787b      	ldrb	r3, [r7, #1]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffcc 	bl	80005a0 <bcdToDec>
 8000608:	4603      	mov	r3, r0
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <Get_Time+0x9c>)
 800060e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffc4 	bl	80005a0 <bcdToDec>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <Get_Time+0x9c>)
 800061e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffbc 	bl	80005a0 <bcdToDec>
 8000628:	4603      	mov	r3, r0
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <Get_Time+0x9c>)
 800062e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffb4 	bl	80005a0 <bcdToDec>
 8000638:	4603      	mov	r3, r0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <Get_Time+0x9c>)
 800063e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000640:	797b      	ldrb	r3, [r7, #5]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffac 	bl	80005a0 <bcdToDec>
 8000648:	4603      	mov	r3, r0
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <Get_Time+0x9c>)
 800064e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffa4 	bl	80005a0 <bcdToDec>
 8000658:	4603      	mov	r3, r0
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <Get_Time+0x9c>)
 800065e:	719a      	strb	r2, [r3, #6]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000170 	.word	0x20000170
 800066c:	20000204 	.word	0x20000204

08000670 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b091      	sub	sp, #68	@ 0x44
 8000674:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fa8b 	bl	8000b90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f86d 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f905 	bl	800088c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000682:	f006 fdc7 	bl	8007214 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 8000686:	f000 f8d3 	bl	8000830 <MX_I2C1_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //CDC_Transmit_FS((uint8_t *) data, strlen(data));
	  HAL_Delay(1000);
 800068a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068e:	f000 faf1 	bl	8000c74 <HAL_Delay>
	  if(strcmp((char*)buffer, comparestring)==0){
 8000692:	4b2a      	ldr	r3, [pc, #168]	@ (800073c <main+0xcc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4619      	mov	r1, r3
 8000698:	4829      	ldr	r0, [pc, #164]	@ (8000740 <main+0xd0>)
 800069a:	f7ff fda1 	bl	80001e0 <strcmp>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10c      	bne.n	80006be <main+0x4e>
		  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 80006a4:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <main+0xd4>)
 80006a6:	681c      	ldr	r4, [r3, #0]
 80006a8:	4b26      	ldr	r3, [pc, #152]	@ (8000744 <main+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fda1 	bl	80001f4 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4619      	mov	r1, r3
 80006b8:	4620      	mov	r0, r4
 80006ba:	f006 fe7f 	bl	80073bc <CDC_Transmit_FS>
	  }

	  Get_Time();
 80006be:	f7ff ff87 	bl	80005d0 <Get_Time>

	  //convert uint8_t to string first
	  char time_string[20];
	  sprintf(time_string, "%02d:%02d:%02d\n", time.hour, time.minutes, time.seconds);
 80006c2:	4b21      	ldr	r3, [pc, #132]	@ (8000748 <main+0xd8>)
 80006c4:	789b      	ldrb	r3, [r3, #2]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <main+0xd8>)
 80006ca:	785b      	ldrb	r3, [r3, #1]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <main+0xd8>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	f107 001c 	add.w	r0, r7, #28
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	460b      	mov	r3, r1
 80006da:	491c      	ldr	r1, [pc, #112]	@ (800074c <main+0xdc>)
 80006dc:	f007 fac0 	bl	8007c60 <siprintf>
	  CDC_Transmit_FS((uint8_t *) time_string, strlen(time_string));
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4618      	mov	r0, r3
 80006e6:	f7ff fd85 	bl	80001f4 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4611      	mov	r1, r2
 80006f4:	4618      	mov	r0, r3
 80006f6:	f006 fe61 	bl	80073bc <CDC_Transmit_FS>

	  uint8_t readtest;
	  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, &readtest, 1, 1000);
 80006fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	2301      	movs	r3, #1
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	f107 031b 	add.w	r3, r7, #27
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	2301      	movs	r3, #1
 800070c:	2200      	movs	r2, #0
 800070e:	21d0      	movs	r1, #208	@ 0xd0
 8000710:	480f      	ldr	r0, [pc, #60]	@ (8000750 <main+0xe0>)
 8000712:	f000 fec7 	bl	80014a4 <HAL_I2C_Mem_Read>

	  char datastring[20];
	  sprintf(datastring, "%d\n", readtest);
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	461a      	mov	r2, r3
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	490d      	ldr	r1, [pc, #52]	@ (8000754 <main+0xe4>)
 800071e:	4618      	mov	r0, r3
 8000720:	f007 fa9e 	bl	8007c60 <siprintf>
	  CDC_Transmit_FS((uint8_t *) datastring, strlen(datastring));
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fd64 	bl	80001f4 <strlen>
 800072c:	4603      	mov	r3, r0
 800072e:	b29a      	uxth	r2, r3
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4611      	mov	r1, r2
 8000734:	4618      	mov	r0, r3
 8000736:	f006 fe41 	bl	80073bc <CDC_Transmit_FS>
  {
 800073a:	e7a6      	b.n	800068a <main+0x1a>
 800073c:	20000004 	.word	0x20000004
 8000740:	200001c4 	.word	0x200001c4
 8000744:	20000000 	.word	0x20000000
 8000748:	20000204 	.word	0x20000204
 800074c:	080085c8 	.word	0x080085c8
 8000750:	20000170 	.word	0x20000170
 8000754:	080085d8 	.word	0x080085d8

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	@ 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f007 fa9a 	bl	8007ca0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <SystemClock_Config+0xd0>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a28      	ldr	r2, [pc, #160]	@ (8000828 <SystemClock_Config+0xd0>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <SystemClock_Config+0xd0>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b23      	ldr	r3, [pc, #140]	@ (800082c <SystemClock_Config+0xd4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a21      	ldr	r2, [pc, #132]	@ (800082c <SystemClock_Config+0xd4>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b1f      	ldr	r3, [pc, #124]	@ (800082c <SystemClock_Config+0xd4>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	2301      	movs	r3, #1
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
 80007c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80007cc:	2319      	movs	r3, #25
 80007ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d6:	2304      	movs	r3, #4
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007da:	2307      	movs	r3, #7
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fdb8 	bl	8003358 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ee:	f000 f8ad 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f003 f81a 	bl	8003848 <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800081a:	f000 f897 	bl	800094c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000836:	4a13      	ldr	r2, [pc, #76]	@ (8000884 <MX_I2C1_Init+0x54>)
 8000838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_I2C1_Init+0x50>)
 800083c:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <MX_I2C1_Init+0x58>)
 800083e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <MX_I2C1_Init+0x50>)
 800084e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800085a:	4b09      	ldr	r3, [pc, #36]	@ (8000880 <MX_I2C1_Init+0x50>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000866:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <MX_I2C1_Init+0x50>)
 8000868:	2200      	movs	r2, #0
 800086a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800086c:	4804      	ldr	r0, [pc, #16]	@ (8000880 <MX_I2C1_Init+0x50>)
 800086e:	f000 fcd5 	bl	800121c <HAL_I2C_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000878:	f000 f868 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000170 	.word	0x20000170
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b27      	ldr	r3, [pc, #156]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a26      	ldr	r2, [pc, #152]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b24      	ldr	r3, [pc, #144]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b20      	ldr	r3, [pc, #128]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b19      	ldr	r3, [pc, #100]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a18      	ldr	r2, [pc, #96]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_GPIO_Init+0xb8>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a11      	ldr	r2, [pc, #68]	@ (8000944 <MX_GPIO_Init+0xb8>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_GPIO_Init+0xb8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000918:	480b      	ldr	r0, [pc, #44]	@ (8000948 <MX_GPIO_Init+0xbc>)
 800091a:	f000 fc65 	bl	80011e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800091e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	@ (8000948 <MX_GPIO_Init+0xbc>)
 8000938:	f000 fad2 	bl	8000ee0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800093c:	bf00      	nop
 800093e:	3728      	adds	r7, #40	@ 0x28
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40023800 	.word	0x40023800
 8000948:	40020800 	.word	0x40020800

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a19      	ldr	r2, [pc, #100]	@ (8000a2c <HAL_I2C_MspInit+0x84>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d12b      	bne.n	8000a22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a17      	ldr	r2, [pc, #92]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009e6:	23c0      	movs	r3, #192	@ 0xc0
 80009e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ea:	2312      	movs	r3, #18
 80009ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009f6:	2304      	movs	r3, #4
 80009f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 0314 	add.w	r3, r7, #20
 80009fe:	4619      	mov	r1, r3
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <HAL_I2C_MspInit+0x8c>)
 8000a02:	f000 fa6d 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	4a08      	ldr	r2, [pc, #32]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_I2C_MspInit+0x88>)
 8000a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	@ 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400

08000a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <NMI_Handler+0x4>

08000a40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <HardFault_Handler+0x4>

08000a48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <MemManage_Handler+0x4>

08000a50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8e:	f000 f8d1 	bl	8000c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
	...

08000a98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a9c:	4802      	ldr	r0, [pc, #8]	@ (8000aa8 <OTG_FS_IRQHandler+0x10>)
 8000a9e:	f001 fb4d 	bl	800213c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000ef4 	.word	0x20000ef4

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	@ (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	@ (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f007 f8e8 	bl	8007cb0 <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	@ (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	@ (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	@ (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20010000 	.word	0x20010000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	2000020c 	.word	0x2000020c
 8000b14:	20001740 	.word	0x20001740

08000b18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <SystemInit+0x20>)
 8000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b22:	4a05      	ldr	r2, [pc, #20]	@ (8000b38 <SystemInit+0x20>)
 8000b24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b40:	f7ff ffea 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b44:	480c      	ldr	r0, [pc, #48]	@ (8000b78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b46:	490d      	ldr	r1, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b48:	4a0d      	ldr	r2, [pc, #52]	@ (8000b80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b4c:	e002      	b.n	8000b54 <LoopCopyDataInit>

08000b4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b52:	3304      	adds	r3, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b58:	d3f9      	bcc.n	8000b4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b60:	e001      	b.n	8000b66 <LoopFillZerobss>

08000b62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b64:	3204      	adds	r2, #4

08000b66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b68:	d3fb      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6a:	f007 f8a7 	bl	8007cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6e:	f7ff fd7f 	bl	8000670 <main>
  bx  lr    
 8000b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b74:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b7c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000b80:	08008680 	.word	0x08008680
  ldr r2, =_sbss
 8000b84:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000b88:	20001740 	.word	0x20001740

08000b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b8c:	e7fe      	b.n	8000b8c <ADC_IRQHandler>
	...

08000b90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b94:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <HAL_Init+0x40>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd0 <HAL_Init+0x40>)
 8000b9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd0 <HAL_Init+0x40>)
 8000ba6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	@ (8000bd0 <HAL_Init+0x40>)
 8000bb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f94f 	bl	8000e5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff fec8 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40023c00 	.word	0x40023c00

08000bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f967 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f92f 	bl	8000e72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	@ (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000010 	.word	0x20000010
 8000c30:	2000000c 	.word	0x2000000c

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000010 	.word	0x20000010
 8000c58:	20000210 	.word	0x20000210

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000210 	.word	0x20000210

08000c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c7c:	f7ff ffee 	bl	8000c5c <HAL_GetTick>
 8000c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c8c:	d005      	beq.n	8000c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <HAL_Delay+0x44>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	461a      	mov	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4413      	add	r3, r2
 8000c98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c9a:	bf00      	nop
 8000c9c:	f7ff ffde 	bl	8000c5c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d8f7      	bhi.n	8000c9c <HAL_Delay+0x28>
  {
  }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000010 	.word	0x20000010

08000cbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd8:	4013      	ands	r3, r2
 8000cda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cee:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	60d3      	str	r3, [r2, #12]
}
 8000cf4:	bf00      	nop
 8000cf6:	3714      	adds	r7, #20
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d08:	4b04      	ldr	r3, [pc, #16]	@ (8000d1c <__NVIC_GetPriorityGrouping+0x18>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	0a1b      	lsrs	r3, r3, #8
 8000d0e:	f003 0307 	and.w	r3, r3, #7
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	db0b      	blt.n	8000d4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d32:	79fb      	ldrb	r3, [r7, #7]
 8000d34:	f003 021f 	and.w	r2, r3, #31
 8000d38:	4907      	ldr	r1, [pc, #28]	@ (8000d58 <__NVIC_EnableIRQ+0x38>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	095b      	lsrs	r3, r3, #5
 8000d40:	2001      	movs	r0, #1
 8000d42:	fa00 f202 	lsl.w	r2, r0, r2
 8000d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100

08000d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	db0a      	blt.n	8000d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	490c      	ldr	r1, [pc, #48]	@ (8000da8 <__NVIC_SetPriority+0x4c>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	0112      	lsls	r2, r2, #4
 8000d7c:	b2d2      	uxtb	r2, r2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d84:	e00a      	b.n	8000d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4908      	ldr	r1, [pc, #32]	@ (8000dac <__NVIC_SetPriority+0x50>)
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	f003 030f 	and.w	r3, r3, #15
 8000d92:	3b04      	subs	r3, #4
 8000d94:	0112      	lsls	r2, r2, #4
 8000d96:	b2d2      	uxtb	r2, r2
 8000d98:	440b      	add	r3, r1
 8000d9a:	761a      	strb	r2, [r3, #24]
}
 8000d9c:	bf00      	nop
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000e100 	.word	0xe000e100
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f1c3 0307 	rsb	r3, r3, #7
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	bf28      	it	cs
 8000dce:	2304      	movcs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2b06      	cmp	r3, #6
 8000dd8:	d902      	bls.n	8000de0 <NVIC_EncodePriority+0x30>
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	3b03      	subs	r3, #3
 8000dde:	e000      	b.n	8000de2 <NVIC_EncodePriority+0x32>
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	f04f 32ff 	mov.w	r2, #4294967295
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43da      	mvns	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	401a      	ands	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	43d9      	mvns	r1, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e08:	4313      	orrs	r3, r2
         );
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3724      	adds	r7, #36	@ 0x24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
	...

08000e18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e28:	d301      	bcc.n	8000e2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e00f      	b.n	8000e4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <SysTick_Config+0x40>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e36:	210f      	movs	r1, #15
 8000e38:	f04f 30ff 	mov.w	r0, #4294967295
 8000e3c:	f7ff ff8e 	bl	8000d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e40:	4b05      	ldr	r3, [pc, #20]	@ (8000e58 <SysTick_Config+0x40>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e46:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <SysTick_Config+0x40>)
 8000e48:	2207      	movs	r2, #7
 8000e4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	e000e010 	.word	0xe000e010

08000e5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff ff29 	bl	8000cbc <__NVIC_SetPriorityGrouping>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b086      	sub	sp, #24
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff3e 	bl	8000d04 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff8e 	bl	8000db0 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5d 	bl	8000d5c <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff31 	bl	8000d20 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa2 	bl	8000e18 <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	@ 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
 8000efa:	e159      	b.n	80011b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000efc:	2201      	movs	r2, #1
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	f040 8148 	bne.w	80011aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d005      	beq.n	8000f32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d130      	bne.n	8000f94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	68da      	ldr	r2, [r3, #12]
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f68:	2201      	movs	r2, #1
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 0201 	and.w	r2, r3, #1
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d017      	beq.n	8000fd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d123      	bne.n	8001024 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	220f      	movs	r2, #15
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	691a      	ldr	r2, [r3, #16]
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	08da      	lsrs	r2, r3, #3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3208      	adds	r2, #8
 800101e:	69b9      	ldr	r1, [r7, #24]
 8001020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0203 	and.w	r2, r3, #3
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001060:	2b00      	cmp	r3, #0
 8001062:	f000 80a2 	beq.w	80011aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	4b57      	ldr	r3, [pc, #348]	@ (80011c8 <HAL_GPIO_Init+0x2e8>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	4a56      	ldr	r2, [pc, #344]	@ (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001074:	6453      	str	r3, [r2, #68]	@ 0x44
 8001076:	4b54      	ldr	r3, [pc, #336]	@ (80011c8 <HAL_GPIO_Init+0x2e8>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001082:	4a52      	ldr	r2, [pc, #328]	@ (80011cc <HAL_GPIO_Init+0x2ec>)
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	f003 0303 	and.w	r3, r3, #3
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	220f      	movs	r2, #15
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a49      	ldr	r2, [pc, #292]	@ (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x202>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a48      	ldr	r2, [pc, #288]	@ (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x1fe>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a47      	ldr	r2, [pc, #284]	@ (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x1fa>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a46      	ldr	r2, [pc, #280]	@ (80011dc <HAL_GPIO_Init+0x2fc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x1f6>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a45      	ldr	r2, [pc, #276]	@ (80011e0 <HAL_GPIO_Init+0x300>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x1f2>
 80010ce:	2304      	movs	r3, #4
 80010d0:	e008      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e006      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e004      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010da:	2302      	movs	r3, #2
 80010dc:	e002      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010de:	2301      	movs	r3, #1
 80010e0:	e000      	b.n	80010e4 <HAL_GPIO_Init+0x204>
 80010e2:	2300      	movs	r3, #0
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	0092      	lsls	r2, r2, #2
 80010ec:	4093      	lsls	r3, r2
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010f4:	4935      	ldr	r1, [pc, #212]	@ (80011cc <HAL_GPIO_Init+0x2ec>)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001102:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d003      	beq.n	8001126 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001126:	4a2f      	ldr	r2, [pc, #188]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800112c:	4b2d      	ldr	r3, [pc, #180]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001150:	4a24      	ldr	r2, [pc, #144]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001156:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800117a:	4a1a      	ldr	r2, [pc, #104]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001180:	4b18      	ldr	r3, [pc, #96]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d003      	beq.n	80011a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a4:	4a0f      	ldr	r2, [pc, #60]	@ (80011e4 <HAL_GPIO_Init+0x304>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b0f      	cmp	r3, #15
 80011b4:	f67f aea2 	bls.w	8000efc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40013800 	.word	0x40013800
 80011d0:	40020000 	.word	0x40020000
 80011d4:	40020400 	.word	0x40020400
 80011d8:	40020800 	.word	0x40020800
 80011dc:	40020c00 	.word	0x40020c00
 80011e0:	40021000 	.word	0x40021000
 80011e4:	40013c00 	.word	0x40013c00

080011e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
 80011f4:	4613      	mov	r3, r2
 80011f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011f8:	787b      	ldrb	r3, [r7, #1]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011fe:	887a      	ldrh	r2, [r7, #2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001204:	e003      	b.n	800120e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001206:	887b      	ldrh	r3, [r7, #2]
 8001208:	041a      	lsls	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e12b      	b.n	8001486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d106      	bne.n	8001248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fbb0 	bl	80009a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	@ 0x24
 800124c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800126e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800127e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001280:	f002 fc9a 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8001284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a81      	ldr	r2, [pc, #516]	@ (8001490 <HAL_I2C_Init+0x274>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d807      	bhi.n	80012a0 <HAL_I2C_Init+0x84>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a80      	ldr	r2, [pc, #512]	@ (8001494 <HAL_I2C_Init+0x278>)
 8001294:	4293      	cmp	r3, r2
 8001296:	bf94      	ite	ls
 8001298:	2301      	movls	r3, #1
 800129a:	2300      	movhi	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e006      	b.n	80012ae <HAL_I2C_Init+0x92>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001498 <HAL_I2C_Init+0x27c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	bf94      	ite	ls
 80012a8:	2301      	movls	r3, #1
 80012aa:	2300      	movhi	r3, #0
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e0e7      	b.n	8001486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4a78      	ldr	r2, [pc, #480]	@ (800149c <HAL_I2C_Init+0x280>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0c9b      	lsrs	r3, r3, #18
 80012c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6a1b      	ldr	r3, [r3, #32]
 80012dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001490 <HAL_I2C_Init+0x274>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d802      	bhi.n	80012f0 <HAL_I2C_Init+0xd4>
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3301      	adds	r3, #1
 80012ee:	e009      	b.n	8001304 <HAL_I2C_Init+0xe8>
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a69      	ldr	r2, [pc, #420]	@ (80014a0 <HAL_I2C_Init+0x284>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	3301      	adds	r3, #1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6812      	ldr	r2, [r2, #0]
 8001308:	430b      	orrs	r3, r1
 800130a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001316:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	495c      	ldr	r1, [pc, #368]	@ (8001490 <HAL_I2C_Init+0x274>)
 8001320:	428b      	cmp	r3, r1
 8001322:	d819      	bhi.n	8001358 <HAL_I2C_Init+0x13c>
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	1e59      	subs	r1, r3, #1
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001332:	1c59      	adds	r1, r3, #1
 8001334:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001338:	400b      	ands	r3, r1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <HAL_I2C_Init+0x138>
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1e59      	subs	r1, r3, #1
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fbb1 f3f3 	udiv	r3, r1, r3
 800134c:	3301      	adds	r3, #1
 800134e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001352:	e051      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 8001354:	2304      	movs	r3, #4
 8001356:	e04f      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <HAL_I2C_Init+0x168>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	1e58      	subs	r0, r3, #1
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	440b      	add	r3, r1
 800136e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001372:	3301      	adds	r3, #1
 8001374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	e012      	b.n	80013aa <HAL_I2C_Init+0x18e>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	1e58      	subs	r0, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6859      	ldr	r1, [r3, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	440b      	add	r3, r1
 8001392:	0099      	lsls	r1, r3, #2
 8001394:	440b      	add	r3, r1
 8001396:	fbb0 f3f3 	udiv	r3, r0, r3
 800139a:	3301      	adds	r3, #1
 800139c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_I2C_Init+0x196>
 80013ae:	2301      	movs	r3, #1
 80013b0:	e022      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10e      	bne.n	80013d8 <HAL_I2C_Init+0x1bc>
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1e58      	subs	r0, r3, #1
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	440b      	add	r3, r1
 80013c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013d6:	e00f      	b.n	80013f8 <HAL_I2C_Init+0x1dc>
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	1e58      	subs	r0, r3, #1
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6859      	ldr	r1, [r3, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	0099      	lsls	r1, r3, #2
 80013e8:	440b      	add	r3, r1
 80013ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80013ee:	3301      	adds	r3, #1
 80013f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	6809      	ldr	r1, [r1, #0]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69da      	ldr	r2, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a1b      	ldr	r3, [r3, #32]
 8001412:	431a      	orrs	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001426:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6911      	ldr	r1, [r2, #16]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68d2      	ldr	r2, [r2, #12]
 8001432:	4311      	orrs	r1, r2
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	430b      	orrs	r3, r1
 800143a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0201 	orr.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2220      	movs	r2, #32
 8001472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	000186a0 	.word	0x000186a0
 8001494:	001e847f 	.word	0x001e847f
 8001498:	003d08ff 	.word	0x003d08ff
 800149c:	431bde83 	.word	0x431bde83
 80014a0:	10624dd3 	.word	0x10624dd3

080014a4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	817b      	strh	r3, [r7, #10]
 80014b6:	460b      	mov	r3, r1
 80014b8:	813b      	strh	r3, [r7, #8]
 80014ba:	4613      	mov	r3, r2
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014be:	f7ff fbcd 	bl	8000c5c <HAL_GetTick>
 80014c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b20      	cmp	r3, #32
 80014ce:	f040 8214 	bne.w	80018fa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	9300      	str	r3, [sp, #0]
 80014d6:	2319      	movs	r3, #25
 80014d8:	2201      	movs	r2, #1
 80014da:	497b      	ldr	r1, [pc, #492]	@ (80016c8 <HAL_I2C_Mem_Read+0x224>)
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f000 fafb 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80014e8:	2302      	movs	r3, #2
 80014ea:	e207      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_I2C_Mem_Read+0x56>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e200      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b01      	cmp	r3, #1
 800150e:	d007      	beq.n	8001520 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0201 	orr.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800152e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2222      	movs	r2, #34	@ 0x22
 8001534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2240      	movs	r2, #64	@ 0x40
 800153c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001550:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001556:	b29a      	uxth	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4a5b      	ldr	r2, [pc, #364]	@ (80016cc <HAL_I2C_Mem_Read+0x228>)
 8001560:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001562:	88f8      	ldrh	r0, [r7, #6]
 8001564:	893a      	ldrh	r2, [r7, #8]
 8001566:	8979      	ldrh	r1, [r7, #10]
 8001568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f9c8 	bl	8001908 <I2C_RequestMemoryRead>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1bc      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001586:	2b00      	cmp	r3, #0
 8001588:	d113      	bne.n	80015b2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800158a:	2300      	movs	r3, #0
 800158c:	623b      	str	r3, [r7, #32]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	623b      	str	r3, [r7, #32]
 800159e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e190      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d11b      	bne.n	80015f2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	61fb      	str	r3, [r7, #28]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	61fb      	str	r3, [r7, #28]
 80015de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e170      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d11b      	bne.n	8001632 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001608:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001618:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	e150      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001648:	e144      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800164e:	2b03      	cmp	r3, #3
 8001650:	f200 80f1 	bhi.w	8001836 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001658:	2b01      	cmp	r3, #1
 800165a:	d123      	bne.n	80016a4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800165c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800165e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 fb9b 	bl	8001d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e145      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691a      	ldr	r2, [r3, #16]
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	1c5a      	adds	r2, r3, #1
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800168c:	3b01      	subs	r3, #1
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001698:	b29b      	uxth	r3, r3
 800169a:	3b01      	subs	r3, #1
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80016a2:	e117      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d14e      	bne.n	800174a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80016b2:	2200      	movs	r2, #0
 80016b4:	4906      	ldr	r1, [pc, #24]	@ (80016d0 <HAL_I2C_Mem_Read+0x22c>)
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fa0e 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d008      	beq.n	80016d4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e11a      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
 80016c6:	bf00      	nop
 80016c8:	00100002 	.word	0x00100002
 80016cc:	ffff0000 	.word	0xffff0000
 80016d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001700:	3b01      	subs	r3, #1
 8001702:	b29a      	uxth	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800170c:	b29b      	uxth	r3, r3
 800170e:	3b01      	subs	r3, #1
 8001710:	b29a      	uxth	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800173e:	b29b      	uxth	r3, r3
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001748:	e0c4      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001750:	2200      	movs	r2, #0
 8001752:	496c      	ldr	r1, [pc, #432]	@ (8001904 <HAL_I2C_Mem_Read+0x460>)
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 f9bf 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0cb      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001790:	3b01      	subs	r3, #1
 8001792:	b29a      	uxth	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800179c:	b29b      	uxth	r3, r3
 800179e:	3b01      	subs	r3, #1
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80017a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017ac:	2200      	movs	r2, #0
 80017ae:	4955      	ldr	r1, [pc, #340]	@ (8001904 <HAL_I2C_Mem_Read+0x460>)
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f000 f991 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e09d      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80017ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691a      	ldr	r2, [r3, #16]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800182a:	b29b      	uxth	r3, r3
 800182c:	3b01      	subs	r3, #1
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001834:	e04e      	b.n	80018d4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001838:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 faae 	bl	8001d9c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e058      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001866:	3b01      	subs	r3, #1
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b04      	cmp	r3, #4
 8001888:	d124      	bne.n	80018d4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800188e:	2b03      	cmp	r3, #3
 8001890:	d107      	bne.n	80018a2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018be:	3b01      	subs	r3, #1
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f aeb6 	bne.w	800164a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e000      	b.n	80018fc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
  }
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3728      	adds	r7, #40	@ 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	00010004 	.word	0x00010004

08001908 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	4608      	mov	r0, r1
 8001912:	4611      	mov	r1, r2
 8001914:	461a      	mov	r2, r3
 8001916:	4603      	mov	r3, r0
 8001918:	817b      	strh	r3, [r7, #10]
 800191a:	460b      	mov	r3, r1
 800191c:	813b      	strh	r3, [r7, #8]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001930:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001940:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	2200      	movs	r2, #0
 800194a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 f8c2 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00d      	beq.n	8001976 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001968:	d103      	bne.n	8001972 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0aa      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001976:	897b      	ldrh	r3, [r7, #10]
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001984:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	6a3a      	ldr	r2, [r7, #32]
 800198a:	4952      	ldr	r1, [pc, #328]	@ (8001ad4 <I2C_RequestMemoryRead+0x1cc>)
 800198c:	68f8      	ldr	r0, [r7, #12]
 800198e:	f000 f91d 	bl	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e097      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	617b      	str	r3, [r7, #20]
 80019b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b4:	6a39      	ldr	r1, [r7, #32]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f9a8 	bl	8001d0c <I2C_WaitOnTXEFlagUntilTimeout>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	d107      	bne.n	80019da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e076      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d105      	bne.n	80019f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	611a      	str	r2, [r3, #16]
 80019ee:	e021      	b.n	8001a34 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80019f0:	893b      	ldrh	r3, [r7, #8]
 80019f2:	0a1b      	lsrs	r3, r3, #8
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a00:	6a39      	ldr	r1, [r7, #32]
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f982 	bl	8001d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d00d      	beq.n	8001a2a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	2b04      	cmp	r3, #4
 8001a14:	d107      	bne.n	8001a26 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e050      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001a2a:	893b      	ldrh	r3, [r7, #8]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a36:	6a39      	ldr	r1, [r7, #32]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f967 	bl	8001d0c <I2C_WaitOnTXEFlagUntilTimeout>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d107      	bne.n	8001a5c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a5a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e035      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 f82b 	bl	8001ad8 <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00d      	beq.n	8001aa4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a96:	d103      	bne.n	8001aa0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e013      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001aa4:	897b      	ldrh	r3, [r7, #10]
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	f043 0301 	orr.w	r3, r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	6a3a      	ldr	r2, [r7, #32]
 8001ab8:	4906      	ldr	r1, [pc, #24]	@ (8001ad4 <I2C_RequestMemoryRead+0x1cc>)
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	f000 f886 	bl	8001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	00010002 	.word	0x00010002

08001ad8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ae8:	e048      	b.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d044      	beq.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff f8b3 	bl	8000c5c <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	683a      	ldr	r2, [r7, #0]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d139      	bne.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d10d      	bne.n	8001b2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	695b      	ldr	r3, [r3, #20]
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf0c      	ite	eq
 8001b24:	2301      	moveq	r3, #1
 8001b26:	2300      	movne	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	e00c      	b.n	8001b48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	43da      	mvns	r2, r3
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	461a      	mov	r2, r3
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d116      	bne.n	8001b7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e023      	b.n	8001bc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	0c1b      	lsrs	r3, r3, #16
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d10d      	bne.n	8001ba2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	e00c      	b.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	43da      	mvns	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4013      	ands	r3, r2
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	bf0c      	ite	eq
 8001bb4:	2301      	moveq	r3, #1
 8001bb6:	2300      	movne	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d093      	beq.n	8001aea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001bda:	e071      	b.n	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bea:	d123      	bne.n	8001c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e067      	b.n	8001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d041      	beq.n	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c3c:	f7ff f80e 	bl	8000c5c <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d302      	bcc.n	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d136      	bne.n	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	0c1b      	lsrs	r3, r3, #16
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d10c      	bne.n	8001c76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	43da      	mvns	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4013      	ands	r3, r2
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	bf14      	ite	ne
 8001c6e:	2301      	movne	r3, #1
 8001c70:	2300      	moveq	r3, #0
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e00b      	b.n	8001c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	43da      	mvns	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4013      	ands	r3, r2
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d016      	beq.n	8001cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cac:	f043 0220 	orr.w	r2, r3, #32
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e021      	b.n	8001d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	0c1b      	lsrs	r3, r3, #16
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d10c      	bne.n	8001ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	43da      	mvns	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf14      	ite	ne
 8001cdc:	2301      	movne	r3, #1
 8001cde:	2300      	moveq	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	e00b      	b.n	8001cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bf14      	ite	ne
 8001cf6:	2301      	movne	r3, #1
 8001cf8:	2300      	moveq	r3, #0
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f47f af6d 	bne.w	8001bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d18:	e034      	b.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 f89b 	bl	8001e56 <I2C_IsAcknowledgeFailed>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e034      	b.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d30:	d028      	beq.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d32:	f7fe ff93 	bl	8000c5c <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d302      	bcc.n	8001d48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d11d      	bne.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d52:	2b80      	cmp	r3, #128	@ 0x80
 8001d54:	d016      	beq.n	8001d84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f043 0220 	orr.w	r2, r3, #32
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e007      	b.n	8001d94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8e:	2b80      	cmp	r3, #128	@ 0x80
 8001d90:	d1c3      	bne.n	8001d1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001da8:	e049      	b.n	8001e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	f003 0310 	and.w	r3, r3, #16
 8001db4:	2b10      	cmp	r3, #16
 8001db6:	d119      	bne.n	8001dec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f06f 0210 	mvn.w	r2, #16
 8001dc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e030      	b.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dec:	f7fe ff36 	bl	8000c5c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d11d      	bne.n	8001e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0c:	2b40      	cmp	r3, #64	@ 0x40
 8001e0e:	d016      	beq.n	8001e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2200      	movs	r2, #0
 8001e14:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2220      	movs	r2, #32
 8001e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f043 0220 	orr.w	r2, r3, #32
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e007      	b.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e48:	2b40      	cmp	r3, #64	@ 0x40
 8001e4a:	d1ae      	bne.n	8001daa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695b      	ldr	r3, [r3, #20]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6c:	d11b      	bne.n	8001ea6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e76:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e000      	b.n	8001ea8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af02      	add	r7, sp, #8
 8001eba:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e101      	b.n	80020ca <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f005 fbb3 	bl	800764c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ef4:	d102      	bne.n	8001efc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f001 ff84 	bl	8003e0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7c1a      	ldrb	r2, [r3, #16]
 8001f0e:	f88d 2000 	strb.w	r2, [sp]
 8001f12:	3304      	adds	r3, #4
 8001f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f16:	f001 fe63 	bl	8003be0 <USB_CoreInit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0ce      	b.n	80020ca <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 ff7c 	bl	8003e30 <USB_SetCurrentMode>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0bf      	b.n	80020ca <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e04a      	b.n	8001fe6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3315      	adds	r3, #21
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3314      	adds	r3, #20
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	b298      	uxth	r0, r3
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	332e      	adds	r3, #46	@ 0x2e
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3318      	adds	r3, #24
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	331c      	adds	r3, #28
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	6879      	ldr	r1, [r7, #4]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3320      	adds	r3, #32
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3324      	adds	r3, #36	@ 0x24
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe0:	7bfb      	ldrb	r3, [r7, #15]
 8001fe2:	3301      	adds	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	791b      	ldrb	r3, [r3, #4]
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3af      	bcc.n	8001f50 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e044      	b.n	8002080 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002034:	2200      	movs	r2, #0
 8002036:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	3301      	adds	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	791b      	ldrb	r3, [r3, #4]
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	429a      	cmp	r2, r3
 8002088:	d3b5      	bcc.n	8001ff6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7c1a      	ldrb	r2, [r3, #16]
 8002092:	f88d 2000 	strb.w	r2, [sp]
 8002096:	3304      	adds	r3, #4
 8002098:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209a:	f001 ff15 	bl	8003ec8 <USB_DevInit>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e00c      	b.n	80020ca <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f002 ff5f 	bl	8004f86 <USB_DevDisconnect>

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b084      	sub	sp, #16
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_PCD_Start+0x1c>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e022      	b.n	8002134 <HAL_PCD_Start+0x62>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d009      	beq.n	8002116 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800210e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fe66 	bl	8003dec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f002 ff0d 	bl	8004f44 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b08d      	sub	sp, #52	@ 0x34
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f002 ffcb 	bl	80050ee <USB_GetMode>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	f040 848c 	bne.w	8002a78 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f002 ff2f 	bl	8004fc8 <USB_ReadInterrupts>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8482 	beq.w	8002a76 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f002 ff1c 	bl	8004fc8 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695a      	ldr	r2, [r3, #20]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f002 0202 	and.w	r2, r2, #2
 80021a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 ff0a 	bl	8004fc8 <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b10      	cmp	r3, #16
 80021bc:	d161      	bne.n	8002282 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699a      	ldr	r2, [r3, #24]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 0210 	bic.w	r2, r2, #16
 80021cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80021ce:	6a3b      	ldr	r3, [r7, #32]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	4613      	mov	r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	4413      	add	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	0c5b      	lsrs	r3, r3, #17
 80021f2:	f003 030f 	and.w	r3, r3, #15
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d124      	bne.n	8002244 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d035      	beq.n	8002272 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002214:	b29b      	uxth	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	6a38      	ldr	r0, [r7, #32]
 800221a:	f002 fd41 	bl	8004ca0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	091b      	lsrs	r3, r3, #4
 8002226:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800222a:	441a      	add	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	695a      	ldr	r2, [r3, #20]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	091b      	lsrs	r3, r3, #4
 8002238:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800223c:	441a      	add	r2, r3
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	615a      	str	r2, [r3, #20]
 8002242:	e016      	b.n	8002272 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	0c5b      	lsrs	r3, r3, #17
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	2b06      	cmp	r3, #6
 800224e:	d110      	bne.n	8002272 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002256:	2208      	movs	r2, #8
 8002258:	4619      	mov	r1, r3
 800225a:	6a38      	ldr	r0, [r7, #32]
 800225c:	f002 fd20 	bl	8004ca0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	695a      	ldr	r2, [r3, #20]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800226c:	441a      	add	r2, r3
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0210 	orr.w	r2, r2, #16
 8002280:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fe9e 	bl	8004fc8 <USB_ReadInterrupts>
 800228c:	4603      	mov	r3, r0
 800228e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002292:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002296:	f040 80a7 	bne.w	80023e8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f002 fea3 	bl	8004fee <USB_ReadDevAllOutEpInterrupt>
 80022a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80022aa:	e099      	b.n	80023e0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80022ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 808e 	beq.w	80023d4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f002 fec7 	bl	8005056 <USB_ReadDevOutEPInterrupt>
 80022c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00c      	beq.n	80022ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80022d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d6:	015a      	lsls	r2, r3, #5
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	4413      	add	r3, r2
 80022dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80022e0:	461a      	mov	r2, r3
 80022e2:	2301      	movs	r3, #1
 80022e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80022e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 fea3 	bl	8003034 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00c      	beq.n	8002312 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	015a      	lsls	r2, r3, #5
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	4413      	add	r3, r2
 8002300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002304:	461a      	mov	r2, r3
 8002306:	2308      	movs	r3, #8
 8002308:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800230a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f000 ff79 	bl	8003204 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f003 0310 	and.w	r3, r3, #16
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	2310      	movs	r3, #16
 800232c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d030      	beq.n	800239a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002340:	2b80      	cmp	r3, #128	@ 0x80
 8002342:	d109      	bne.n	8002358 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	69fa      	ldr	r2, [r7, #28]
 800234e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002356:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235a:	4613      	mov	r3, r2
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	78db      	ldrb	r3, [r3, #3]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2200      	movs	r2, #0
 800237a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4619      	mov	r1, r3
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f005 fa5e 	bl	8007844 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	015a      	lsls	r2, r3, #5
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	4413      	add	r3, r2
 8002390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002394:	461a      	mov	r2, r3
 8002396:	2302      	movs	r3, #2
 8002398:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0320 	and.w	r3, r3, #32
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d008      	beq.n	80023b6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023b0:	461a      	mov	r2, r3
 80023b2:	2320      	movs	r3, #32
 80023b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80023c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c2:	015a      	lsls	r2, r3, #5
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023cc:	461a      	mov	r2, r3
 80023ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023d2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80023d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d6:	3301      	adds	r3, #1
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80023da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f47f af62 	bne.w	80022ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f002 fdeb 	bl	8004fc8 <USB_ReadInterrupts>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80023fc:	f040 80db 	bne.w	80025b6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f002 fe0c 	bl	8005022 <USB_ReadDevAllInEpInterrupt>
 800240a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002410:	e0cd      	b.n	80025ae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80c2 	beq.w	80025a2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002424:	b2d2      	uxtb	r2, r2
 8002426:	4611      	mov	r1, r2
 8002428:	4618      	mov	r0, r3
 800242a:	f002 fe32 	bl	8005092 <USB_ReadDevInEPInterrupt>
 800242e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d057      	beq.n	80024ea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	f003 030f 	and.w	r3, r3, #15
 8002440:	2201      	movs	r2, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800244e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	43db      	mvns	r3, r3
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800245a:	4013      	ands	r3, r2
 800245c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800245e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	4413      	add	r3, r2
 8002466:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800246a:	461a      	mov	r2, r3
 800246c:	2301      	movs	r3, #1
 800246e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	799b      	ldrb	r3, [r3, #6]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d132      	bne.n	80024de <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800247c:	4613      	mov	r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	3320      	adds	r3, #32
 8002488:	6819      	ldr	r1, [r3, #0]
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4413      	add	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4403      	add	r3, r0
 8002498:	331c      	adds	r3, #28
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4419      	add	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a2:	4613      	mov	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	3320      	adds	r3, #32
 80024ae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80024b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d113      	bne.n	80024de <HAL_PCD_IRQHandler+0x3a2>
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3324      	adds	r3, #36	@ 0x24
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d108      	bne.n	80024de <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80024d6:	461a      	mov	r2, r3
 80024d8:	2101      	movs	r1, #1
 80024da:	f002 fe39 	bl	8005150 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80024de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4619      	mov	r1, r3
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f005 f932 	bl	800774e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d008      	beq.n	8002506 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002500:	461a      	mov	r2, r3
 8002502:	2308      	movs	r3, #8
 8002504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	f003 0310 	and.w	r3, r3, #16
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800251c:	461a      	mov	r2, r3
 800251e:	2310      	movs	r3, #16
 8002520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002538:	461a      	mov	r2, r3
 800253a:	2340      	movs	r3, #64	@ 0x40
 800253c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d023      	beq.n	8002590 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002548:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800254a:	6a38      	ldr	r0, [r7, #32]
 800254c:	f001 fe20 	bl	8004190 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002552:	4613      	mov	r3, r2
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	3310      	adds	r3, #16
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	4413      	add	r3, r2
 8002560:	3304      	adds	r3, #4
 8002562:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	78db      	ldrb	r3, [r3, #3]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d108      	bne.n	800257e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	b2db      	uxtb	r3, r3
 8002576:	4619      	mov	r1, r3
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f005 f975 	bl	8007868 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800258a:	461a      	mov	r2, r3
 800258c:	2302      	movs	r3, #2
 800258e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800259a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fcbd 	bl	8002f1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80025a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025aa:	085b      	lsrs	r3, r3, #1
 80025ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80025ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af2e 	bne.w	8002412 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 fd04 	bl	8004fc8 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80025c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80025ca:	d122      	bne.n	8002612 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025f2:	2100      	movs	r1, #0
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 fea3 	bl	8003340 <HAL_PCDEx_LPM_Callback>
 80025fa:	e002      	b.n	8002602 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f005 f913 	bl	8007828 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	695a      	ldr	r2, [r3, #20]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 fcd6 	bl	8004fc8 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002626:	d112      	bne.n	800264e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d102      	bne.n	800263e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f005 f8cf 	bl	80077dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800264c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f002 fcb8 	bl	8004fc8 <USB_ReadInterrupts>
 8002658:	4603      	mov	r3, r0
 800265a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800265e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002662:	f040 80b7 	bne.w	80027d4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002674:	f023 0301 	bic.w	r3, r3, #1
 8002678:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2110      	movs	r1, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f001 fd85 	bl	8004190 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800268a:	e046      	b.n	800271a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002698:	461a      	mov	r2, r3
 800269a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800269e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80026a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026b0:	0151      	lsls	r1, r2, #5
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	440a      	add	r2, r1
 80026b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80026ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80026d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80026d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e4:	0151      	lsls	r1, r2, #5
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	440a      	add	r2, r1
 80026ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80026ee:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80026f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80026f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f6:	015a      	lsls	r2, r3, #5
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002704:	0151      	lsls	r1, r2, #5
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	440a      	add	r2, r1
 800270a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800270e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002712:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002716:	3301      	adds	r3, #1
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	461a      	mov	r2, r3
 8002720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002722:	4293      	cmp	r3, r2
 8002724:	d3b2      	bcc.n	800268c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	69fa      	ldr	r2, [r7, #28]
 8002730:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002734:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002738:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	7bdb      	ldrb	r3, [r3, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d016      	beq.n	8002770 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002748:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002752:	f043 030b 	orr.w	r3, r3, #11
 8002756:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002768:	f043 030b 	orr.w	r3, r3, #11
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	e015      	b.n	800279c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	69fa      	ldr	r2, [r7, #28]
 800277a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800277e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002782:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002786:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002796:	f043 030b 	orr.w	r3, r3, #11
 800279a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027aa:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80027ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80027be:	461a      	mov	r2, r3
 80027c0:	f002 fcc6 	bl	8005150 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695a      	ldr	r2, [r3, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80027d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fbf5 	bl	8004fc8 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80027e8:	d123      	bne.n	8002832 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fc8b 	bl	800510a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 fd42 	bl	8004282 <USB_GetDevSpeed>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681c      	ldr	r4, [r3, #0]
 800280a:	f001 f9c9 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 800280e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002814:	461a      	mov	r2, r3
 8002816:	4620      	mov	r0, r4
 8002818:	f001 fa46 	bl	8003ca8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f004 ffbe 	bl	800779e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695a      	ldr	r2, [r3, #20]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002830:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f002 fbc6 	bl	8004fc8 <USB_ReadInterrupts>
 800283c:	4603      	mov	r3, r0
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b08      	cmp	r3, #8
 8002844:	d10a      	bne.n	800285c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f004 ff9b 	bl	8007782 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695a      	ldr	r2, [r3, #20]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f002 0208 	and.w	r2, r2, #8
 800285a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fbb1 	bl	8004fc8 <USB_ReadInterrupts>
 8002866:	4603      	mov	r3, r0
 8002868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286c:	2b80      	cmp	r3, #128	@ 0x80
 800286e:	d123      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800287c:	2301      	movs	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002880:	e014      	b.n	80028ac <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002886:	4613      	mov	r3, r2
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800289a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fb0a 	bl	8002eba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d3e4      	bcc.n	8002882 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4618      	mov	r0, r3
 80028be:	f002 fb83 	bl	8004fc8 <USB_ReadInterrupts>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80028cc:	d13c      	bne.n	8002948 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028ce:	2301      	movs	r3, #1
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d2:	e02b      	b.n	800292c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80028d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3318      	adds	r3, #24
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d115      	bne.n	8002926 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80028fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da12      	bge.n	8002926 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	3317      	adds	r3, #23
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4619      	mov	r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 faca 	bl	8002eba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	3301      	adds	r3, #1
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	791b      	ldrb	r3, [r3, #4]
 8002930:	461a      	mov	r2, r3
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	4293      	cmp	r3, r2
 8002936:	d3cd      	bcc.n	80028d4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695a      	ldr	r2, [r3, #20]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f002 fb3b 	bl	8004fc8 <USB_ReadInterrupts>
 8002952:	4603      	mov	r3, r0
 8002954:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002958:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800295c:	d156      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800295e:	2301      	movs	r3, #1
 8002960:	627b      	str	r3, [r7, #36]	@ 0x24
 8002962:	e045      	b.n	80029f0 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002978:	4613      	mov	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4413      	add	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d12e      	bne.n	80029ea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800298c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800298e:	2b00      	cmp	r3, #0
 8002990:	da2b      	bge.n	80029ea <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800299e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d121      	bne.n	80029ea <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80029a6:	6879      	ldr	r1, [r7, #4]
 80029a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029e6:	6053      	str	r3, [r2, #4]
            break;
 80029e8:	e008      	b.n	80029fc <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	3301      	adds	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	461a      	mov	r2, r3
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d3b3      	bcc.n	8002964 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fad9 	bl	8004fc8 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d10a      	bne.n	8002a38 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 ff32 	bl	800788c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695a      	ldr	r2, [r3, #20]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002a36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f002 fac3 	bl	8004fc8 <USB_ReadInterrupts>
 8002a42:	4603      	mov	r3, r0
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d115      	bne.n	8002a78 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d002      	beq.n	8002a64 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f004 ff22 	bl	80078a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
 8002a74:	e000      	b.n	8002a78 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002a76:	bf00      	nop
    }
  }
}
 8002a78:	3734      	adds	r7, #52	@ 0x34
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_PCD_SetAddress+0x1a>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e012      	b.n	8002abe <HAL_PCD_SetAddress+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	78fa      	ldrb	r2, [r7, #3]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 fa22 	bl	8004ef8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	4608      	mov	r0, r1
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	70fb      	strb	r3, [r7, #3]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	803b      	strh	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da0f      	bge.n	8002b0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 020f 	and.w	r2, r3, #15
 8002af2:	4613      	mov	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4413      	add	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	3310      	adds	r3, #16
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2201      	movs	r2, #1
 8002b08:	705a      	strb	r2, [r3, #1]
 8002b0a:	e00f      	b.n	8002b2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	78fb      	ldrb	r3, [r7, #3]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	3304      	adds	r3, #4
 8002b24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 030f 	and.w	r3, r3, #15
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002b38:	883b      	ldrh	r3, [r7, #0]
 8002b3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	78ba      	ldrb	r2, [r7, #2]
 8002b46:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	785b      	ldrb	r3, [r3, #1]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d004      	beq.n	8002b5a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002b5a:	78bb      	ldrb	r3, [r7, #2]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_EP_Open+0xae>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e00e      	b.n	8002b92 <HAL_PCD_EP_Open+0xcc>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fba2 	bl	80042cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002b90:	7afb      	ldrb	r3, [r7, #11]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b084      	sub	sp, #16
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	da0f      	bge.n	8002bce <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	f003 020f 	and.w	r2, r3, #15
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	4413      	add	r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3310      	adds	r3, #16
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	705a      	strb	r2, [r3, #1]
 8002bcc:	e00f      	b.n	8002bee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_PCD_EP_Close+0x6e>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e00e      	b.n	8002c26 <HAL_PCD_EP_Close+0x8c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fbe0 	bl	80043dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	607a      	str	r2, [r7, #4]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	7afb      	ldrb	r3, [r7, #11]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c50:	68fa      	ldr	r2, [r7, #12]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	2200      	movs	r2, #0
 8002c68:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c70:	7afb      	ldrb	r3, [r7, #11]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	799b      	ldrb	r3, [r3, #6]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d102      	bne.n	8002c8a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	799b      	ldrb	r3, [r3, #6]
 8002c92:	461a      	mov	r2, r3
 8002c94:	6979      	ldr	r1, [r7, #20]
 8002c96:	f001 fc7d 	bl	8004594 <USB_EPStartXfer>

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	460b      	mov	r3, r1
 8002cae:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	f003 020f 	and.w	r2, r3, #15
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002cc6:	681b      	ldr	r3, [r3, #0]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce4:	7afb      	ldrb	r3, [r7, #11]
 8002ce6:	f003 020f 	and.w	r2, r3, #15
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3310      	adds	r3, #16
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d14:	7afb      	ldrb	r3, [r7, #11]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	799b      	ldrb	r3, [r3, #6]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	799b      	ldrb	r3, [r3, #6]
 8002d36:	461a      	mov	r2, r3
 8002d38:	6979      	ldr	r1, [r7, #20]
 8002d3a:	f001 fc2b 	bl	8004594 <USB_EPStartXfer>

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	7912      	ldrb	r2, [r2, #4]
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e04f      	b.n	8002e06 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da0f      	bge.n	8002d8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d6e:	78fb      	ldrb	r3, [r7, #3]
 8002d70:	f003 020f 	and.w	r2, r3, #15
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	3310      	adds	r3, #16
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	4413      	add	r3, r2
 8002d82:	3304      	adds	r3, #4
 8002d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	705a      	strb	r2, [r3, #1]
 8002d8c:	e00d      	b.n	8002daa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	4613      	mov	r3, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4413      	add	r3, r2
 8002da0:	3304      	adds	r3, #4
 8002da2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2201      	movs	r2, #1
 8002dae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_PCD_EP_SetStall+0x82>
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	e01d      	b.n	8002e06 <HAL_PCD_EP_SetStall+0xbe>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68f9      	ldr	r1, [r7, #12]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f001 ffb9 	bl	8004d50 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dde:	78fb      	ldrb	r3, [r7, #3]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6818      	ldr	r0, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7999      	ldrb	r1, [r3, #6]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002df6:	461a      	mov	r2, r3
 8002df8:	f002 f9aa 	bl	8005150 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	460b      	mov	r3, r1
 8002e18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	7912      	ldrb	r2, [r2, #4]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d901      	bls.n	8002e2c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e042      	b.n	8002eb2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da0f      	bge.n	8002e54 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	f003 020f 	and.w	r2, r3, #15
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	3310      	adds	r3, #16
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	3304      	adds	r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	705a      	strb	r2, [r3, #1]
 8002e52:	e00f      	b.n	8002e74 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e54:	78fb      	ldrb	r3, [r7, #3]
 8002e56:	f003 020f 	and.w	r2, r3, #15
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e7a:	78fb      	ldrb	r3, [r7, #3]
 8002e7c:	f003 030f 	and.w	r3, r3, #15
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_PCD_EP_ClrStall+0x86>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e00e      	b.n	8002eb2 <HAL_PCD_EP_ClrStall+0xa4>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68f9      	ldr	r1, [r7, #12]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f001 ffc2 	bl	8004e2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ec6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	da0c      	bge.n	8002ee8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ece:	78fb      	ldrb	r3, [r7, #3]
 8002ed0:	f003 020f 	and.w	r2, r3, #15
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	3310      	adds	r3, #16
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	e00c      	b.n	8002f02 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68f9      	ldr	r1, [r7, #12]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fde1 	bl	8004ad0 <USB_EPStopXfer>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002f12:	7afb      	ldrb	r3, [r7, #11]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08a      	sub	sp, #40	@ 0x28
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d901      	bls.n	8002f54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e06b      	b.n	800302c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	69fa      	ldr	r2, [r7, #28]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d902      	bls.n	8002f70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	3303      	adds	r3, #3
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f78:	e02a      	b.n	8002fd0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691a      	ldr	r2, [r3, #16]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d902      	bls.n	8002f96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	3303      	adds	r3, #3
 8002f9a:	089b      	lsrs	r3, r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68d9      	ldr	r1, [r3, #12]
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f001 fe36 	bl	8004c24 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	441a      	add	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	441a      	add	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d809      	bhi.n	8002ffa <PCD_WriteEmptyTxFifo+0xde>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	695a      	ldr	r2, [r3, #20]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d203      	bcs.n	8002ffa <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1bf      	bne.n	8002f7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	429a      	cmp	r2, r3
 8003004:	d811      	bhi.n	800302a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f003 030f 	and.w	r3, r3, #15
 800300c:	2201      	movs	r2, #1
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800301a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	43db      	mvns	r3, r3
 8003020:	6939      	ldr	r1, [r7, #16]
 8003022:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003026:	4013      	ands	r3, r2
 8003028:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	333c      	adds	r3, #60	@ 0x3c
 800304c:	3304      	adds	r3, #4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	015a      	lsls	r2, r3, #5
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4413      	add	r3, r2
 800305a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d17b      	bne.n	8003162 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	d015      	beq.n	80030a0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	4a61      	ldr	r2, [pc, #388]	@ (80031fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003078:	4293      	cmp	r3, r2
 800307a:	f240 80b9 	bls.w	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80b3 	beq.w	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	4413      	add	r3, r2
 8003092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003096:	461a      	mov	r2, r3
 8003098:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	e0a7      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d009      	beq.n	80030be <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	2320      	movs	r3, #32
 80030ba:	6093      	str	r3, [r2, #8]
 80030bc:	e098      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 8093 	bne.w	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4a4b      	ldr	r2, [pc, #300]	@ (80031fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d90f      	bls.n	80030f2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030e8:	461a      	mov	r2, r3
 80030ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030ee:	6093      	str	r3, [r2, #8]
 80030f0:	e07e      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a1a      	ldr	r2, [r3, #32]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	0159      	lsls	r1, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	440b      	add	r3, r1
 8003114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311e:	1ad2      	subs	r2, r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d114      	bne.n	8003154 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6818      	ldr	r0, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800313c:	461a      	mov	r2, r3
 800313e:	2101      	movs	r1, #1
 8003140:	f002 f806 	bl	8005150 <USB_EP0_OutStart>
 8003144:	e006      	b.n	8003154 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	68da      	ldr	r2, [r3, #12]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	441a      	add	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f004 fadc 	bl	8007718 <HAL_PCD_DataOutStageCallback>
 8003160:	e046      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4a26      	ldr	r2, [pc, #152]	@ (8003200 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d124      	bne.n	80031b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	4413      	add	r3, r2
 800317c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003180:	461a      	mov	r2, r3
 8003182:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003186:	6093      	str	r3, [r2, #8]
 8003188:	e032      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	4413      	add	r3, r2
 800319c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a0:	461a      	mov	r2, r3
 80031a2:	2320      	movs	r3, #32
 80031a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	4619      	mov	r1, r3
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f004 fab3 	bl	8007718 <HAL_PCD_DataOutStageCallback>
 80031b2:	e01d      	b.n	80031f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d114      	bne.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	4413      	add	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80031dc:	461a      	mov	r2, r3
 80031de:	2100      	movs	r1, #0
 80031e0:	f001 ffb6 	bl	8005150 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f004 fa94 	bl	8007718 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	4f54300a 	.word	0x4f54300a
 8003200:	4f54310a 	.word	0x4f54310a

08003204 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	333c      	adds	r3, #60	@ 0x3c
 800321c:	3304      	adds	r3, #4
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4a15      	ldr	r2, [pc, #84]	@ (800328c <PCD_EP_OutSetupPacket_int+0x88>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90e      	bls.n	8003258 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003240:	2b00      	cmp	r3, #0
 8003242:	d009      	beq.n	8003258 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003256:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f004 fa4b 	bl	80076f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <PCD_EP_OutSetupPacket_int+0x88>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d90c      	bls.n	8003280 <PCD_EP_OutSetupPacket_int+0x7c>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	799b      	ldrb	r3, [r3, #6]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d108      	bne.n	8003280 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003278:	461a      	mov	r2, r3
 800327a:	2101      	movs	r1, #1
 800327c:	f001 ff68 	bl	8005150 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	4f54300a 	.word	0x4f54300a

08003290 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	70fb      	strb	r3, [r7, #3]
 800329c:	4613      	mov	r3, r2
 800329e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80032a8:	78fb      	ldrb	r3, [r7, #3]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d107      	bne.n	80032be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80032ae:	883b      	ldrh	r3, [r7, #0]
 80032b0:	0419      	lsls	r1, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80032bc:	e028      	b.n	8003310 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4413      	add	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e00d      	b.n	80032ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	3340      	adds	r3, #64	@ 0x40
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	4413      	add	r3, r2
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	4413      	add	r3, r2
 80032e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	3301      	adds	r3, #1
 80032ec:	73fb      	strb	r3, [r7, #15]
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	78fb      	ldrb	r3, [r7, #3]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d3ec      	bcc.n	80032d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032f8:	883b      	ldrh	r3, [r7, #0]
 80032fa:	0418      	lsls	r0, r3, #16
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6819      	ldr	r1, [r3, #0]
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	3b01      	subs	r3, #1
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	4302      	orrs	r2, r0
 8003308:	3340      	adds	r3, #64	@ 0x40
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	887a      	ldrh	r2, [r7, #2]
 8003330:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e267      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d075      	beq.n	8003462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003376:	4b88      	ldr	r3, [pc, #544]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f003 030c 	and.w	r3, r3, #12
 800337e:	2b04      	cmp	r3, #4
 8003380:	d00c      	beq.n	800339c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003382:	4b85      	ldr	r3, [pc, #532]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800338a:	2b08      	cmp	r3, #8
 800338c:	d112      	bne.n	80033b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800338e:	4b82      	ldr	r3, [pc, #520]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800339a:	d10b      	bne.n	80033b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339c:	4b7e      	ldr	r3, [pc, #504]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05b      	beq.n	8003460 <HAL_RCC_OscConfig+0x108>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d157      	bne.n	8003460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e242      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033bc:	d106      	bne.n	80033cc <HAL_RCC_OscConfig+0x74>
 80033be:	4b76      	ldr	r3, [pc, #472]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a75      	ldr	r2, [pc, #468]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e01d      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d4:	d10c      	bne.n	80033f0 <HAL_RCC_OscConfig+0x98>
 80033d6:	4b70      	ldr	r3, [pc, #448]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6f      	ldr	r2, [pc, #444]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a6c      	ldr	r2, [pc, #432]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e00b      	b.n	8003408 <HAL_RCC_OscConfig+0xb0>
 80033f0:	4b69      	ldr	r3, [pc, #420]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a68      	ldr	r2, [pc, #416]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	4b66      	ldr	r3, [pc, #408]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a65      	ldr	r2, [pc, #404]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d013      	beq.n	8003438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fd fc24 	bl	8000c5c <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003418:	f7fd fc20 	bl	8000c5c <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b64      	cmp	r3, #100	@ 0x64
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e207      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	4b5b      	ldr	r3, [pc, #364]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0xc0>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003438:	f7fd fc10 	bl	8000c5c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fd fc0c 	bl	8000c5c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e1f3      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	4b51      	ldr	r3, [pc, #324]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1f0      	bne.n	8003440 <HAL_RCC_OscConfig+0xe8>
 800345e:	e000      	b.n	8003462 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800346e:	4b4a      	ldr	r3, [pc, #296]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 030c 	and.w	r3, r3, #12
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800347a:	4b47      	ldr	r3, [pc, #284]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003482:	2b08      	cmp	r3, #8
 8003484:	d11c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003486:	4b44      	ldr	r3, [pc, #272]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d116      	bne.n	80034c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	4b41      	ldr	r3, [pc, #260]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x152>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e1c7      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034aa:	4b3b      	ldr	r3, [pc, #236]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4937      	ldr	r1, [pc, #220]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034be:	e03a      	b.n	8003536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d020      	beq.n	800350a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c8:	4b34      	ldr	r3, [pc, #208]	@ (800359c <HAL_RCC_OscConfig+0x244>)
 80034ca:	2201      	movs	r2, #1
 80034cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fd fbc5 	bl	8000c5c <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fd fbc1 	bl	8000c5c <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e1a8      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b28      	ldr	r3, [pc, #160]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4925      	ldr	r1, [pc, #148]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 8003504:	4313      	orrs	r3, r2
 8003506:	600b      	str	r3, [r1, #0]
 8003508:	e015      	b.n	8003536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b24      	ldr	r3, [pc, #144]	@ (800359c <HAL_RCC_OscConfig+0x244>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fd fba4 	bl	8000c5c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7fd fba0 	bl	8000c5c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e187      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0308 	and.w	r3, r3, #8
 800353e:	2b00      	cmp	r3, #0
 8003540:	d036      	beq.n	80035b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d016      	beq.n	8003578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800354a:	4b15      	ldr	r3, [pc, #84]	@ (80035a0 <HAL_RCC_OscConfig+0x248>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fd fb84 	bl	8000c5c <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003558:	f7fd fb80 	bl	8000c5c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e167      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	4b0b      	ldr	r3, [pc, #44]	@ (8003598 <HAL_RCC_OscConfig+0x240>)
 800356c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x200>
 8003576:	e01b      	b.n	80035b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003578:	4b09      	ldr	r3, [pc, #36]	@ (80035a0 <HAL_RCC_OscConfig+0x248>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fd fb6d 	bl	8000c5c <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003584:	e00e      	b.n	80035a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003586:	f7fd fb69 	bl	8000c5c <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d907      	bls.n	80035a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e150      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
 8003598:	40023800 	.word	0x40023800
 800359c:	42470000 	.word	0x42470000
 80035a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a4:	4b88      	ldr	r3, [pc, #544]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80035a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1ea      	bne.n	8003586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0304 	and.w	r3, r3, #4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8097 	beq.w	80036ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035be:	2300      	movs	r3, #0
 80035c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c2:	4b81      	ldr	r3, [pc, #516]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10f      	bne.n	80035ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	4b7d      	ldr	r3, [pc, #500]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d6:	4a7c      	ldr	r2, [pc, #496]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035de:	4b7a      	ldr	r3, [pc, #488]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b77      	ldr	r3, [pc, #476]	@ (80037cc <HAL_RCC_OscConfig+0x474>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b74      	ldr	r3, [pc, #464]	@ (80037cc <HAL_RCC_OscConfig+0x474>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a73      	ldr	r2, [pc, #460]	@ (80037cc <HAL_RCC_OscConfig+0x474>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7fd fb29 	bl	8000c5c <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fd fb25 	bl	8000c5c <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b02      	cmp	r3, #2
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e10c      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b6a      	ldr	r3, [pc, #424]	@ (80037cc <HAL_RCC_OscConfig+0x474>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x2ea>
 8003634:	4b64      	ldr	r3, [pc, #400]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003638:	4a63      	ldr	r2, [pc, #396]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003640:	e01c      	b.n	800367c <HAL_RCC_OscConfig+0x324>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b05      	cmp	r3, #5
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x30c>
 800364a:	4b5f      	ldr	r3, [pc, #380]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800364c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364e:	4a5e      	ldr	r2, [pc, #376]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 0304 	orr.w	r3, r3, #4
 8003654:	6713      	str	r3, [r2, #112]	@ 0x70
 8003656:	4b5c      	ldr	r3, [pc, #368]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800365a:	4a5b      	ldr	r2, [pc, #364]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	f043 0301 	orr.w	r3, r3, #1
 8003660:	6713      	str	r3, [r2, #112]	@ 0x70
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0x324>
 8003664:	4b58      	ldr	r3, [pc, #352]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003668:	4a57      	ldr	r2, [pc, #348]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003670:	4b55      	ldr	r3, [pc, #340]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003674:	4a54      	ldr	r2, [pc, #336]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003676:	f023 0304 	bic.w	r3, r3, #4
 800367a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d015      	beq.n	80036b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003684:	f7fd faea 	bl	8000c5c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800368c:	f7fd fae6 	bl	8000c5c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e0cb      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a2:	4b49      	ldr	r3, [pc, #292]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80036a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RCC_OscConfig+0x334>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7fd fad4 	bl	8000c5c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fad0 	bl	8000c5c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0b5      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ce:	4b3e      	ldr	r3, [pc, #248]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1ee      	bne.n	80036b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d105      	bne.n	80036ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e0:	4b39      	ldr	r3, [pc, #228]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	4a38      	ldr	r2, [pc, #224]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a1 	beq.w	8003838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036f6:	4b34      	ldr	r3, [pc, #208]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d05c      	beq.n	80037bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	2b02      	cmp	r3, #2
 8003708:	d141      	bne.n	800378e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370a:	4b31      	ldr	r3, [pc, #196]	@ (80037d0 <HAL_RCC_OscConfig+0x478>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003710:	f7fd faa4 	bl	8000c5c <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003718:	f7fd faa0 	bl	8000c5c <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e087      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800372a:	4b27      	ldr	r3, [pc, #156]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	019b      	lsls	r3, r3, #6
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	041b      	lsls	r3, r3, #16
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	061b      	lsls	r3, r3, #24
 800375a:	491b      	ldr	r1, [pc, #108]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 800375c:	4313      	orrs	r3, r2
 800375e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003760:	4b1b      	ldr	r3, [pc, #108]	@ (80037d0 <HAL_RCC_OscConfig+0x478>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003766:	f7fd fa79 	bl	8000c5c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376c:	e008      	b.n	8003780 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376e:	f7fd fa75 	bl	8000c5c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e05c      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0f0      	beq.n	800376e <HAL_RCC_OscConfig+0x416>
 800378c:	e054      	b.n	8003838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800378e:	4b10      	ldr	r3, [pc, #64]	@ (80037d0 <HAL_RCC_OscConfig+0x478>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fd fa62 	bl	8000c5c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fd fa5e 	bl	8000c5c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e045      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <HAL_RCC_OscConfig+0x470>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x444>
 80037ba:	e03d      	b.n	8003838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e038      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40007000 	.word	0x40007000
 80037d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003844 <HAL_RCC_OscConfig+0x4ec>)
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d028      	beq.n	8003834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d121      	bne.n	8003834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d11a      	bne.n	8003834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800380a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381a:	085b      	lsrs	r3, r3, #1
 800381c:	3b01      	subs	r3, #1
 800381e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800382e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e000      	b.n	800383a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800

08003848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d101      	bne.n	800385c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0cc      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800385c:	4b68      	ldr	r3, [pc, #416]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d90c      	bls.n	8003884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386a:	4b65      	ldr	r3, [pc, #404]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003872:	4b63      	ldr	r3, [pc, #396]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0b8      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d020      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d005      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800389c:	4b59      	ldr	r3, [pc, #356]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4a58      	ldr	r2, [pc, #352]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0308 	and.w	r3, r3, #8
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b4:	4b53      	ldr	r3, [pc, #332]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4a52      	ldr	r2, [pc, #328]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c0:	4b50      	ldr	r3, [pc, #320]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	494d      	ldr	r1, [pc, #308]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d044      	beq.n	8003968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d107      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e6:	4b47      	ldr	r3, [pc, #284]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d119      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e07f      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d003      	beq.n	8003906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003902:	2b03      	cmp	r3, #3
 8003904:	d107      	bne.n	8003916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b3f      	ldr	r3, [pc, #252]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e06f      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003916:	4b3b      	ldr	r3, [pc, #236]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e067      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003926:	4b37      	ldr	r3, [pc, #220]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f023 0203 	bic.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	4934      	ldr	r1, [pc, #208]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	4313      	orrs	r3, r2
 8003936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003938:	f7fd f990 	bl	8000c5c <HAL_GetTick>
 800393c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393e:	e00a      	b.n	8003956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003940:	f7fd f98c 	bl	8000c5c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e04f      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003956:	4b2b      	ldr	r3, [pc, #172]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 020c 	and.w	r2, r3, #12
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	429a      	cmp	r2, r3
 8003966:	d1eb      	bne.n	8003940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003968:	4b25      	ldr	r3, [pc, #148]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d20c      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003976:	4b22      	ldr	r3, [pc, #136]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b20      	ldr	r3, [pc, #128]	@ (8003a00 <HAL_RCC_ClockConfig+0x1b8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e032      	b.n	80039f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399c:	4b19      	ldr	r3, [pc, #100]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4916      	ldr	r1, [pc, #88]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0308 	and.w	r3, r3, #8
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ba:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	490e      	ldr	r1, [pc, #56]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ce:	f000 f821 	bl	8003a14 <HAL_RCC_GetSysClockFreq>
 80039d2:	4602      	mov	r2, r0
 80039d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	490a      	ldr	r1, [pc, #40]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c0>)
 80039e0:	5ccb      	ldrb	r3, [r1, r3]
 80039e2:	fa22 f303 	lsr.w	r3, r2, r3
 80039e6:	4a09      	ldr	r2, [pc, #36]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80039ea:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fd f8f0 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023c00 	.word	0x40023c00
 8003a04:	40023800 	.word	0x40023800
 8003a08:	08008624 	.word	0x08008624
 8003a0c:	20000008 	.word	0x20000008
 8003a10:	2000000c 	.word	0x2000000c

08003a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a18:	b090      	sub	sp, #64	@ 0x40
 8003a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a2c:	4b59      	ldr	r3, [pc, #356]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f003 030c 	and.w	r3, r3, #12
 8003a34:	2b08      	cmp	r3, #8
 8003a36:	d00d      	beq.n	8003a54 <HAL_RCC_GetSysClockFreq+0x40>
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	f200 80a1 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x34>
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a46:	e09b      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a4c:	e09b      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a4e:	4b53      	ldr	r3, [pc, #332]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a52:	e098      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a54:	4b4f      	ldr	r3, [pc, #316]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a5c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a5e:	4b4d      	ldr	r3, [pc, #308]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d028      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	099b      	lsrs	r3, r3, #6
 8003a70:	2200      	movs	r2, #0
 8003a72:	623b      	str	r3, [r7, #32]
 8003a74:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a76:	6a3b      	ldr	r3, [r7, #32]
 8003a78:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4b47      	ldr	r3, [pc, #284]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a80:	fb03 f201 	mul.w	r2, r3, r1
 8003a84:	2300      	movs	r3, #0
 8003a86:	fb00 f303 	mul.w	r3, r0, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a43      	ldr	r2, [pc, #268]	@ (8003b9c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a8e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a94:	460a      	mov	r2, r1
 8003a96:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a9a:	4413      	add	r3, r2
 8003a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	61fa      	str	r2, [r7, #28]
 8003aa6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aaa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003aae:	f7fc fbff 	bl	80002b0 <__aeabi_uldivmod>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003aba:	e053      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abc:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	099b      	lsrs	r3, r3, #6
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	617a      	str	r2, [r7, #20]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003ace:	f04f 0b00 	mov.w	fp, #0
 8003ad2:	4652      	mov	r2, sl
 8003ad4:	465b      	mov	r3, fp
 8003ad6:	f04f 0000 	mov.w	r0, #0
 8003ada:	f04f 0100 	mov.w	r1, #0
 8003ade:	0159      	lsls	r1, r3, #5
 8003ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ae4:	0150      	lsls	r0, r2, #5
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	ebb2 080a 	subs.w	r8, r2, sl
 8003aee:	eb63 090b 	sbc.w	r9, r3, fp
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003afe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b02:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b06:	ebb2 0408 	subs.w	r4, r2, r8
 8003b0a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	00eb      	lsls	r3, r5, #3
 8003b18:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1c:	00e2      	lsls	r2, r4, #3
 8003b1e:	4614      	mov	r4, r2
 8003b20:	461d      	mov	r5, r3
 8003b22:	eb14 030a 	adds.w	r3, r4, sl
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	eb45 030b 	adc.w	r3, r5, fp
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	028b      	lsls	r3, r1, #10
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b44:	4621      	mov	r1, r4
 8003b46:	028a      	lsls	r2, r1, #10
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	2200      	movs	r2, #0
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	60fa      	str	r2, [r7, #12]
 8003b54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b58:	f7fc fbaa 	bl	80002b0 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003b74:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3740      	adds	r7, #64	@ 0x40
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	017d7840 	.word	0x017d7840

08003ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	@ (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000008 	.word	0x20000008

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	@ (8003bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	@ (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08008634 	.word	0x08008634

08003be0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003be0:	b084      	sub	sp, #16
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	f107 001c 	add.w	r0, r7, #28
 8003bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d123      	bne.n	8003c42 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d105      	bne.n	8003c36 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fae8 	bl	800520c <USB_CoreReset>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	73fb      	strb	r3, [r7, #15]
 8003c40:	e01b      	b.n	8003c7a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 fadc 	bl	800520c <USB_CoreReset>
 8003c54:	4603      	mov	r3, r0
 8003c56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003c6c:	e005      	b.n	8003c7a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c7a:	7fbb      	ldrb	r3, [r7, #30]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d10b      	bne.n	8003c98 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f043 0206 	orr.w	r2, r3, #6
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ca4:	b004      	add	sp, #16
 8003ca6:	4770      	bx	lr

08003ca8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d165      	bne.n	8003d88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a41      	ldr	r2, [pc, #260]	@ (8003dc4 <USB_SetTurnaroundTime+0x11c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d906      	bls.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4a40      	ldr	r2, [pc, #256]	@ (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d202      	bcs.n	8003cd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ccc:	230f      	movs	r3, #15
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	e062      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8003dc8 <USB_SetTurnaroundTime+0x120>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d306      	bcc.n	8003ce8 <USB_SetTurnaroundTime+0x40>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	@ (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d202      	bcs.n	8003ce8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ce2:	230e      	movs	r3, #14
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	e057      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a38      	ldr	r2, [pc, #224]	@ (8003dcc <USB_SetTurnaroundTime+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d306      	bcc.n	8003cfe <USB_SetTurnaroundTime+0x56>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	@ (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d202      	bcs.n	8003cfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cf8:	230d      	movs	r3, #13
 8003cfa:	617b      	str	r3, [r7, #20]
 8003cfc:	e04c      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a33      	ldr	r2, [pc, #204]	@ (8003dd0 <USB_SetTurnaroundTime+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d306      	bcc.n	8003d14 <USB_SetTurnaroundTime+0x6c>
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	4a32      	ldr	r2, [pc, #200]	@ (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d802      	bhi.n	8003d14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d0e:	230c      	movs	r3, #12
 8003d10:	617b      	str	r3, [r7, #20]
 8003d12:	e041      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd4 <USB_SetTurnaroundTime+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d906      	bls.n	8003d2a <USB_SetTurnaroundTime+0x82>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d802      	bhi.n	8003d2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d24:	230b      	movs	r3, #11
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e036      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003dd8 <USB_SetTurnaroundTime+0x130>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d906      	bls.n	8003d40 <USB_SetTurnaroundTime+0x98>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	4a29      	ldr	r2, [pc, #164]	@ (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d802      	bhi.n	8003d40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d3a:	230a      	movs	r3, #10
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e02b      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a26      	ldr	r2, [pc, #152]	@ (8003ddc <USB_SetTurnaroundTime+0x134>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d906      	bls.n	8003d56 <USB_SetTurnaroundTime+0xae>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a25      	ldr	r2, [pc, #148]	@ (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d202      	bcs.n	8003d56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d50:	2309      	movs	r3, #9
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e020      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a21      	ldr	r2, [pc, #132]	@ (8003de0 <USB_SetTurnaroundTime+0x138>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d306      	bcc.n	8003d6c <USB_SetTurnaroundTime+0xc4>
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4a20      	ldr	r2, [pc, #128]	@ (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d802      	bhi.n	8003d6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d66:	2308      	movs	r3, #8
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	e015      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003de4 <USB_SetTurnaroundTime+0x13c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d906      	bls.n	8003d82 <USB_SetTurnaroundTime+0xda>
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <USB_SetTurnaroundTime+0x140>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d202      	bcs.n	8003d82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d7c:	2307      	movs	r3, #7
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e00a      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d82:	2306      	movs	r3, #6
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e007      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d102      	bne.n	8003d94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d8e:	2309      	movs	r3, #9
 8003d90:	617b      	str	r3, [r7, #20]
 8003d92:	e001      	b.n	8003d98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d94:	2309      	movs	r3, #9
 8003d96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	029b      	lsls	r3, r3, #10
 8003dac:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003db0:	431a      	orrs	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	371c      	adds	r7, #28
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	00d8acbf 	.word	0x00d8acbf
 8003dc8:	00e4e1c0 	.word	0x00e4e1c0
 8003dcc:	00f42400 	.word	0x00f42400
 8003dd0:	01067380 	.word	0x01067380
 8003dd4:	011a499f 	.word	0x011a499f
 8003dd8:	01312cff 	.word	0x01312cff
 8003ddc:	014ca43f 	.word	0x014ca43f
 8003de0:	016e3600 	.word	0x016e3600
 8003de4:	01a6ab1f 	.word	0x01a6ab1f
 8003de8:	01e84800 	.word	0x01e84800

08003dec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f023 0201 	bic.w	r2, r3, #1
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d115      	bne.n	8003e7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e5e:	200a      	movs	r0, #10
 8003e60:	f7fc ff08 	bl	8000c74 <HAL_Delay>
      ms += 10U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	330a      	adds	r3, #10
 8003e68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 f93f 	bl	80050ee <USB_GetMode>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d01e      	beq.n	8003eb4 <USB_SetCurrentMode+0x84>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2bc7      	cmp	r3, #199	@ 0xc7
 8003e7a:	d9f0      	bls.n	8003e5e <USB_SetCurrentMode+0x2e>
 8003e7c:	e01a      	b.n	8003eb4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e7e:	78fb      	ldrb	r3, [r7, #3]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d115      	bne.n	8003eb0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003e90:	200a      	movs	r0, #10
 8003e92:	f7fc feef 	bl	8000c74 <HAL_Delay>
      ms += 10U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	330a      	adds	r3, #10
 8003e9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f001 f926 	bl	80050ee <USB_GetMode>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d005      	beq.n	8003eb4 <USB_SetCurrentMode+0x84>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eac:	d9f0      	bls.n	8003e90 <USB_SetCurrentMode+0x60>
 8003eae:	e001      	b.n	8003eb4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e005      	b.n	8003ec0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2bc8      	cmp	r3, #200	@ 0xc8
 8003eb8:	d101      	bne.n	8003ebe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ec8:	b084      	sub	sp, #16
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b086      	sub	sp, #24
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	e009      	b.n	8003efc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3340      	adds	r3, #64	@ 0x40
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b0e      	cmp	r3, #14
 8003f00:	d9f2      	bls.n	8003ee8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d11c      	bne.n	8003f44 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f42:	e00b      	b.n	8003f5c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f54:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003f62:	461a      	mov	r2, r3
 8003f64:	2300      	movs	r3, #0
 8003f66:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f68:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10d      	bne.n	8003f8c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d104      	bne.n	8003f82 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f78:	2100      	movs	r1, #0
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f968 	bl	8004250 <USB_SetDevSpeed>
 8003f80:	e008      	b.n	8003f94 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f82:	2101      	movs	r1, #1
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f963 	bl	8004250 <USB_SetDevSpeed>
 8003f8a:	e003      	b.n	8003f94 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f8c:	2103      	movs	r1, #3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f95e 	bl	8004250 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f94:	2110      	movs	r1, #16
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 f8fa 	bl	8004190 <USB_FlushTxFifo>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f924 	bl	80041f4 <USB_FlushRxFifo>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2300      	movs	r3, #0
 8003fcc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fda:	2300      	movs	r3, #0
 8003fdc:	613b      	str	r3, [r7, #16]
 8003fde:	e043      	b.n	8004068 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ff6:	d118      	bne.n	800402a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800400a:	461a      	mov	r2, r3
 800400c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e013      	b.n	800403c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	015a      	lsls	r2, r3, #5
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	4413      	add	r3, r2
 800401c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004020:	461a      	mov	r2, r3
 8004022:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	e008      	b.n	800403c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004036:	461a      	mov	r2, r3
 8004038:	2300      	movs	r3, #0
 800403a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004048:	461a      	mov	r2, r3
 800404a:	2300      	movs	r3, #0
 800404c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3301      	adds	r3, #1
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800406c:	461a      	mov	r2, r3
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	4293      	cmp	r3, r2
 8004072:	d3b5      	bcc.n	8003fe0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	e043      	b.n	8004102 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800408c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004090:	d118      	bne.n	80040c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040a4:	461a      	mov	r2, r3
 80040a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	e013      	b.n	80040d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040ba:	461a      	mov	r2, r3
 80040bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80040c0:	6013      	str	r3, [r2, #0]
 80040c2:	e008      	b.n	80040d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d0:	461a      	mov	r2, r3
 80040d2:	2300      	movs	r3, #0
 80040d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	015a      	lsls	r2, r3, #5
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	4413      	add	r3, r2
 80040de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040e2:	461a      	mov	r2, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3301      	adds	r3, #1
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004106:	461a      	mov	r2, r3
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4293      	cmp	r3, r2
 800410c:	d3b5      	bcc.n	800407a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800411c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004120:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800412e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004130:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004134:	2b00      	cmp	r3, #0
 8004136:	d105      	bne.n	8004144 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	699a      	ldr	r2, [r3, #24]
 8004148:	4b10      	ldr	r3, [pc, #64]	@ (800418c <USB_DevInit+0x2c4>)
 800414a:	4313      	orrs	r3, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004150:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	f043 0208 	orr.w	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004164:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004168:	2b01      	cmp	r3, #1
 800416a:	d107      	bne.n	800417c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800417c:	7dfb      	ldrb	r3, [r7, #23]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3718      	adds	r7, #24
 8004182:	46bd      	mov	sp, r7
 8004184:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004188:	b004      	add	sp, #16
 800418a:	4770      	bx	lr
 800418c:	803c3800 	.word	0x803c3800

08004190 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3301      	adds	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041aa:	d901      	bls.n	80041b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e01b      	b.n	80041e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	daf2      	bge.n	800419e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	019b      	lsls	r3, r3, #6
 80041c0:	f043 0220 	orr.w	r2, r3, #32
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041d4:	d901      	bls.n	80041da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e006      	b.n	80041e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d0f0      	beq.n	80041c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800420c:	d901      	bls.n	8004212 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e018      	b.n	8004244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	2b00      	cmp	r3, #0
 8004218:	daf2      	bge.n	8004200 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800421a:	2300      	movs	r3, #0
 800421c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2210      	movs	r2, #16
 8004222:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3301      	adds	r3, #1
 8004228:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004230:	d901      	bls.n	8004236 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e006      	b.n	8004244 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	f003 0310 	and.w	r3, r3, #16
 800423e:	2b10      	cmp	r3, #16
 8004240:	d0f0      	beq.n	8004224 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	78fb      	ldrb	r3, [r7, #3]
 800426a:	68f9      	ldr	r1, [r7, #12]
 800426c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004270:	4313      	orrs	r3, r2
 8004272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004282:	b480      	push	{r7}
 8004284:	b087      	sub	sp, #28
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 0306 	and.w	r3, r3, #6
 800429a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d102      	bne.n	80042a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]
 80042a6:	e00a      	b.n	80042be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d002      	beq.n	80042b4 <USB_GetDevSpeed+0x32>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b06      	cmp	r3, #6
 80042b2:	d102      	bne.n	80042ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80042b4:	2302      	movs	r3, #2
 80042b6:	75fb      	strb	r3, [r7, #23]
 80042b8:	e001      	b.n	80042be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80042ba:	230f      	movs	r3, #15
 80042bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80042be:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d13a      	bne.n	800435e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042ee:	69da      	ldr	r2, [r3, #28]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2101      	movs	r1, #1
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	b29b      	uxth	r3, r3
 8004300:	68f9      	ldr	r1, [r7, #12]
 8004302:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004306:	4313      	orrs	r3, r2
 8004308:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4413      	add	r3, r2
 8004312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d155      	bne.n	80043cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	791b      	ldrb	r3, [r3, #4]
 800433a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800433c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004344:	4313      	orrs	r3, r2
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	0151      	lsls	r1, r2, #5
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	440a      	add	r2, r1
 800434e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004356:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435a:	6013      	str	r3, [r2, #0]
 800435c:	e036      	b.n	80043cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	2101      	movs	r1, #1
 8004370:	fa01 f303 	lsl.w	r3, r1, r3
 8004374:	041b      	lsls	r3, r3, #16
 8004376:	68f9      	ldr	r1, [r7, #12]
 8004378:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800437c:	4313      	orrs	r3, r2
 800437e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d11a      	bne.n	80043cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	015a      	lsls	r2, r3, #5
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4413      	add	r3, r2
 800439e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	791b      	ldrb	r3, [r3, #4]
 80043b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043b2:	430b      	orrs	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	785b      	ldrb	r3, [r3, #1]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d161      	bne.n	80044bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800440a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800440e:	d11f      	bne.n	8004450 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800442a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800442e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800444a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800444e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004456:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f303 	lsl.w	r3, r1, r3
 8004466:	b29b      	uxth	r3, r3
 8004468:	43db      	mvns	r3, r3
 800446a:	68f9      	ldr	r1, [r7, #12]
 800446c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004470:	4013      	ands	r3, r2
 8004472:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f003 030f 	and.w	r3, r3, #15
 8004484:	2101      	movs	r1, #1
 8004486:	fa01 f303 	lsl.w	r3, r1, r3
 800448a:	b29b      	uxth	r3, r3
 800448c:	43db      	mvns	r3, r3
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004494:	4013      	ands	r3, r2
 8004496:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	015a      	lsls	r2, r3, #5
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4413      	add	r3, r2
 80044a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	0159      	lsls	r1, r3, #5
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	440b      	add	r3, r1
 80044ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b2:	4619      	mov	r1, r3
 80044b4:	4b35      	ldr	r3, [pc, #212]	@ (800458c <USB_DeactivateEndpoint+0x1b0>)
 80044b6:	4013      	ands	r3, r2
 80044b8:	600b      	str	r3, [r1, #0]
 80044ba:	e060      	b.n	800457e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044d2:	d11f      	bne.n	8004514 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	0151      	lsls	r1, r2, #5
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	440a      	add	r2, r1
 80044ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80044f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800450e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800451a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	2101      	movs	r1, #1
 8004526:	fa01 f303 	lsl.w	r3, r1, r3
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	43db      	mvns	r3, r3
 800452e:	68f9      	ldr	r1, [r7, #12]
 8004530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004534:	4013      	ands	r3, r2
 8004536:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f003 030f 	and.w	r3, r3, #15
 8004548:	2101      	movs	r1, #1
 800454a:	fa01 f303 	lsl.w	r3, r1, r3
 800454e:	041b      	lsls	r3, r3, #16
 8004550:	43db      	mvns	r3, r3
 8004552:	68f9      	ldr	r1, [r7, #12]
 8004554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004558:	4013      	ands	r3, r2
 800455a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	0159      	lsls	r1, r3, #5
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	440b      	add	r3, r1
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	4619      	mov	r1, r3
 8004578:	4b05      	ldr	r3, [pc, #20]	@ (8004590 <USB_DeactivateEndpoint+0x1b4>)
 800457a:	4013      	ands	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	ec337800 	.word	0xec337800
 8004590:	eff37800 	.word	0xeff37800

08004594 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	@ 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	4613      	mov	r3, r2
 80045a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	785b      	ldrb	r3, [r3, #1]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	f040 817f 	bne.w	80048b4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d132      	bne.n	8004624 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045d8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80045dc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80045e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	0151      	lsls	r1, r2, #5
 80045f4:	69fa      	ldr	r2, [r7, #28]
 80045f6:	440a      	add	r2, r1
 80045f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	0151      	lsls	r1, r2, #5
 8004614:	69fa      	ldr	r2, [r7, #28]
 8004616:	440a      	add	r2, r1
 8004618:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800461c:	0cdb      	lsrs	r3, r3, #19
 800461e:	04db      	lsls	r3, r3, #19
 8004620:	6113      	str	r3, [r2, #16]
 8004622:	e097      	b.n	8004754 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	0151      	lsls	r1, r2, #5
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	440a      	add	r2, r1
 800463a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800463e:	0cdb      	lsrs	r3, r3, #19
 8004640:	04db      	lsls	r3, r3, #19
 8004642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	4413      	add	r3, r2
 800464c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	0151      	lsls	r1, r2, #5
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	440a      	add	r2, r1
 800465a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800465e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004662:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004666:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11a      	bne.n	80046a4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	429a      	cmp	r2, r3
 8004678:	d903      	bls.n	8004682 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	689a      	ldr	r2, [r3, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	015a      	lsls	r2, r3, #5
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	4413      	add	r3, r2
 800468a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	0151      	lsls	r1, r2, #5
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	440a      	add	r2, r1
 8004698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800469c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046a0:	6113      	str	r3, [r2, #16]
 80046a2:	e044      	b.n	800472e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	4413      	add	r3, r2
 80046ae:	1e5a      	subs	r2, r3, #1
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c6:	691a      	ldr	r2, [r3, #16]
 80046c8:	8afb      	ldrh	r3, [r7, #22]
 80046ca:	04d9      	lsls	r1, r3, #19
 80046cc:	4ba4      	ldr	r3, [pc, #656]	@ (8004960 <USB_EPStartXfer+0x3cc>)
 80046ce:	400b      	ands	r3, r1
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	0148      	lsls	r0, r1, #5
 80046d4:	69f9      	ldr	r1, [r7, #28]
 80046d6:	4401      	add	r1, r0
 80046d8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80046dc:	4313      	orrs	r3, r2
 80046de:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	791b      	ldrb	r3, [r3, #4]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d122      	bne.n	800472e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	69fa      	ldr	r2, [r7, #28]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004702:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004706:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	8afb      	ldrh	r3, [r7, #22]
 8004718:	075b      	lsls	r3, r3, #29
 800471a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	0148      	lsls	r0, r1, #5
 8004722:	69f9      	ldr	r1, [r7, #28]
 8004724:	4401      	add	r1, r0
 8004726:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800472a:	4313      	orrs	r3, r2
 800472c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004744:	69b9      	ldr	r1, [r7, #24]
 8004746:	0148      	lsls	r0, r1, #5
 8004748:	69f9      	ldr	r1, [r7, #28]
 800474a:	4401      	add	r1, r0
 800474c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004750:	4313      	orrs	r3, r2
 8004752:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004754:	79fb      	ldrb	r3, [r7, #7]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d14b      	bne.n	80047f2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800476e:	461a      	mov	r2, r3
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	791b      	ldrb	r3, [r3, #4]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d128      	bne.n	80047d0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478a:	2b00      	cmp	r3, #0
 800478c:	d110      	bne.n	80047b0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047ac:	6013      	str	r3, [r2, #0]
 80047ae:	e00f      	b.n	80047d0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047ce:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	0151      	lsls	r1, r2, #5
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	440a      	add	r2, r1
 80047e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	e166      	b.n	8004ac0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	015a      	lsls	r2, r3, #5
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	4413      	add	r3, r2
 80047fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	0151      	lsls	r1, r2, #5
 8004804:	69fa      	ldr	r2, [r7, #28]
 8004806:	440a      	add	r2, r1
 8004808:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800480c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004810:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d015      	beq.n	8004846 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 814e 	beq.w	8004ac0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f003 030f 	and.w	r3, r3, #15
 8004834:	2101      	movs	r1, #1
 8004836:	fa01 f303 	lsl.w	r3, r1, r3
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004840:	4313      	orrs	r3, r2
 8004842:	634b      	str	r3, [r1, #52]	@ 0x34
 8004844:	e13c      	b.n	8004ac0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004852:	2b00      	cmp	r3, #0
 8004854:	d110      	bne.n	8004878 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004870:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e00f      	b.n	8004898 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	015a      	lsls	r2, r3, #5
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	4413      	add	r3, r2
 8004880:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	0151      	lsls	r1, r2, #5
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	440a      	add	r2, r1
 800488e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004896:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	68d9      	ldr	r1, [r3, #12]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	781a      	ldrb	r2, [r3, #0]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	b298      	uxth	r0, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	4603      	mov	r3, r0
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f000 f9b9 	bl	8004c24 <USB_WritePacket>
 80048b2:	e105      	b.n	8004ac0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ce:	0cdb      	lsrs	r3, r3, #19
 80048d0:	04db      	lsls	r3, r3, #19
 80048d2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	0151      	lsls	r1, r2, #5
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	440a      	add	r2, r1
 80048ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048ee:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80048f2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80048f6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d132      	bne.n	8004964 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	689a      	ldr	r2, [r3, #8]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	0148      	lsls	r0, r1, #5
 8004930:	69f9      	ldr	r1, [r7, #28]
 8004932:	4401      	add	r1, r0
 8004934:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004938:	4313      	orrs	r3, r2
 800493a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004956:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800495a:	6113      	str	r3, [r2, #16]
 800495c:	e062      	b.n	8004a24 <USB_EPStartXfer+0x490>
 800495e:	bf00      	nop
 8004960:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d123      	bne.n	80049b4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004982:	69b9      	ldr	r1, [r7, #24]
 8004984:	0148      	lsls	r0, r1, #5
 8004986:	69f9      	ldr	r1, [r7, #28]
 8004988:	4401      	add	r1, r0
 800498a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800498e:	4313      	orrs	r3, r2
 8004990:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	4413      	add	r3, r2
 800499a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	69fa      	ldr	r2, [r7, #28]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049b0:	6113      	str	r3, [r2, #16]
 80049b2:	e037      	b.n	8004a24 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	4413      	add	r3, r2
 80049be:	1e5a      	subs	r2, r3, #1
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	8afa      	ldrh	r2, [r7, #22]
 80049d0:	fb03 f202 	mul.w	r2, r3, r2
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e4:	691a      	ldr	r2, [r3, #16]
 80049e6:	8afb      	ldrh	r3, [r7, #22]
 80049e8:	04d9      	lsls	r1, r3, #19
 80049ea:	4b38      	ldr	r3, [pc, #224]	@ (8004acc <USB_EPStartXfer+0x538>)
 80049ec:	400b      	ands	r3, r1
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	0148      	lsls	r0, r1, #5
 80049f2:	69f9      	ldr	r1, [r7, #28]
 80049f4:	4401      	add	r1, r0
 80049f6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049fa:	4313      	orrs	r3, r2
 80049fc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0a:	691a      	ldr	r2, [r3, #16]
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	69b9      	ldr	r1, [r7, #24]
 8004a16:	0148      	lsls	r0, r1, #5
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	4401      	add	r1, r0
 8004a1c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a20:	4313      	orrs	r3, r2
 8004a22:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d10d      	bne.n	8004a46 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d009      	beq.n	8004a46 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68d9      	ldr	r1, [r3, #12]
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a42:	460a      	mov	r2, r1
 8004a44:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	791b      	ldrb	r3, [r3, #4]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d128      	bne.n	8004aa0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d110      	bne.n	8004a80 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00f      	b.n	8004aa0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	69fa      	ldr	r2, [r7, #28]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a9e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69ba      	ldr	r2, [r7, #24]
 8004ab0:	0151      	lsls	r1, r2, #5
 8004ab2:	69fa      	ldr	r2, [r7, #28]
 8004ab4:	440a      	add	r2, r1
 8004ab6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aba:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004abe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	1ff80000 	.word	0x1ff80000

08004ad0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b087      	sub	sp, #28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d14a      	bne.n	8004b84 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b06:	f040 8086 	bne.w	8004c16 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	7812      	ldrb	r2, [r2, #0]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b28:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b2c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	015a      	lsls	r2, r3, #5
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	4413      	add	r3, r2
 8004b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	7812      	ldrb	r2, [r2, #0]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b4c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004b50:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d902      	bls.n	8004b68 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	75fb      	strb	r3, [r7, #23]
          break;
 8004b66:	e056      	b.n	8004c16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b80:	d0e7      	beq.n	8004b52 <USB_EPStopXfer+0x82>
 8004b82:	e048      	b.n	8004c16 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b9c:	d13b      	bne.n	8004c16 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	7812      	ldrb	r2, [r2, #0]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004bbc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004bc0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	7812      	ldrb	r2, [r2, #0]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004be0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004be4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3301      	adds	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d902      	bls.n	8004bfc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bfa:	e00c      	b.n	8004c16 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c14:	d0e7      	beq.n	8004be6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	371c      	adds	r7, #28
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b089      	sub	sp, #36	@ 0x24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	4611      	mov	r1, r2
 8004c30:	461a      	mov	r2, r3
 8004c32:	460b      	mov	r3, r1
 8004c34:	71fb      	strb	r3, [r7, #7]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d123      	bne.n	8004c92 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c4a:	88bb      	ldrh	r3, [r7, #4]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
 8004c56:	e018      	b.n	8004c8a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	031a      	lsls	r2, r3, #12
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	4413      	add	r3, r2
 8004c60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c64:	461a      	mov	r2, r3
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	3301      	adds	r3, #1
 8004c76:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	3301      	adds	r3, #1
 8004c82:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	3301      	adds	r3, #1
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3e2      	bcc.n	8004c58 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3724      	adds	r7, #36	@ 0x24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b08b      	sub	sp, #44	@ 0x2c
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	4613      	mov	r3, r2
 8004cac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	089b      	lsrs	r3, r3, #2
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
 8004cca:	e014      	b.n	8004cf6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cda:	3301      	adds	r3, #1
 8004cdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	3301      	adds	r3, #1
 8004cee:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	6a3a      	ldr	r2, [r7, #32]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3e6      	bcc.n	8004ccc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cfe:	8bfb      	ldrh	r3, [r7, #30]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d01e      	beq.n	8004d42 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f107 0310 	add.w	r3, r7, #16
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	fa22 f303 	lsr.w	r3, r2, r3
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	701a      	strb	r2, [r3, #0]
      i++;
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	3301      	adds	r3, #1
 8004d34:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d36:	8bfb      	ldrh	r3, [r7, #30]
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d3c:	8bfb      	ldrh	r3, [r7, #30]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1ea      	bne.n	8004d18 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	372c      	adds	r7, #44	@ 0x2c
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	785b      	ldrb	r3, [r3, #1]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d12c      	bne.n	8004dc6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	015a      	lsls	r2, r3, #5
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4413      	add	r3, r2
 8004d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	db12      	blt.n	8004da4 <USB_EPSetStall+0x54>
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	0151      	lsls	r1, r2, #5
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	440a      	add	r2, r1
 8004d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	0151      	lsls	r1, r2, #5
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	440a      	add	r2, r1
 8004dba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	e02b      	b.n	8004e1e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	db12      	blt.n	8004dfe <USB_EPSetStall+0xae>
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00f      	beq.n	8004dfe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68ba      	ldr	r2, [r7, #8]
 8004dee:	0151      	lsls	r1, r2, #5
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	440a      	add	r2, r1
 8004df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004df8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004dfc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	0151      	lsls	r1, r2, #5
 8004e10:	68fa      	ldr	r2, [r7, #12]
 8004e12:	440a      	add	r2, r1
 8004e14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	785b      	ldrb	r3, [r3, #1]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d128      	bne.n	8004e9a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68ba      	ldr	r2, [r7, #8]
 8004e58:	0151      	lsls	r1, r2, #5
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	440a      	add	r2, r1
 8004e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e66:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d003      	beq.n	8004e78 <USB_EPClearStall+0x4c>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	791b      	ldrb	r3, [r3, #4]
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d138      	bne.n	8004eea <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e027      	b.n	8004eea <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004eb4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d003      	beq.n	8004eca <USB_EPClearStall+0x9e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d10f      	bne.n	8004eea <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f16:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f1a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f32:	4313      	orrs	r3, r2
 8004f34:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3714      	adds	r7, #20
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	68fa      	ldr	r2, [r7, #12]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f72:	f023 0302 	bic.w	r3, r3, #2
 8004f76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fa0:	f023 0303 	bic.w	r3, r3, #3
 8004fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb4:	f043 0302 	orr.w	r3, r3, #2
 8004fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b085      	sub	sp, #20
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b085      	sub	sp, #20
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	4013      	ands	r3, r2
 8005010:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	0c1b      	lsrs	r3, r3, #16
}
 8005016:	4618      	mov	r0, r3
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005022:	b480      	push	{r7}
 8005024:	b085      	sub	sp, #20
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	b29b      	uxth	r3, r3
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005056:	b480      	push	{r7}
 8005058:	b085      	sub	sp, #20
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	460b      	mov	r3, r1
 8005060:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005066:	78fb      	ldrb	r3, [r7, #3]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4013      	ands	r3, r2
 8005082:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005084:	68bb      	ldr	r3, [r7, #8]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
 800509a:	460b      	mov	r3, r1
 800509c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050b4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	01db      	lsls	r3, r3, #7
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050e0:	68bb      	ldr	r3, [r7, #8]
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	f003 0301 	and.w	r3, r3, #1
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005124:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005128:	f023 0307 	bic.w	r3, r3, #7
 800512c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800513c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005140:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005142:	2300      	movs	r3, #0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3714      	adds	r7, #20
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	460b      	mov	r3, r1
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	333c      	adds	r3, #60	@ 0x3c
 8005166:	3304      	adds	r3, #4
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <USB_EP0_OutStart+0xb8>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d90a      	bls.n	800518a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005180:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005184:	d101      	bne.n	800518a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e037      	b.n	80051fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	2300      	movs	r3, #0
 8005194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051b8:	f043 0318 	orr.w	r3, r3, #24
 80051bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051cc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80051d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80051d2:	7afb      	ldrb	r3, [r7, #11]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10f      	bne.n	80051f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051de:	461a      	mov	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80051f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	371c      	adds	r7, #28
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	4f54300a 	.word	0x4f54300a

0800520c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	3301      	adds	r3, #1
 800521c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005224:	d901      	bls.n	800522a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e01b      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	daf2      	bge.n	8005218 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f043 0201 	orr.w	r2, r3, #1
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	3301      	adds	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800524e:	d901      	bls.n	8005254 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e006      	b.n	8005262 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d0f0      	beq.n	8005242 <USB_CoreReset+0x36>

  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800527c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005280:	f002 fcaa 	bl	8007bd8 <USBD_static_malloc>
 8005284:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d109      	bne.n	80052a0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	32b0      	adds	r2, #176	@ 0xb0
 8005296:	2100      	movs	r1, #0
 8005298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800529c:	2302      	movs	r3, #2
 800529e:	e0d4      	b.n	800544a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80052a0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80052a4:	2100      	movs	r1, #0
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f002 fcfa 	bl	8007ca0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	32b0      	adds	r2, #176	@ 0xb0
 80052b6:	68f9      	ldr	r1, [r7, #12]
 80052b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	32b0      	adds	r2, #176	@ 0xb0
 80052c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7c1b      	ldrb	r3, [r3, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d138      	bne.n	800534a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80052d8:	4b5e      	ldr	r3, [pc, #376]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 80052da:	7819      	ldrb	r1, [r3, #0]
 80052dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052e0:	2202      	movs	r2, #2
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f002 fb55 	bl	8007992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	f003 020f 	and.w	r2, r3, #15
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	3324      	adds	r3, #36	@ 0x24
 80052fe:	2201      	movs	r2, #1
 8005300:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005302:	4b55      	ldr	r3, [pc, #340]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005304:	7819      	ldrb	r1, [r3, #0]
 8005306:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800530a:	2202      	movs	r2, #2
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f002 fb40 	bl	8007992 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005312:	4b51      	ldr	r3, [pc, #324]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	f003 020f 	and.w	r2, r3, #15
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800532a:	2201      	movs	r2, #1
 800532c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800532e:	4b4b      	ldr	r3, [pc, #300]	@ (800545c <USBD_CDC_Init+0x1ec>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f003 020f 	and.w	r2, r3, #15
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	3326      	adds	r3, #38	@ 0x26
 8005344:	2210      	movs	r2, #16
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e035      	b.n	80053b6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800534a:	4b42      	ldr	r3, [pc, #264]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 800534c:	7819      	ldrb	r1, [r3, #0]
 800534e:	2340      	movs	r3, #64	@ 0x40
 8005350:	2202      	movs	r2, #2
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f002 fb1d 	bl	8007992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005358:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <USBD_CDC_Init+0x1e4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f003 020f 	and.w	r2, r3, #15
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	3324      	adds	r3, #36	@ 0x24
 800536e:	2201      	movs	r2, #1
 8005370:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005372:	4b39      	ldr	r3, [pc, #228]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005374:	7819      	ldrb	r1, [r3, #0]
 8005376:	2340      	movs	r3, #64	@ 0x40
 8005378:	2202      	movs	r2, #2
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f002 fb09 	bl	8007992 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005380:	4b35      	ldr	r3, [pc, #212]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005398:	2201      	movs	r2, #1
 800539a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800539c:	4b2f      	ldr	r3, [pc, #188]	@ (800545c <USBD_CDC_Init+0x1ec>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	f003 020f 	and.w	r2, r3, #15
 80053a4:	6879      	ldr	r1, [r7, #4]
 80053a6:	4613      	mov	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	4413      	add	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	440b      	add	r3, r1
 80053b0:	3326      	adds	r3, #38	@ 0x26
 80053b2:	2210      	movs	r2, #16
 80053b4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053b6:	4b29      	ldr	r3, [pc, #164]	@ (800545c <USBD_CDC_Init+0x1ec>)
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	2308      	movs	r3, #8
 80053bc:	2203      	movs	r2, #3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f002 fae7 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80053c4:	4b25      	ldr	r3, [pc, #148]	@ (800545c <USBD_CDC_Init+0x1ec>)
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	3324      	adds	r3, #36	@ 0x24
 80053da:	2201      	movs	r2, #1
 80053dc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	33b0      	adds	r3, #176	@ 0xb0
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005414:	2302      	movs	r3, #2
 8005416:	e018      	b.n	800544a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	7c1b      	ldrb	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005420:	4b0d      	ldr	r3, [pc, #52]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005422:	7819      	ldrb	r1, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800542a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f002 fb9e 	bl	8007b70 <USBD_LL_PrepareReceive>
 8005434:	e008      	b.n	8005448 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005436:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <USBD_CDC_Init+0x1e8>)
 8005438:	7819      	ldrb	r1, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005440:	2340      	movs	r3, #64	@ 0x40
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f002 fb94 	bl	8007b70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000009b 	.word	0x2000009b
 8005458:	2000009c 	.word	0x2000009c
 800545c:	2000009d 	.word	0x2000009d

08005460 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800546c:	4b3a      	ldr	r3, [pc, #232]	@ (8005558 <USBD_CDC_DeInit+0xf8>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f002 fab3 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005478:	4b37      	ldr	r3, [pc, #220]	@ (8005558 <USBD_CDC_DeInit+0xf8>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	f003 020f 	and.w	r2, r3, #15
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	3324      	adds	r3, #36	@ 0x24
 800548e:	2200      	movs	r2, #0
 8005490:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005492:	4b32      	ldr	r3, [pc, #200]	@ (800555c <USBD_CDC_DeInit+0xfc>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f002 faa0 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800549e:	4b2f      	ldr	r3, [pc, #188]	@ (800555c <USBD_CDC_DeInit+0xfc>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80054b6:	2200      	movs	r2, #0
 80054b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80054ba:	4b29      	ldr	r3, [pc, #164]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	4619      	mov	r1, r3
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f002 fa8c 	bl	80079de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80054c6:	4b26      	ldr	r3, [pc, #152]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f003 020f 	and.w	r2, r3, #15
 80054ce:	6879      	ldr	r1, [r7, #4]
 80054d0:	4613      	mov	r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	440b      	add	r3, r1
 80054da:	3324      	adds	r3, #36	@ 0x24
 80054dc:	2200      	movs	r2, #0
 80054de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005560 <USBD_CDC_DeInit+0x100>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	f003 020f 	and.w	r2, r3, #15
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	3326      	adds	r3, #38	@ 0x26
 80054f6:	2200      	movs	r2, #0
 80054f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32b0      	adds	r2, #176	@ 0xb0
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01f      	beq.n	800554c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	33b0      	adds	r3, #176	@ 0xb0
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	32b0      	adds	r2, #176	@ 0xb0
 800552a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552e:	4618      	mov	r0, r3
 8005530:	f002 fb60 	bl	8007bf4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	32b0      	adds	r2, #176	@ 0xb0
 800553e:	2100      	movs	r1, #0
 8005540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	2000009b 	.word	0x2000009b
 800555c:	2000009c 	.word	0x2000009c
 8005560:	2000009d 	.word	0x2000009d

08005564 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	32b0      	adds	r2, #176	@ 0xb0
 8005578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005590:	2303      	movs	r3, #3
 8005592:	e0bf      	b.n	8005714 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800559c:	2b00      	cmp	r3, #0
 800559e:	d050      	beq.n	8005642 <USBD_CDC_Setup+0xde>
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	f040 80af 	bne.w	8005704 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	88db      	ldrh	r3, [r3, #6]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03a      	beq.n	8005624 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	b25b      	sxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da1b      	bge.n	80055f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	33b0      	adds	r3, #176	@ 0xb0
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	4413      	add	r3, r2
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80055ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055d0:	683a      	ldr	r2, [r7, #0]
 80055d2:	88d2      	ldrh	r2, [r2, #6]
 80055d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	88db      	ldrh	r3, [r3, #6]
 80055da:	2b07      	cmp	r3, #7
 80055dc:	bf28      	it	cs
 80055de:	2307      	movcs	r3, #7
 80055e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	89fa      	ldrh	r2, [r7, #14]
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f001 fd93 	bl	8007114 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055ee:	e090      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	785a      	ldrb	r2, [r3, #1]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	88db      	ldrh	r3, [r3, #6]
 80055fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8005600:	d803      	bhi.n	800560a <USBD_CDC_Setup+0xa6>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	88db      	ldrh	r3, [r3, #6]
 8005606:	b2da      	uxtb	r2, r3
 8005608:	e000      	b.n	800560c <USBD_CDC_Setup+0xa8>
 800560a:	2240      	movs	r2, #64	@ 0x40
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005612:	6939      	ldr	r1, [r7, #16]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800561a:	461a      	mov	r2, r3
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f001 fda5 	bl	800716c <USBD_CtlPrepareRx>
      break;
 8005622:	e076      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	33b0      	adds	r3, #176	@ 0xb0
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	7850      	ldrb	r0, [r2, #1]
 800563a:	2200      	movs	r2, #0
 800563c:	6839      	ldr	r1, [r7, #0]
 800563e:	4798      	blx	r3
      break;
 8005640:	e067      	b.n	8005712 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	785b      	ldrb	r3, [r3, #1]
 8005646:	2b0b      	cmp	r3, #11
 8005648:	d851      	bhi.n	80056ee <USBD_CDC_Setup+0x18a>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <USBD_CDC_Setup+0xec>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005681 	.word	0x08005681
 8005654:	080056fd 	.word	0x080056fd
 8005658:	080056ef 	.word	0x080056ef
 800565c:	080056ef 	.word	0x080056ef
 8005660:	080056ef 	.word	0x080056ef
 8005664:	080056ef 	.word	0x080056ef
 8005668:	080056ef 	.word	0x080056ef
 800566c:	080056ef 	.word	0x080056ef
 8005670:	080056ef 	.word	0x080056ef
 8005674:	080056ef 	.word	0x080056ef
 8005678:	080056ab 	.word	0x080056ab
 800567c:	080056d5 	.word	0x080056d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b03      	cmp	r3, #3
 800568a:	d107      	bne.n	800569c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800568c:	f107 030a 	add.w	r3, r7, #10
 8005690:	2202      	movs	r2, #2
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f001 fd3d 	bl	8007114 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800569a:	e032      	b.n	8005702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f001 fcbb 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 80056a4:	2303      	movs	r3, #3
 80056a6:	75fb      	strb	r3, [r7, #23]
          break;
 80056a8:	e02b      	b.n	8005702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b03      	cmp	r3, #3
 80056b4:	d107      	bne.n	80056c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80056b6:	f107 030d 	add.w	r3, r7, #13
 80056ba:	2201      	movs	r2, #1
 80056bc:	4619      	mov	r1, r3
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f001 fd28 	bl	8007114 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80056c4:	e01d      	b.n	8005702 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fca6 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 80056ce:	2303      	movs	r3, #3
 80056d0:	75fb      	strb	r3, [r7, #23]
          break;
 80056d2:	e016      	b.n	8005702 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b03      	cmp	r3, #3
 80056de:	d00f      	beq.n	8005700 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056e0:	6839      	ldr	r1, [r7, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fc99 	bl	800701a <USBD_CtlError>
            ret = USBD_FAIL;
 80056e8:	2303      	movs	r3, #3
 80056ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056ec:	e008      	b.n	8005700 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056ee:	6839      	ldr	r1, [r7, #0]
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f001 fc92 	bl	800701a <USBD_CtlError>
          ret = USBD_FAIL;
 80056f6:	2303      	movs	r3, #3
 80056f8:	75fb      	strb	r3, [r7, #23]
          break;
 80056fa:	e002      	b.n	8005702 <USBD_CDC_Setup+0x19e>
          break;
 80056fc:	bf00      	nop
 80056fe:	e008      	b.n	8005712 <USBD_CDC_Setup+0x1ae>
          break;
 8005700:	bf00      	nop
      }
      break;
 8005702:	e006      	b.n	8005712 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f001 fc87 	bl	800701a <USBD_CtlError>
      ret = USBD_FAIL;
 800570c:	2303      	movs	r3, #3
 800570e:	75fb      	strb	r3, [r7, #23]
      break;
 8005710:	bf00      	nop
  }

  return (uint8_t)ret;
 8005712:	7dfb      	ldrb	r3, [r7, #23]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800572e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	32b0      	adds	r2, #176	@ 0xb0
 800573a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005742:	2303      	movs	r3, #3
 8005744:	e065      	b.n	8005812 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32b0      	adds	r2, #176	@ 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	3318      	adds	r3, #24
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02f      	beq.n	80057d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	440b      	add	r3, r1
 8005782:	3318      	adds	r3, #24
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	f003 010f 	and.w	r1, r3, #15
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	460b      	mov	r3, r1
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	440b      	add	r3, r1
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4403      	add	r3, r0
 8005798:	331c      	adds	r3, #28
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	fbb2 f1f3 	udiv	r1, r2, r3
 80057a0:	fb01 f303 	mul.w	r3, r1, r3
 80057a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d112      	bne.n	80057d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 020f 	and.w	r2, r3, #15
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	4613      	mov	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	440b      	add	r3, r1
 80057bc:	3318      	adds	r3, #24
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80057c2:	78f9      	ldrb	r1, [r7, #3]
 80057c4:	2300      	movs	r3, #0
 80057c6:	2200      	movs	r2, #0
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f002 f9b0 	bl	8007b2e <USBD_LL_Transmit>
 80057ce:	e01f      	b.n	8005810 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	33b0      	adds	r3, #176	@ 0xb0
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d010      	beq.n	8005810 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	33b0      	adds	r3, #176	@ 0xb0
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800580c:	78fa      	ldrb	r2, [r7, #3]
 800580e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	460b      	mov	r3, r1
 8005824:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	32b0      	adds	r2, #176	@ 0xb0
 8005830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005834:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	32b0      	adds	r2, #176	@ 0xb0
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d101      	bne.n	800584c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005848:	2303      	movs	r3, #3
 800584a:	e01a      	b.n	8005882 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f002 f9ae 	bl	8007bb2 <USBD_LL_GetRxDataSize>
 8005856:	4602      	mov	r2, r0
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	33b0      	adds	r3, #176	@ 0xb0
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800587c:	4611      	mov	r1, r2
 800587e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b084      	sub	sp, #16
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	32b0      	adds	r2, #176	@ 0xb0
 800589c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e024      	b.n	80058f6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	33b0      	adds	r3, #176	@ 0xb0
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d019      	beq.n	80058f4 <USBD_CDC_EP0_RxReady+0x6a>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80058c6:	2bff      	cmp	r3, #255	@ 0xff
 80058c8:	d014      	beq.n	80058f4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	33b0      	adds	r3, #176	@ 0xb0
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80058e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	22ff      	movs	r2, #255	@ 0xff
 80058f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005908:	2182      	movs	r1, #130	@ 0x82
 800590a:	4818      	ldr	r0, [pc, #96]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800590c:	f000 fd4f 	bl	80063ae <USBD_GetEpDesc>
 8005910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005912:	2101      	movs	r1, #1
 8005914:	4815      	ldr	r0, [pc, #84]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005916:	f000 fd4a 	bl	80063ae <USBD_GetEpDesc>
 800591a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800591c:	2181      	movs	r1, #129	@ 0x81
 800591e:	4813      	ldr	r0, [pc, #76]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005920:	f000 fd45 	bl	80063ae <USBD_GetEpDesc>
 8005924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	2210      	movs	r2, #16
 8005930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d006      	beq.n	8005946 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	2200      	movs	r2, #0
 800593c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005940:	711a      	strb	r2, [r3, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005954:	711a      	strb	r2, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2243      	movs	r2, #67	@ 0x43
 800595e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005960:	4b02      	ldr	r3, [pc, #8]	@ (800596c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000058 	.word	0x20000058

08005970 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005978:	2182      	movs	r1, #130	@ 0x82
 800597a:	4818      	ldr	r0, [pc, #96]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800597c:	f000 fd17 	bl	80063ae <USBD_GetEpDesc>
 8005980:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005982:	2101      	movs	r1, #1
 8005984:	4815      	ldr	r0, [pc, #84]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005986:	f000 fd12 	bl	80063ae <USBD_GetEpDesc>
 800598a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800598c:	2181      	movs	r1, #129	@ 0x81
 800598e:	4813      	ldr	r0, [pc, #76]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005990:	f000 fd0d 	bl	80063ae <USBD_GetEpDesc>
 8005994:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	2210      	movs	r2, #16
 80059a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2200      	movs	r2, #0
 80059ac:	711a      	strb	r2, [r3, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f042 0202 	orr.w	r2, r2, #2
 80059b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	711a      	strb	r2, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f042 0202 	orr.w	r2, r2, #2
 80059c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2243      	movs	r2, #67	@ 0x43
 80059ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80059d0:	4b02      	ldr	r3, [pc, #8]	@ (80059dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3718      	adds	r7, #24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000058 	.word	0x20000058

080059e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059e8:	2182      	movs	r1, #130	@ 0x82
 80059ea:	4818      	ldr	r0, [pc, #96]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ec:	f000 fcdf 	bl	80063ae <USBD_GetEpDesc>
 80059f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059f2:	2101      	movs	r1, #1
 80059f4:	4815      	ldr	r0, [pc, #84]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059f6:	f000 fcda 	bl	80063ae <USBD_GetEpDesc>
 80059fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059fc:	2181      	movs	r1, #129	@ 0x81
 80059fe:	4813      	ldr	r0, [pc, #76]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005a00:	f000 fcd5 	bl	80063ae <USBD_GetEpDesc>
 8005a04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d002      	beq.n	8005a12 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a20:	711a      	strb	r2, [r3, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a34:	711a      	strb	r2, [r3, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2243      	movs	r2, #67	@ 0x43
 8005a3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a40:	4b02      	ldr	r3, [pc, #8]	@ (8005a4c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000058 	.word	0x20000058

08005a50 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	220a      	movs	r2, #10
 8005a5c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a5e:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000014 	.word	0x20000014

08005a70 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e009      	b.n	8005a98 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	33b0      	adds	r3, #176	@ 0xb0
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	370c      	adds	r7, #12
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	32b0      	adds	r2, #176	@ 0xb0
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e008      	b.n	8005adc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	32b0      	adds	r2, #176	@ 0xb0
 8005afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e004      	b.n	8005b16 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	32b0      	adds	r2, #176	@ 0xb0
 8005b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b3a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e025      	b.n	8005b96 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11f      	bne.n	8005b94 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <USBD_CDC_TransmitPacket+0x7c>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 020f 	and.w	r2, r3, #15
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4403      	add	r3, r0
 8005b76:	3318      	adds	r3, #24
 8005b78:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <USBD_CDC_TransmitPacket+0x7c>)
 8005b7c:	7819      	ldrb	r1, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f001 ffcf 	bl	8007b2e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b90:	2300      	movs	r3, #0
 8005b92:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2000009b 	.word	0x2000009b

08005ba4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	32b0      	adds	r2, #176	@ 0xb0
 8005bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	32b0      	adds	r2, #176	@ 0xb0
 8005bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e018      	b.n	8005c04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7c1b      	ldrb	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bda:	4b0c      	ldr	r3, [pc, #48]	@ (8005c0c <USBD_CDC_ReceivePacket+0x68>)
 8005bdc:	7819      	ldrb	r1, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 ffc1 	bl	8007b70 <USBD_LL_PrepareReceive>
 8005bee:	e008      	b.n	8005c02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bf0:	4b06      	ldr	r3, [pc, #24]	@ (8005c0c <USBD_CDC_ReceivePacket+0x68>)
 8005bf2:	7819      	ldrb	r1, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005bfa:	2340      	movs	r3, #64	@ 0x40
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f001 ffb7 	bl	8007b70 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2000009c 	.word	0x2000009c

08005c10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e01f      	b.n	8005c68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d003      	beq.n	8005c4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f001 fe31 	bl	80078c4 <USBD_LL_Init>
 8005c62:	4603      	mov	r3, r0
 8005c64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3718      	adds	r7, #24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e025      	b.n	8005cd4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	32ae      	adds	r2, #174	@ 0xae
 8005c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00f      	beq.n	8005cc4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32ae      	adds	r2, #174	@ 0xae
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb4:	f107 020e 	add.w	r2, r7, #14
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005cd2:	2300      	movs	r3, #0
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}

08005cdc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fe39 	bl	800795c <USBD_LL_Start>
 8005cea:	4603      	mov	r3, r0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3708      	adds	r7, #8
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005cfc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	460b      	mov	r3, r1
 8005d14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d009      	beq.n	8005d38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	78fa      	ldrb	r2, [r7, #3]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	4798      	blx	r3
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b084      	sub	sp, #16
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	78fa      	ldrb	r2, [r7, #3]
 8005d5c:	4611      	mov	r1, r2
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f001 f90c 	bl	8006fa6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d01a      	beq.n	8005de8 <USBD_LL_SetupStage+0x72>
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d822      	bhi.n	8005dfc <USBD_LL_SetupStage+0x86>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d002      	beq.n	8005dc0 <USBD_LL_SetupStage+0x4a>
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d00a      	beq.n	8005dd4 <USBD_LL_SetupStage+0x5e>
 8005dbe:	e01d      	b.n	8005dfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb63 	bl	8006494 <USBD_StdDevReq>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd2:	e020      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fbcb 	bl	8006578 <USBD_StdItfReq>
 8005de2:	4603      	mov	r3, r0
 8005de4:	73fb      	strb	r3, [r7, #15]
      break;
 8005de6:	e016      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fc2d 	bl	8006650 <USBD_StdEPReq>
 8005df6:	4603      	mov	r3, r0
 8005df8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dfa:	e00c      	b.n	8005e16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e02:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	4619      	mov	r1, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fe06 	bl	8007a1c <USBD_LL_StallEP>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
      break;
 8005e14:	bf00      	nop
  }

  return ret;
 8005e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e32:	7afb      	ldrb	r3, [r7, #11]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d16e      	bne.n	8005f16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005e3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	f040 8098 	bne.w	8005f7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d913      	bls.n	8005e80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	1ad2      	subs	r2, r2, r3
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	bf28      	it	cs
 8005e72:	4613      	movcs	r3, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f001 f994 	bl	80071a6 <USBD_CtlContinueRx>
 8005e7e:	e07d      	b.n	8005f7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d014      	beq.n	8005eb8 <USBD_LL_DataOutStage+0x98>
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d81d      	bhi.n	8005ece <USBD_LL_DataOutStage+0xae>
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <USBD_LL_DataOutStage+0x7c>
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d003      	beq.n	8005ea2 <USBD_LL_DataOutStage+0x82>
 8005e9a:	e018      	b.n	8005ece <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005ea0:	e018      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	4619      	mov	r1, r3
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 fa64 	bl	800637a <USBD_CoreFindIF>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	75bb      	strb	r3, [r7, #22]
            break;
 8005eb6:	e00d      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fa66 	bl	8006394 <USBD_CoreFindEP>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	75bb      	strb	r3, [r7, #22]
            break;
 8005ecc:	e002      	b.n	8005ed4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ed2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ed4:	7dbb      	ldrb	r3, [r7, #22]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d119      	bne.n	8005f0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	d113      	bne.n	8005f0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ee6:	7dba      	ldrb	r2, [r7, #22]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	32ae      	adds	r2, #174	@ 0xae
 8005eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ef6:	7dba      	ldrb	r2, [r7, #22]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005efe:	7dba      	ldrb	r2, [r7, #22]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	32ae      	adds	r2, #174	@ 0xae
 8005f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f95a 	bl	80071c8 <USBD_CtlSendStatus>
 8005f14:	e032      	b.n	8005f7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 fa37 	bl	8006394 <USBD_CoreFindEP>
 8005f26:	4603      	mov	r3, r0
 8005f28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f2a:	7dbb      	ldrb	r3, [r7, #22]
 8005f2c:	2bff      	cmp	r3, #255	@ 0xff
 8005f2e:	d025      	beq.n	8005f7c <USBD_LL_DataOutStage+0x15c>
 8005f30:	7dbb      	ldrb	r3, [r7, #22]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d122      	bne.n	8005f7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d117      	bne.n	8005f72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f42:	7dba      	ldrb	r2, [r7, #22]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	32ae      	adds	r2, #174	@ 0xae
 8005f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00f      	beq.n	8005f72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f52:	7dba      	ldrb	r2, [r7, #22]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f5a:	7dba      	ldrb	r2, [r7, #22]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	32ae      	adds	r2, #174	@ 0xae
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	7afa      	ldrb	r2, [r7, #11]
 8005f68:	4611      	mov	r1, r2
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	4798      	blx	r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	e000      	b.n	8005f7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	60f8      	str	r0, [r7, #12]
 8005f8e:	460b      	mov	r3, r1
 8005f90:	607a      	str	r2, [r7, #4]
 8005f92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d16f      	bne.n	800607a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d15a      	bne.n	8006060 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d914      	bls.n	8005fe0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 f8bc 	bl	800714a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f001 fdc9 	bl	8007b70 <USBD_LL_PrepareReceive>
 8005fde:	e03f      	b.n	8006060 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d11c      	bne.n	8006026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d316      	bcc.n	8006026 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006002:	429a      	cmp	r2, r3
 8006004:	d20f      	bcs.n	8006026 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006006:	2200      	movs	r2, #0
 8006008:	2100      	movs	r1, #0
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f001 f89d 	bl	800714a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006018:	2300      	movs	r3, #0
 800601a:	2200      	movs	r2, #0
 800601c:	2100      	movs	r1, #0
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f001 fda6 	bl	8007b70 <USBD_LL_PrepareReceive>
 8006024:	e01c      	b.n	8006060 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b03      	cmp	r3, #3
 8006030:	d10f      	bne.n	8006052 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d009      	beq.n	8006052 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006052:	2180      	movs	r1, #128	@ 0x80
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f001 fce1 	bl	8007a1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f001 f8c7 	bl	80071ee <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03a      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fe42 	bl	8005cf4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006078:	e032      	b.n	80060e0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800607a:	7afb      	ldrb	r3, [r7, #11]
 800607c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006080:	b2db      	uxtb	r3, r3
 8006082:	4619      	mov	r1, r3
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f000 f985 	bl	8006394 <USBD_CoreFindEP>
 800608a:	4603      	mov	r3, r0
 800608c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	2bff      	cmp	r3, #255	@ 0xff
 8006092:	d025      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
 8006094:	7dfb      	ldrb	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d122      	bne.n	80060e0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b03      	cmp	r3, #3
 80060a4:	d11c      	bne.n	80060e0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80060a6:	7dfa      	ldrb	r2, [r7, #23]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	32ae      	adds	r2, #174	@ 0xae
 80060ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80060b6:	7dfa      	ldrb	r2, [r7, #23]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80060be:	7dfa      	ldrb	r2, [r7, #23]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	32ae      	adds	r2, #174	@ 0xae
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	7afa      	ldrb	r2, [r7, #11]
 80060cc:	4611      	mov	r1, r2
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060d6:	7dbb      	ldrb	r3, [r7, #22]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060dc:	7dbb      	ldrb	r3, [r7, #22]
 80060de:	e000      	b.n	80060e2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b084      	sub	sp, #16
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d014      	beq.n	8006150 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	6852      	ldr	r2, [r2, #4]
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	4611      	mov	r1, r2
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006150:	2340      	movs	r3, #64	@ 0x40
 8006152:	2200      	movs	r2, #0
 8006154:	2100      	movs	r1, #0
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f001 fc1b 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2240      	movs	r2, #64	@ 0x40
 8006168:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800616c:	2340      	movs	r3, #64	@ 0x40
 800616e:	2200      	movs	r2, #0
 8006170:	2180      	movs	r1, #128	@ 0x80
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f001 fc0d 	bl	8007992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2240      	movs	r2, #64	@ 0x40
 8006182:	621a      	str	r2, [r3, #32]

  return ret;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	460b      	mov	r3, r1
 8006198:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d006      	beq.n	80061d0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061c8:	b2da      	uxtb	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2204      	movs	r2, #4
 80061d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr

080061e6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061e6:	b480      	push	{r7}
 80061e8:	b083      	sub	sp, #12
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d106      	bne.n	8006208 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b082      	sub	sp, #8
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d110      	bne.n	800624c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b082      	sub	sp, #8
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	32ae      	adds	r2, #174	@ 0xae
 800626c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d101      	bne.n	8006278 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	e01c      	b.n	80062b2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b03      	cmp	r3, #3
 8006282:	d115      	bne.n	80062b0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	32ae      	adds	r2, #174	@ 0xae
 800628e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00b      	beq.n	80062b0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	32ae      	adds	r2, #174	@ 0xae
 80062a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062a6:	6a1b      	ldr	r3, [r3, #32]
 80062a8:	78fa      	ldrb	r2, [r7, #3]
 80062aa:	4611      	mov	r1, r2
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	32ae      	adds	r2, #174	@ 0xae
 80062d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	e01c      	b.n	8006316 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d115      	bne.n	8006314 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	32ae      	adds	r2, #174	@ 0xae
 80062f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	32ae      	adds	r2, #174	@ 0xae
 8006306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	78fa      	ldrb	r2, [r7, #3]
 800630e:	4611      	mov	r1, r2
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6852      	ldr	r2, [r2, #4]
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	4611      	mov	r1, r2
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d001      	beq.n	8006370 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800636c:	2303      	movs	r3, #3
 800636e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006370:	7bfb      	ldrb	r3, [r7, #15]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
 8006382:	460b      	mov	r3, r1
 8006384:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006386:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80063a0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	460b      	mov	r3, r1
 80063b8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80063c2:	2300      	movs	r3, #0
 80063c4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	885b      	ldrh	r3, [r3, #2]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	7812      	ldrb	r2, [r2, #0]
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d91f      	bls.n	8006414 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063da:	e013      	b.n	8006404 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063dc:	f107 030a 	add.w	r3, r7, #10
 80063e0:	4619      	mov	r1, r3
 80063e2:	6978      	ldr	r0, [r7, #20]
 80063e4:	f000 f81b 	bl	800641e <USBD_GetNextDesc>
 80063e8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b05      	cmp	r3, #5
 80063f0:	d108      	bne.n	8006404 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	789b      	ldrb	r3, [r3, #2]
 80063fa:	78fa      	ldrb	r2, [r7, #3]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d008      	beq.n	8006412 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	885b      	ldrh	r3, [r3, #2]
 8006408:	b29a      	uxth	r2, r3
 800640a:	897b      	ldrh	r3, [r7, #10]
 800640c:	429a      	cmp	r2, r3
 800640e:	d8e5      	bhi.n	80063dc <USBD_GetEpDesc+0x2e>
 8006410:	e000      	b.n	8006414 <USBD_GetEpDesc+0x66>
          break;
 8006412:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006414:	693b      	ldr	r3, [r7, #16]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	7812      	ldrb	r2, [r2, #0]
 8006434:	4413      	add	r3, r2
 8006436:	b29a      	uxth	r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006448:	68fb      	ldr	r3, [r7, #12]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr

08006456 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006456:	b480      	push	{r7}
 8006458:	b087      	sub	sp, #28
 800645a:	af00      	add	r7, sp, #0
 800645c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	3301      	adds	r3, #1
 800646c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006474:	8a3b      	ldrh	r3, [r7, #16]
 8006476:	021b      	lsls	r3, r3, #8
 8006478:	b21a      	sxth	r2, r3
 800647a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800647e:	4313      	orrs	r3, r2
 8006480:	b21b      	sxth	r3, r3
 8006482:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006484:	89fb      	ldrh	r3, [r7, #14]
}
 8006486:	4618      	mov	r0, r3
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
	...

08006494 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	d005      	beq.n	80064ba <USBD_StdDevReq+0x26>
 80064ae:	2b40      	cmp	r3, #64	@ 0x40
 80064b0:	d857      	bhi.n	8006562 <USBD_StdDevReq+0xce>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00f      	beq.n	80064d6 <USBD_StdDevReq+0x42>
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d153      	bne.n	8006562 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	32ae      	adds	r2, #174	@ 0xae
 80064c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	6839      	ldr	r1, [r7, #0]
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	4798      	blx	r3
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
      break;
 80064d4:	e04a      	b.n	800656c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	2b09      	cmp	r3, #9
 80064dc:	d83b      	bhi.n	8006556 <USBD_StdDevReq+0xc2>
 80064de:	a201      	add	r2, pc, #4	@ (adr r2, 80064e4 <USBD_StdDevReq+0x50>)
 80064e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064e4:	08006539 	.word	0x08006539
 80064e8:	0800654d 	.word	0x0800654d
 80064ec:	08006557 	.word	0x08006557
 80064f0:	08006543 	.word	0x08006543
 80064f4:	08006557 	.word	0x08006557
 80064f8:	08006517 	.word	0x08006517
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006557 	.word	0x08006557
 8006504:	0800652f 	.word	0x0800652f
 8006508:	08006521 	.word	0x08006521
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800650c:	6839      	ldr	r1, [r7, #0]
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa3c 	bl	800698c <USBD_GetDescriptor>
          break;
 8006514:	e024      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fba1 	bl	8006c60 <USBD_SetAddress>
          break;
 800651e:	e01f      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006520:	6839      	ldr	r1, [r7, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fbe0 	bl	8006ce8 <USBD_SetConfig>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]
          break;
 800652c:	e018      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800652e:	6839      	ldr	r1, [r7, #0]
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fc83 	bl	8006e3c <USBD_GetConfig>
          break;
 8006536:	e013      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006538:	6839      	ldr	r1, [r7, #0]
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 fcb4 	bl	8006ea8 <USBD_GetStatus>
          break;
 8006540:	e00e      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fce3 	bl	8006f10 <USBD_SetFeature>
          break;
 800654a:	e009      	b.n	8006560 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fd07 	bl	8006f62 <USBD_ClrFeature>
          break;
 8006554:	e004      	b.n	8006560 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006556:	6839      	ldr	r1, [r7, #0]
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fd5e 	bl	800701a <USBD_CtlError>
          break;
 800655e:	bf00      	nop
      }
      break;
 8006560:	e004      	b.n	800656c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006562:	6839      	ldr	r1, [r7, #0]
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 fd58 	bl	800701a <USBD_CtlError>
      break;
 800656a:	bf00      	nop
  }

  return ret;
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop

08006578 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800658e:	2b40      	cmp	r3, #64	@ 0x40
 8006590:	d005      	beq.n	800659e <USBD_StdItfReq+0x26>
 8006592:	2b40      	cmp	r3, #64	@ 0x40
 8006594:	d852      	bhi.n	800663c <USBD_StdItfReq+0xc4>
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <USBD_StdItfReq+0x26>
 800659a:	2b20      	cmp	r3, #32
 800659c:	d14e      	bne.n	800663c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d840      	bhi.n	800662e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	889b      	ldrh	r3, [r3, #4]
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d836      	bhi.n	8006624 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	889b      	ldrh	r3, [r3, #4]
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fedb 	bl	800637a <USBD_CoreFindIF>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	2bff      	cmp	r3, #255	@ 0xff
 80065cc:	d01d      	beq.n	800660a <USBD_StdItfReq+0x92>
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11a      	bne.n	800660a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80065d4:	7bba      	ldrb	r2, [r7, #14]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	32ae      	adds	r2, #174	@ 0xae
 80065da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00f      	beq.n	8006604 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065e4:	7bba      	ldrb	r2, [r7, #14]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065ec:	7bba      	ldrb	r2, [r7, #14]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	32ae      	adds	r2, #174	@ 0xae
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006602:	e004      	b.n	800660e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006604:	2303      	movs	r3, #3
 8006606:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006608:	e001      	b.n	800660e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800660a:	2303      	movs	r3, #3
 800660c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	88db      	ldrh	r3, [r3, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d110      	bne.n	8006638 <USBD_StdItfReq+0xc0>
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 fdd3 	bl	80071c8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006622:	e009      	b.n	8006638 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006624:	6839      	ldr	r1, [r7, #0]
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fcf7 	bl	800701a <USBD_CtlError>
          break;
 800662c:	e004      	b.n	8006638 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800662e:	6839      	ldr	r1, [r7, #0]
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fcf2 	bl	800701a <USBD_CtlError>
          break;
 8006636:	e000      	b.n	800663a <USBD_StdItfReq+0xc2>
          break;
 8006638:	bf00      	nop
      }
      break;
 800663a:	e004      	b.n	8006646 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fceb 	bl	800701a <USBD_CtlError>
      break;
 8006644:	bf00      	nop
  }

  return ret;
 8006646:	7bfb      	ldrb	r3, [r7, #15]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	889b      	ldrh	r3, [r3, #4]
 8006662:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800666c:	2b40      	cmp	r3, #64	@ 0x40
 800666e:	d007      	beq.n	8006680 <USBD_StdEPReq+0x30>
 8006670:	2b40      	cmp	r3, #64	@ 0x40
 8006672:	f200 817f 	bhi.w	8006974 <USBD_StdEPReq+0x324>
 8006676:	2b00      	cmp	r3, #0
 8006678:	d02a      	beq.n	80066d0 <USBD_StdEPReq+0x80>
 800667a:	2b20      	cmp	r3, #32
 800667c:	f040 817a 	bne.w	8006974 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006680:	7bbb      	ldrb	r3, [r7, #14]
 8006682:	4619      	mov	r1, r3
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7ff fe85 	bl	8006394 <USBD_CoreFindEP>
 800668a:	4603      	mov	r3, r0
 800668c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800668e:	7b7b      	ldrb	r3, [r7, #13]
 8006690:	2bff      	cmp	r3, #255	@ 0xff
 8006692:	f000 8174 	beq.w	800697e <USBD_StdEPReq+0x32e>
 8006696:	7b7b      	ldrb	r3, [r7, #13]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f040 8170 	bne.w	800697e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800669e:	7b7a      	ldrb	r2, [r7, #13]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80066a6:	7b7a      	ldrb	r2, [r7, #13]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	32ae      	adds	r2, #174	@ 0xae
 80066ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8163 	beq.w	800697e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80066b8:	7b7a      	ldrb	r2, [r7, #13]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	32ae      	adds	r2, #174	@ 0xae
 80066be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	6839      	ldr	r1, [r7, #0]
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	4798      	blx	r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066ce:	e156      	b.n	800697e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d008      	beq.n	80066ea <USBD_StdEPReq+0x9a>
 80066d8:	2b03      	cmp	r3, #3
 80066da:	f300 8145 	bgt.w	8006968 <USBD_StdEPReq+0x318>
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 809b 	beq.w	800681a <USBD_StdEPReq+0x1ca>
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d03c      	beq.n	8006762 <USBD_StdEPReq+0x112>
 80066e8:	e13e      	b.n	8006968 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d002      	beq.n	80066fc <USBD_StdEPReq+0xac>
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d016      	beq.n	8006728 <USBD_StdEPReq+0xd8>
 80066fa:	e02c      	b.n	8006756 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00d      	beq.n	800671e <USBD_StdEPReq+0xce>
 8006702:	7bbb      	ldrb	r3, [r7, #14]
 8006704:	2b80      	cmp	r3, #128	@ 0x80
 8006706:	d00a      	beq.n	800671e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006708:	7bbb      	ldrb	r3, [r7, #14]
 800670a:	4619      	mov	r1, r3
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 f985 	bl	8007a1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006712:	2180      	movs	r1, #128	@ 0x80
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 f981 	bl	8007a1c <USBD_LL_StallEP>
 800671a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800671c:	e020      	b.n	8006760 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc7a 	bl	800701a <USBD_CtlError>
              break;
 8006726:	e01b      	b.n	8006760 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	885b      	ldrh	r3, [r3, #2]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10e      	bne.n	800674e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00b      	beq.n	800674e <USBD_StdEPReq+0xfe>
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d008      	beq.n	800674e <USBD_StdEPReq+0xfe>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	88db      	ldrh	r3, [r3, #6]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d104      	bne.n	800674e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f001 f967 	bl	8007a1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 fd3a 	bl	80071c8 <USBD_CtlSendStatus>

              break;
 8006754:	e004      	b.n	8006760 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fc5e 	bl	800701a <USBD_CtlError>
              break;
 800675e:	bf00      	nop
          }
          break;
 8006760:	e107      	b.n	8006972 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d002      	beq.n	8006774 <USBD_StdEPReq+0x124>
 800676e:	2b03      	cmp	r3, #3
 8006770:	d016      	beq.n	80067a0 <USBD_StdEPReq+0x150>
 8006772:	e04b      	b.n	800680c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006774:	7bbb      	ldrb	r3, [r7, #14]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00d      	beq.n	8006796 <USBD_StdEPReq+0x146>
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	2b80      	cmp	r3, #128	@ 0x80
 800677e:	d00a      	beq.n	8006796 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006780:	7bbb      	ldrb	r3, [r7, #14]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f949 	bl	8007a1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800678a:	2180      	movs	r1, #128	@ 0x80
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f001 f945 	bl	8007a1c <USBD_LL_StallEP>
 8006792:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006794:	e040      	b.n	8006818 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 fc3e 	bl	800701a <USBD_CtlError>
              break;
 800679e:	e03b      	b.n	8006818 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	885b      	ldrh	r3, [r3, #2]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d136      	bne.n	8006816 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d004      	beq.n	80067bc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80067b2:	7bbb      	ldrb	r3, [r7, #14]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 f94f 	bl	8007a5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fd03 	bl	80071c8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80067c2:	7bbb      	ldrb	r3, [r7, #14]
 80067c4:	4619      	mov	r1, r3
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f7ff fde4 	bl	8006394 <USBD_CoreFindEP>
 80067cc:	4603      	mov	r3, r0
 80067ce:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067d0:	7b7b      	ldrb	r3, [r7, #13]
 80067d2:	2bff      	cmp	r3, #255	@ 0xff
 80067d4:	d01f      	beq.n	8006816 <USBD_StdEPReq+0x1c6>
 80067d6:	7b7b      	ldrb	r3, [r7, #13]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d11c      	bne.n	8006816 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067dc:	7b7a      	ldrb	r2, [r7, #13]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067e4:	7b7a      	ldrb	r2, [r7, #13]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	32ae      	adds	r2, #174	@ 0xae
 80067ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067f4:	7b7a      	ldrb	r2, [r7, #13]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	@ 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	4798      	blx	r3
 8006806:	4603      	mov	r3, r0
 8006808:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800680a:	e004      	b.n	8006816 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800680c:	6839      	ldr	r1, [r7, #0]
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fc03 	bl	800701a <USBD_CtlError>
              break;
 8006814:	e000      	b.n	8006818 <USBD_StdEPReq+0x1c8>
              break;
 8006816:	bf00      	nop
          }
          break;
 8006818:	e0ab      	b.n	8006972 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d002      	beq.n	800682c <USBD_StdEPReq+0x1dc>
 8006826:	2b03      	cmp	r3, #3
 8006828:	d032      	beq.n	8006890 <USBD_StdEPReq+0x240>
 800682a:	e097      	b.n	800695c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <USBD_StdEPReq+0x1f2>
 8006832:	7bbb      	ldrb	r3, [r7, #14]
 8006834:	2b80      	cmp	r3, #128	@ 0x80
 8006836:	d004      	beq.n	8006842 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fbed 	bl	800701a <USBD_CtlError>
                break;
 8006840:	e091      	b.n	8006966 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006842:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006846:	2b00      	cmp	r3, #0
 8006848:	da0b      	bge.n	8006862 <USBD_StdEPReq+0x212>
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006850:	4613      	mov	r3, r2
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	3310      	adds	r3, #16
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4413      	add	r3, r2
 800685e:	3304      	adds	r3, #4
 8006860:	e00b      	b.n	800687a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006862:	7bbb      	ldrb	r3, [r7, #14]
 8006864:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4413      	add	r3, r2
 8006878:	3304      	adds	r3, #4
 800687a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2202      	movs	r2, #2
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc43 	bl	8007114 <USBD_CtlSendData>
              break;
 800688e:	e06a      	b.n	8006966 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006890:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006894:	2b00      	cmp	r3, #0
 8006896:	da11      	bge.n	80068bc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	6879      	ldr	r1, [r7, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	440b      	add	r3, r1
 80068aa:	3324      	adds	r3, #36	@ 0x24
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d117      	bne.n	80068e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fbb0 	bl	800701a <USBD_CtlError>
                  break;
 80068ba:	e054      	b.n	8006966 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80068bc:	7bbb      	ldrb	r3, [r7, #14]
 80068be:	f003 020f 	and.w	r2, r3, #15
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	4613      	mov	r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	440b      	add	r3, r1
 80068ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068d2:	881b      	ldrh	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068d8:	6839      	ldr	r1, [r7, #0]
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fb9d 	bl	800701a <USBD_CtlError>
                  break;
 80068e0:	e041      	b.n	8006966 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	da0b      	bge.n	8006902 <USBD_StdEPReq+0x2b2>
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	3310      	adds	r3, #16
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	3304      	adds	r3, #4
 8006900:	e00b      	b.n	800691a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006902:	7bbb      	ldrb	r3, [r7, #14]
 8006904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	4413      	add	r3, r2
 8006918:	3304      	adds	r3, #4
 800691a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <USBD_StdEPReq+0x2d8>
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	2b80      	cmp	r3, #128	@ 0x80
 8006926:	d103      	bne.n	8006930 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	e00e      	b.n	800694e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006930:	7bbb      	ldrb	r3, [r7, #14]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f001 f8af 	bl	8007a98 <USBD_LL_IsStallEP>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d003      	beq.n	8006948 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	2201      	movs	r2, #1
 8006944:	601a      	str	r2, [r3, #0]
 8006946:	e002      	b.n	800694e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	2202      	movs	r2, #2
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fbdd 	bl	8007114 <USBD_CtlSendData>
              break;
 800695a:	e004      	b.n	8006966 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800695c:	6839      	ldr	r1, [r7, #0]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fb5b 	bl	800701a <USBD_CtlError>
              break;
 8006964:	bf00      	nop
          }
          break;
 8006966:	e004      	b.n	8006972 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006968:	6839      	ldr	r1, [r7, #0]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 fb55 	bl	800701a <USBD_CtlError>
          break;
 8006970:	bf00      	nop
      }
      break;
 8006972:	e005      	b.n	8006980 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006974:	6839      	ldr	r1, [r7, #0]
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fb4f 	bl	800701a <USBD_CtlError>
      break;
 800697c:	e000      	b.n	8006980 <USBD_StdEPReq+0x330>
      break;
 800697e:	bf00      	nop
  }

  return ret;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
	...

0800698c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
 8006994:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800699a:	2300      	movs	r3, #0
 800699c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800699e:	2300      	movs	r3, #0
 80069a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	885b      	ldrh	r3, [r3, #2]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	3b01      	subs	r3, #1
 80069ac:	2b06      	cmp	r3, #6
 80069ae:	f200 8128 	bhi.w	8006c02 <USBD_GetDescriptor+0x276>
 80069b2:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <USBD_GetDescriptor+0x2c>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	080069ed 	.word	0x080069ed
 80069c0:	08006a2d 	.word	0x08006a2d
 80069c4:	08006c03 	.word	0x08006c03
 80069c8:	08006c03 	.word	0x08006c03
 80069cc:	08006ba3 	.word	0x08006ba3
 80069d0:	08006bcf 	.word	0x08006bcf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	7c12      	ldrb	r2, [r2, #16]
 80069e0:	f107 0108 	add.w	r1, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
      break;
 80069ea:	e112      	b.n	8006c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	7c1b      	ldrb	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10d      	bne.n	8006a10 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069fc:	f107 0208 	add.w	r2, r7, #8
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006a0e:	e100      	b.n	8006c12 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a18:	f107 0208 	add.w	r2, r7, #8
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4798      	blx	r3
 8006a20:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	3301      	adds	r3, #1
 8006a26:	2202      	movs	r2, #2
 8006a28:	701a      	strb	r2, [r3, #0]
      break;
 8006a2a:	e0f2      	b.n	8006c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	885b      	ldrh	r3, [r3, #2]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b05      	cmp	r3, #5
 8006a34:	f200 80ac 	bhi.w	8006b90 <USBD_GetDescriptor+0x204>
 8006a38:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <USBD_GetDescriptor+0xb4>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006a59 	.word	0x08006a59
 8006a44:	08006a8d 	.word	0x08006a8d
 8006a48:	08006ac1 	.word	0x08006ac1
 8006a4c:	08006af5 	.word	0x08006af5
 8006a50:	08006b29 	.word	0x08006b29
 8006a54:	08006b5d 	.word	0x08006b5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00b      	beq.n	8006a7c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	7c12      	ldrb	r2, [r2, #16]
 8006a70:	f107 0108 	add.w	r1, r7, #8
 8006a74:	4610      	mov	r0, r2
 8006a76:	4798      	blx	r3
 8006a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a7a:	e091      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 facb 	bl	800701a <USBD_CtlError>
            err++;
 8006a84:	7afb      	ldrb	r3, [r7, #11]
 8006a86:	3301      	adds	r3, #1
 8006a88:	72fb      	strb	r3, [r7, #11]
          break;
 8006a8a:	e089      	b.n	8006ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00b      	beq.n	8006ab0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	7c12      	ldrb	r2, [r2, #16]
 8006aa4:	f107 0108 	add.w	r1, r7, #8
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	4798      	blx	r3
 8006aac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aae:	e077      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fab1 	bl	800701a <USBD_CtlError>
            err++;
 8006ab8:	7afb      	ldrb	r3, [r7, #11]
 8006aba:	3301      	adds	r3, #1
 8006abc:	72fb      	strb	r3, [r7, #11]
          break;
 8006abe:	e06f      	b.n	8006ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	7c12      	ldrb	r2, [r2, #16]
 8006ad8:	f107 0108 	add.w	r1, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ae2:	e05d      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae4:	6839      	ldr	r1, [r7, #0]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa97 	bl	800701a <USBD_CtlError>
            err++;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	3301      	adds	r3, #1
 8006af0:	72fb      	strb	r3, [r7, #11]
          break;
 8006af2:	e055      	b.n	8006ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00b      	beq.n	8006b18 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	7c12      	ldrb	r2, [r2, #16]
 8006b0c:	f107 0108 	add.w	r1, r7, #8
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b16:	e043      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fa7d 	bl	800701a <USBD_CtlError>
            err++;
 8006b20:	7afb      	ldrb	r3, [r7, #11]
 8006b22:	3301      	adds	r3, #1
 8006b24:	72fb      	strb	r3, [r7, #11]
          break;
 8006b26:	e03b      	b.n	8006ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	7c12      	ldrb	r2, [r2, #16]
 8006b40:	f107 0108 	add.w	r1, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b4a:	e029      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa63 	bl	800701a <USBD_CtlError>
            err++;
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	3301      	adds	r3, #1
 8006b58:	72fb      	strb	r3, [r7, #11]
          break;
 8006b5a:	e021      	b.n	8006ba0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	7c12      	ldrb	r2, [r2, #16]
 8006b74:	f107 0108 	add.w	r1, r7, #8
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
 8006b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b7e:	e00f      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa49 	bl	800701a <USBD_CtlError>
            err++;
 8006b88:	7afb      	ldrb	r3, [r7, #11]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8006b8e:	e007      	b.n	8006ba0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 fa41 	bl	800701a <USBD_CtlError>
          err++;
 8006b98:	7afb      	ldrb	r3, [r7, #11]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b9e:	bf00      	nop
      }
      break;
 8006ba0:	e037      	b.n	8006c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7c1b      	ldrb	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d109      	bne.n	8006bbe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb2:	f107 0208 	add.w	r2, r7, #8
 8006bb6:	4610      	mov	r0, r2
 8006bb8:	4798      	blx	r3
 8006bba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bbc:	e029      	b.n	8006c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fa2a 	bl	800701a <USBD_CtlError>
        err++;
 8006bc6:	7afb      	ldrb	r3, [r7, #11]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	72fb      	strb	r3, [r7, #11]
      break;
 8006bcc:	e021      	b.n	8006c12 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	7c1b      	ldrb	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d10d      	bne.n	8006bf2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bde:	f107 0208 	add.w	r2, r7, #8
 8006be2:	4610      	mov	r0, r2
 8006be4:	4798      	blx	r3
 8006be6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3301      	adds	r3, #1
 8006bec:	2207      	movs	r2, #7
 8006bee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bf0:	e00f      	b.n	8006c12 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fa10 	bl	800701a <USBD_CtlError>
        err++;
 8006bfa:	7afb      	ldrb	r3, [r7, #11]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	72fb      	strb	r3, [r7, #11]
      break;
 8006c00:	e007      	b.n	8006c12 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa08 	bl	800701a <USBD_CtlError>
      err++;
 8006c0a:	7afb      	ldrb	r3, [r7, #11]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006c10:	bf00      	nop
  }

  if (err != 0U)
 8006c12:	7afb      	ldrb	r3, [r7, #11]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d11e      	bne.n	8006c56 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	88db      	ldrh	r3, [r3, #6]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d016      	beq.n	8006c4e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006c20:	893b      	ldrh	r3, [r7, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00e      	beq.n	8006c44 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	88da      	ldrh	r2, [r3, #6]
 8006c2a:	893b      	ldrh	r3, [r7, #8]
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	bf28      	it	cs
 8006c30:	4613      	movcs	r3, r2
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c36:	893b      	ldrh	r3, [r7, #8]
 8006c38:	461a      	mov	r2, r3
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 fa69 	bl	8007114 <USBD_CtlSendData>
 8006c42:	e009      	b.n	8006c58 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c44:	6839      	ldr	r1, [r7, #0]
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f9e7 	bl	800701a <USBD_CtlError>
 8006c4c:	e004      	b.n	8006c58 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 faba 	bl	80071c8 <USBD_CtlSendStatus>
 8006c54:	e000      	b.n	8006c58 <USBD_GetDescriptor+0x2cc>
    return;
 8006c56:	bf00      	nop
  }
}
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop

08006c60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d131      	bne.n	8006cd6 <USBD_SetAddress+0x76>
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	88db      	ldrh	r3, [r3, #6]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d12d      	bne.n	8006cd6 <USBD_SetAddress+0x76>
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	885b      	ldrh	r3, [r3, #2]
 8006c7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c80:	d829      	bhi.n	8006cd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	885b      	ldrh	r3, [r3, #2]
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d104      	bne.n	8006ca4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f9bc 	bl	800701a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca2:	e01d      	b.n	8006ce0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	7bfa      	ldrb	r2, [r7, #15]
 8006ca8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ff1d 	bl	8007af0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fa86 	bl	80071c8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006cbc:	7bfb      	ldrb	r3, [r7, #15]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d004      	beq.n	8006ccc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cca:	e009      	b.n	8006ce0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cd4:	e004      	b.n	8006ce0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f99e 	bl	800701a <USBD_CtlError>
  }
}
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	885b      	ldrh	r3, [r3, #2]
 8006cfa:	b2da      	uxtb	r2, r3
 8006cfc:	4b4e      	ldr	r3, [pc, #312]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006cfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006d00:	4b4d      	ldr	r3, [pc, #308]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d905      	bls.n	8006d14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f985 	bl	800701a <USBD_CtlError>
    return USBD_FAIL;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e08c      	b.n	8006e2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d002      	beq.n	8006d26 <USBD_SetConfig+0x3e>
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d029      	beq.n	8006d78 <USBD_SetConfig+0x90>
 8006d24:	e075      	b.n	8006e12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006d26:	4b44      	ldr	r3, [pc, #272]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d020      	beq.n	8006d70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006d2e:	4b42      	ldr	r3, [pc, #264]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	461a      	mov	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d38:	4b3f      	ldr	r3, [pc, #252]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7fe ffe3 	bl	8005d0a <USBD_SetClassConfig>
 8006d44:	4603      	mov	r3, r0
 8006d46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d008      	beq.n	8006d60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d4e:	6839      	ldr	r1, [r7, #0]
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f962 	bl	800701a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d5e:	e065      	b.n	8006e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fa31 	bl	80071c8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2203      	movs	r2, #3
 8006d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d6e:	e05d      	b.n	8006e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fa29 	bl	80071c8 <USBD_CtlSendStatus>
      break;
 8006d76:	e059      	b.n	8006e2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d78:	4b2f      	ldr	r3, [pc, #188]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d112      	bne.n	8006da6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006d88:	4b2b      	ldr	r3, [pc, #172]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d92:	4b29      	ldr	r3, [pc, #164]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7fe ffd2 	bl	8005d42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fa12 	bl	80071c8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006da4:	e042      	b.n	8006e2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006da6:	4b24      	ldr	r3, [pc, #144]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006da8:	781b      	ldrb	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d02a      	beq.n	8006e0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fe ffc0 	bl	8005d42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7fe ff99 	bl	8005d0a <USBD_SetClassConfig>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ddc:	7bfb      	ldrb	r3, [r7, #15]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00f      	beq.n	8006e02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f918 	bl	800701a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7fe ffa5 	bl	8005d42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006e00:	e014      	b.n	8006e2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9e0 	bl	80071c8 <USBD_CtlSendStatus>
      break;
 8006e08:	e010      	b.n	8006e2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9dc 	bl	80071c8 <USBD_CtlSendStatus>
      break;
 8006e10:	e00c      	b.n	8006e2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f900 	bl	800701a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e1a:	4b07      	ldr	r3, [pc, #28]	@ (8006e38 <USBD_SetConfig+0x150>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	4619      	mov	r1, r3
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7fe ff8e 	bl	8005d42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006e26:	2303      	movs	r3, #3
 8006e28:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2a:	bf00      	nop
  }

  return ret;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000214 	.word	0x20000214

08006e3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	88db      	ldrh	r3, [r3, #6]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d004      	beq.n	8006e58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f8e2 	bl	800701a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e56:	e023      	b.n	8006ea0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	dc02      	bgt.n	8006e6a <USBD_GetConfig+0x2e>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	dc03      	bgt.n	8006e70 <USBD_GetConfig+0x34>
 8006e68:	e015      	b.n	8006e96 <USBD_GetConfig+0x5a>
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d00b      	beq.n	8006e86 <USBD_GetConfig+0x4a>
 8006e6e:	e012      	b.n	8006e96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	3308      	adds	r3, #8
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f948 	bl	8007114 <USBD_CtlSendData>
        break;
 8006e84:	e00c      	b.n	8006ea0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f940 	bl	8007114 <USBD_CtlSendData>
        break;
 8006e94:	e004      	b.n	8006ea0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8be 	bl	800701a <USBD_CtlError>
        break;
 8006e9e:	bf00      	nop
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d81e      	bhi.n	8006efe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	88db      	ldrh	r3, [r3, #6]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d004      	beq.n	8006ed2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006ec8:	6839      	ldr	r1, [r7, #0]
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8a5 	bl	800701a <USBD_CtlError>
        break;
 8006ed0:	e01a      	b.n	8006f08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d005      	beq.n	8006eee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f043 0202 	orr.w	r2, r3, #2
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	330c      	adds	r3, #12
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f90c 	bl	8007114 <USBD_CtlSendData>
      break;
 8006efc:	e004      	b.n	8006f08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f88a 	bl	800701a <USBD_CtlError>
      break;
 8006f06:	bf00      	nop
  }
}
 8006f08:	bf00      	nop
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	885b      	ldrh	r3, [r3, #2]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d107      	bne.n	8006f32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f94c 	bl	80071c8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006f30:	e013      	b.n	8006f5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	885b      	ldrh	r3, [r3, #2]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d10b      	bne.n	8006f52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	b2da      	uxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 f93c 	bl	80071c8 <USBD_CtlSendStatus>
}
 8006f50:	e003      	b.n	8006f5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f860 	bl	800701a <USBD_CtlError>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	3b01      	subs	r3, #1
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d80b      	bhi.n	8006f92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	885b      	ldrh	r3, [r3, #2]
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d10c      	bne.n	8006f9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f91c 	bl	80071c8 <USBD_CtlSendStatus>
      }
      break;
 8006f90:	e004      	b.n	8006f9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f840 	bl	800701a <USBD_CtlError>
      break;
 8006f9a:	e000      	b.n	8006f9e <USBD_ClrFeature+0x3c>
      break;
 8006f9c:	bf00      	nop
  }
}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006fa6:	b580      	push	{r7, lr}
 8006fa8:	b084      	sub	sp, #16
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	781a      	ldrb	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7ff fa40 	bl	8006456 <SWAPBYTE>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	461a      	mov	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff fa33 	bl	8006456 <SWAPBYTE>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	3301      	adds	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f7ff fa26 	bl	8006456 <SWAPBYTE>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	80da      	strh	r2, [r3, #6]
}
 8007012:	bf00      	nop
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
 8007022:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007024:	2180      	movs	r1, #128	@ 0x80
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fcf8 	bl	8007a1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800702c:	2100      	movs	r1, #0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fcf4 	bl	8007a1c <USBD_LL_StallEP>
}
 8007034:	bf00      	nop
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b086      	sub	sp, #24
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d042      	beq.n	80070d8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007056:	6938      	ldr	r0, [r7, #16]
 8007058:	f000 f842 	bl	80070e0 <USBD_GetLen>
 800705c:	4603      	mov	r3, r0
 800705e:	3301      	adds	r3, #1
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007066:	d808      	bhi.n	800707a <USBD_GetString+0x3e>
 8007068:	6938      	ldr	r0, [r7, #16]
 800706a:	f000 f839 	bl	80070e0 <USBD_GetLen>
 800706e:	4603      	mov	r3, r0
 8007070:	3301      	adds	r3, #1
 8007072:	b29b      	uxth	r3, r3
 8007074:	005b      	lsls	r3, r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	e001      	b.n	800707e <USBD_GetString+0x42>
 800707a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007082:	7dfb      	ldrb	r3, [r7, #23]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4413      	add	r3, r2
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	7812      	ldrb	r2, [r2, #0]
 800708c:	701a      	strb	r2, [r3, #0]
  idx++;
 800708e:	7dfb      	ldrb	r3, [r7, #23]
 8007090:	3301      	adds	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007094:	7dfb      	ldrb	r3, [r7, #23]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	4413      	add	r3, r2
 800709a:	2203      	movs	r2, #3
 800709c:	701a      	strb	r2, [r3, #0]
  idx++;
 800709e:	7dfb      	ldrb	r3, [r7, #23]
 80070a0:	3301      	adds	r3, #1
 80070a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80070a4:	e013      	b.n	80070ce <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80070a6:	7dfb      	ldrb	r3, [r7, #23]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	4413      	add	r3, r2
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	7812      	ldrb	r2, [r2, #0]
 80070b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	3301      	adds	r3, #1
 80070b6:	613b      	str	r3, [r7, #16]
    idx++;
 80070b8:	7dfb      	ldrb	r3, [r7, #23]
 80070ba:	3301      	adds	r3, #1
 80070bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80070be:	7dfb      	ldrb	r3, [r7, #23]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	4413      	add	r3, r2
 80070c4:	2200      	movs	r2, #0
 80070c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80070c8:	7dfb      	ldrb	r3, [r7, #23]
 80070ca:	3301      	adds	r3, #1
 80070cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d1e7      	bne.n	80070a6 <USBD_GetString+0x6a>
 80070d6:	e000      	b.n	80070da <USBD_GetString+0x9e>
    return;
 80070d8:	bf00      	nop
  }
}
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070f0:	e005      	b.n	80070fe <USBD_GetLen+0x1e>
  {
    len++;
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	3301      	adds	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3301      	adds	r3, #1
 80070fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f5      	bne.n	80070f2 <USBD_GetLen+0x12>
  }

  return len;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b084      	sub	sp, #16
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2202      	movs	r2, #2
 8007124:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f000 fcf7 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	2100      	movs	r1, #0
 800715c:	68f8      	ldr	r0, [r7, #12]
 800715e:	f000 fce6 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2203      	movs	r2, #3
 800717c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	2100      	movs	r1, #0
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	f000 fcea 	bl	8007b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	2100      	movs	r1, #0
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fcd9 	bl	8007b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071be:	2300      	movs	r3, #0
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b082      	sub	sp, #8
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2204      	movs	r2, #4
 80071d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80071d8:	2300      	movs	r3, #0
 80071da:	2200      	movs	r2, #0
 80071dc:	2100      	movs	r1, #0
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fca5 	bl	8007b2e <USBD_LL_Transmit>

  return USBD_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b082      	sub	sp, #8
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2205      	movs	r2, #5
 80071fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fcb3 	bl	8007b70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800720a:	2300      	movs	r3, #0
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007218:	2200      	movs	r2, #0
 800721a:	4912      	ldr	r1, [pc, #72]	@ (8007264 <MX_USB_DEVICE_Init+0x50>)
 800721c:	4812      	ldr	r0, [pc, #72]	@ (8007268 <MX_USB_DEVICE_Init+0x54>)
 800721e:	f7fe fcf7 	bl	8005c10 <USBD_Init>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007228:	f7f9 fb90 	bl	800094c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800722c:	490f      	ldr	r1, [pc, #60]	@ (800726c <MX_USB_DEVICE_Init+0x58>)
 800722e:	480e      	ldr	r0, [pc, #56]	@ (8007268 <MX_USB_DEVICE_Init+0x54>)
 8007230:	f7fe fd1e 	bl	8005c70 <USBD_RegisterClass>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	d001      	beq.n	800723e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800723a:	f7f9 fb87 	bl	800094c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800723e:	490c      	ldr	r1, [pc, #48]	@ (8007270 <MX_USB_DEVICE_Init+0x5c>)
 8007240:	4809      	ldr	r0, [pc, #36]	@ (8007268 <MX_USB_DEVICE_Init+0x54>)
 8007242:	f7fe fc15 	bl	8005a70 <USBD_CDC_RegisterInterface>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800724c:	f7f9 fb7e 	bl	800094c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007250:	4805      	ldr	r0, [pc, #20]	@ (8007268 <MX_USB_DEVICE_Init+0x54>)
 8007252:	f7fe fd43 	bl	8005cdc <USBD_Start>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d001      	beq.n	8007260 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800725c:	f7f9 fb76 	bl	800094c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007260:	bf00      	nop
 8007262:	bd80      	pop	{r7, pc}
 8007264:	200000b4 	.word	0x200000b4
 8007268:	20000218 	.word	0x20000218
 800726c:	20000020 	.word	0x20000020
 8007270:	200000a0 	.word	0x200000a0

08007274 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007278:	2200      	movs	r2, #0
 800727a:	4905      	ldr	r1, [pc, #20]	@ (8007290 <CDC_Init_FS+0x1c>)
 800727c:	4805      	ldr	r0, [pc, #20]	@ (8007294 <CDC_Init_FS+0x20>)
 800727e:	f7fe fc11 	bl	8005aa4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007282:	4905      	ldr	r1, [pc, #20]	@ (8007298 <CDC_Init_FS+0x24>)
 8007284:	4803      	ldr	r0, [pc, #12]	@ (8007294 <CDC_Init_FS+0x20>)
 8007286:	f7fe fc2f 	bl	8005ae8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800728a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800728c:	4618      	mov	r0, r3
 800728e:	bd80      	pop	{r7, pc}
 8007290:	200008f4 	.word	0x200008f4
 8007294:	20000218 	.word	0x20000218
 8007298:	200004f4 	.word	0x200004f4

0800729c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80072a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	6039      	str	r1, [r7, #0]
 80072b6:	71fb      	strb	r3, [r7, #7]
 80072b8:	4613      	mov	r3, r2
 80072ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b23      	cmp	r3, #35	@ 0x23
 80072c0:	d84a      	bhi.n	8007358 <CDC_Control_FS+0xac>
 80072c2:	a201      	add	r2, pc, #4	@ (adr r2, 80072c8 <CDC_Control_FS+0x1c>)
 80072c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072c8:	08007359 	.word	0x08007359
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007359 	.word	0x08007359
 80072d4:	08007359 	.word	0x08007359
 80072d8:	08007359 	.word	0x08007359
 80072dc:	08007359 	.word	0x08007359
 80072e0:	08007359 	.word	0x08007359
 80072e4:	08007359 	.word	0x08007359
 80072e8:	08007359 	.word	0x08007359
 80072ec:	08007359 	.word	0x08007359
 80072f0:	08007359 	.word	0x08007359
 80072f4:	08007359 	.word	0x08007359
 80072f8:	08007359 	.word	0x08007359
 80072fc:	08007359 	.word	0x08007359
 8007300:	08007359 	.word	0x08007359
 8007304:	08007359 	.word	0x08007359
 8007308:	08007359 	.word	0x08007359
 800730c:	08007359 	.word	0x08007359
 8007310:	08007359 	.word	0x08007359
 8007314:	08007359 	.word	0x08007359
 8007318:	08007359 	.word	0x08007359
 800731c:	08007359 	.word	0x08007359
 8007320:	08007359 	.word	0x08007359
 8007324:	08007359 	.word	0x08007359
 8007328:	08007359 	.word	0x08007359
 800732c:	08007359 	.word	0x08007359
 8007330:	08007359 	.word	0x08007359
 8007334:	08007359 	.word	0x08007359
 8007338:	08007359 	.word	0x08007359
 800733c:	08007359 	.word	0x08007359
 8007340:	08007359 	.word	0x08007359
 8007344:	08007359 	.word	0x08007359
 8007348:	08007359 	.word	0x08007359
 800734c:	08007359 	.word	0x08007359
 8007350:	08007359 	.word	0x08007359
 8007354:	08007359 	.word	0x08007359
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007358:	bf00      	nop
  }

  return (USBD_OK);
 800735a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800735c:	4618      	mov	r0, r3
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	480f      	ldr	r0, [pc, #60]	@ (80073b4 <CDC_Receive_FS+0x4c>)
 8007376:	f7fe fbb7 	bl	8005ae8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800737a:	480e      	ldr	r0, [pc, #56]	@ (80073b4 <CDC_Receive_FS+0x4c>)
 800737c:	f7fe fc12 	bl	8005ba4 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)* Len;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);
 8007386:	2240      	movs	r2, #64	@ 0x40
 8007388:	2100      	movs	r1, #0
 800738a:	480b      	ldr	r0, [pc, #44]	@ (80073b8 <CDC_Receive_FS+0x50>)
 800738c:	f000 fc88 	bl	8007ca0 <memset>
  memcpy(buffer, Buf, len);
 8007390:	7bfb      	ldrb	r3, [r7, #15]
 8007392:	461a      	mov	r2, r3
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4808      	ldr	r0, [pc, #32]	@ (80073b8 <CDC_Receive_FS+0x50>)
 8007398:	f000 fcb6 	bl	8007d08 <memcpy>
  memset (Buf, '\0', len);
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	461a      	mov	r2, r3
 80073a0:	2100      	movs	r1, #0
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 fc7c 	bl	8007ca0 <memset>
  return (USBD_OK);
 80073a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000218 	.word	0x20000218
 80073b8:	200001c4 	.word	0x200001c4

080073bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80073cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007404 <CDC_Transmit_FS+0x48>)
 80073ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80073d2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80073de:	2301      	movs	r3, #1
 80073e0:	e00b      	b.n	80073fa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80073e2:	887b      	ldrh	r3, [r7, #2]
 80073e4:	461a      	mov	r2, r3
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4806      	ldr	r0, [pc, #24]	@ (8007404 <CDC_Transmit_FS+0x48>)
 80073ea:	f7fe fb5b 	bl	8005aa4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80073ee:	4805      	ldr	r0, [pc, #20]	@ (8007404 <CDC_Transmit_FS+0x48>)
 80073f0:	f7fe fb98 	bl	8005b24 <USBD_CDC_TransmitPacket>
 80073f4:	4603      	mov	r3, r0
 80073f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	20000218 	.word	0x20000218

08007408 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	4613      	mov	r3, r2
 8007414:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007416:	2300      	movs	r3, #0
 8007418:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800741a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	4603      	mov	r3, r0
 8007434:	6039      	str	r1, [r7, #0]
 8007436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2212      	movs	r2, #18
 800743c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800743e:	4b03      	ldr	r3, [pc, #12]	@ (800744c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr
 800744c:	200000d0 	.word	0x200000d0

08007450 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	6039      	str	r1, [r7, #0]
 800745a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2204      	movs	r2, #4
 8007460:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007462:	4b03      	ldr	r3, [pc, #12]	@ (8007470 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007464:	4618      	mov	r0, r3
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	200000e4 	.word	0x200000e4

08007474 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	6039      	str	r1, [r7, #0]
 800747e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007480:	79fb      	ldrb	r3, [r7, #7]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d105      	bne.n	8007492 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	4907      	ldr	r1, [pc, #28]	@ (80074a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800748a:	4808      	ldr	r0, [pc, #32]	@ (80074ac <USBD_FS_ProductStrDescriptor+0x38>)
 800748c:	f7ff fdd6 	bl	800703c <USBD_GetString>
 8007490:	e004      	b.n	800749c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	4904      	ldr	r1, [pc, #16]	@ (80074a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007496:	4805      	ldr	r0, [pc, #20]	@ (80074ac <USBD_FS_ProductStrDescriptor+0x38>)
 8007498:	f7ff fdd0 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 800749c:	4b02      	ldr	r3, [pc, #8]	@ (80074a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20000cf4 	.word	0x20000cf4
 80074ac:	080085dc 	.word	0x080085dc

080074b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	4603      	mov	r3, r0
 80074b8:	6039      	str	r1, [r7, #0]
 80074ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	4904      	ldr	r1, [pc, #16]	@ (80074d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80074c0:	4804      	ldr	r0, [pc, #16]	@ (80074d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80074c2:	f7ff fdbb 	bl	800703c <USBD_GetString>
  return USBD_StrDesc;
 80074c6:	4b02      	ldr	r3, [pc, #8]	@ (80074d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3708      	adds	r7, #8
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	20000cf4 	.word	0x20000cf4
 80074d4:	080085f4 	.word	0x080085f4

080074d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	6039      	str	r1, [r7, #0]
 80074e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	221a      	movs	r2, #26
 80074e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80074ea:	f000 f843 	bl	8007574 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80074ee:	4b02      	ldr	r3, [pc, #8]	@ (80074f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	200000e8 	.word	0x200000e8

080074fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007508:	79fb      	ldrb	r3, [r7, #7]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	4907      	ldr	r1, [pc, #28]	@ (8007530 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007512:	4808      	ldr	r0, [pc, #32]	@ (8007534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007514:	f7ff fd92 	bl	800703c <USBD_GetString>
 8007518:	e004      	b.n	8007524 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800751a:	683a      	ldr	r2, [r7, #0]
 800751c:	4904      	ldr	r1, [pc, #16]	@ (8007530 <USBD_FS_ConfigStrDescriptor+0x34>)
 800751e:	4805      	ldr	r0, [pc, #20]	@ (8007534 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007520:	f7ff fd8c 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007524:	4b02      	ldr	r3, [pc, #8]	@ (8007530 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	20000cf4 	.word	0x20000cf4
 8007534:	08008608 	.word	0x08008608

08007538 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	4603      	mov	r3, r0
 8007540:	6039      	str	r1, [r7, #0]
 8007542:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d105      	bne.n	8007556 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	4907      	ldr	r1, [pc, #28]	@ (800756c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800754e:	4808      	ldr	r0, [pc, #32]	@ (8007570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007550:	f7ff fd74 	bl	800703c <USBD_GetString>
 8007554:	e004      	b.n	8007560 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4904      	ldr	r1, [pc, #16]	@ (800756c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800755a:	4805      	ldr	r0, [pc, #20]	@ (8007570 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800755c:	f7ff fd6e 	bl	800703c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007560:	4b02      	ldr	r3, [pc, #8]	@ (800756c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20000cf4 	.word	0x20000cf4
 8007570:	08008614 	.word	0x08008614

08007574 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800757a:	4b0f      	ldr	r3, [pc, #60]	@ (80075b8 <Get_SerialNum+0x44>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007580:	4b0e      	ldr	r3, [pc, #56]	@ (80075bc <Get_SerialNum+0x48>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007586:	4b0e      	ldr	r3, [pc, #56]	@ (80075c0 <Get_SerialNum+0x4c>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4413      	add	r3, r2
 8007592:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d009      	beq.n	80075ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800759a:	2208      	movs	r2, #8
 800759c:	4909      	ldr	r1, [pc, #36]	@ (80075c4 <Get_SerialNum+0x50>)
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f814 	bl	80075cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80075a4:	2204      	movs	r2, #4
 80075a6:	4908      	ldr	r1, [pc, #32]	@ (80075c8 <Get_SerialNum+0x54>)
 80075a8:	68b8      	ldr	r0, [r7, #8]
 80075aa:	f000 f80f 	bl	80075cc <IntToUnicode>
  }
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	1fff7a10 	.word	0x1fff7a10
 80075bc:	1fff7a14 	.word	0x1fff7a14
 80075c0:	1fff7a18 	.word	0x1fff7a18
 80075c4:	200000ea 	.word	0x200000ea
 80075c8:	200000fa 	.word	0x200000fa

080075cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80075da:	2300      	movs	r3, #0
 80075dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]
 80075e2:	e027      	b.n	8007634 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	0f1b      	lsrs	r3, r3, #28
 80075e8:	2b09      	cmp	r3, #9
 80075ea:	d80b      	bhi.n	8007604 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	0f1b      	lsrs	r3, r3, #28
 80075f0:	b2da      	uxtb	r2, r3
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4619      	mov	r1, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	440b      	add	r3, r1
 80075fc:	3230      	adds	r2, #48	@ 0x30
 80075fe:	b2d2      	uxtb	r2, r2
 8007600:	701a      	strb	r2, [r3, #0]
 8007602:	e00a      	b.n	800761a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	0f1b      	lsrs	r3, r3, #28
 8007608:	b2da      	uxtb	r2, r3
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	4619      	mov	r1, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	440b      	add	r3, r1
 8007614:	3237      	adds	r2, #55	@ 0x37
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	3301      	adds	r3, #1
 8007626:	68ba      	ldr	r2, [r7, #8]
 8007628:	4413      	add	r3, r2
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	3301      	adds	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
 8007634:	7dfa      	ldrb	r2, [r7, #23]
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	429a      	cmp	r2, r3
 800763a:	d3d3      	bcc.n	80075e4 <IntToUnicode+0x18>
  }
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
	...

0800764c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08a      	sub	sp, #40	@ 0x28
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007654:	f107 0314 	add.w	r3, r7, #20
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800766c:	d13a      	bne.n	80076e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
 8007672:	4b1e      	ldr	r3, [pc, #120]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 8007674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007676:	4a1d      	ldr	r2, [pc, #116]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 8007678:	f043 0301 	orr.w	r3, r3, #1
 800767c:	6313      	str	r3, [r2, #48]	@ 0x30
 800767e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 8007680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	613b      	str	r3, [r7, #16]
 8007688:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800768a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800768e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007690:	2302      	movs	r3, #2
 8007692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007694:	2300      	movs	r3, #0
 8007696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007698:	2303      	movs	r3, #3
 800769a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800769c:	230a      	movs	r3, #10
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076a0:	f107 0314 	add.w	r3, r7, #20
 80076a4:	4619      	mov	r1, r3
 80076a6:	4812      	ldr	r0, [pc, #72]	@ (80076f0 <HAL_PCD_MspInit+0xa4>)
 80076a8:	f7f9 fc1a 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80076ac:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 80076ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076b0:	4a0e      	ldr	r2, [pc, #56]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 80076b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	4b0b      	ldr	r3, [pc, #44]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 80076be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076c0:	4a0a      	ldr	r2, [pc, #40]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 80076c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80076c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80076c8:	4b08      	ldr	r3, [pc, #32]	@ (80076ec <HAL_PCD_MspInit+0xa0>)
 80076ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80076cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076d0:	60fb      	str	r3, [r7, #12]
 80076d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	2043      	movs	r0, #67	@ 0x43
 80076da:	f7f9 fbca 	bl	8000e72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80076de:	2043      	movs	r0, #67	@ 0x43
 80076e0:	f7f9 fbe3 	bl	8000eaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80076e4:	bf00      	nop
 80076e6:	3728      	adds	r7, #40	@ 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	40023800 	.word	0x40023800
 80076f0:	40020000 	.word	0x40020000

080076f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007708:	4619      	mov	r1, r3
 800770a:	4610      	mov	r0, r2
 800770c:	f7fe fb33 	bl	8005d76 <USBD_LL_SetupStage>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	460b      	mov	r3, r1
 8007722:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800772a:	78fa      	ldrb	r2, [r7, #3]
 800772c:	6879      	ldr	r1, [r7, #4]
 800772e:	4613      	mov	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	4413      	add	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	440b      	add	r3, r1
 8007738:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	78fb      	ldrb	r3, [r7, #3]
 8007740:	4619      	mov	r1, r3
 8007742:	f7fe fb6d 	bl	8005e20 <USBD_LL_DataOutStage>
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007760:	78fa      	ldrb	r2, [r7, #3]
 8007762:	6879      	ldr	r1, [r7, #4]
 8007764:	4613      	mov	r3, r2
 8007766:	00db      	lsls	r3, r3, #3
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	440b      	add	r3, r1
 800776e:	3320      	adds	r3, #32
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	78fb      	ldrb	r3, [r7, #3]
 8007774:	4619      	mov	r1, r3
 8007776:	f7fe fc06 	bl	8005f86 <USBD_LL_DataInStage>
}
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fd40 	bl	8006216 <USBD_LL_SOF>
}
 8007796:	bf00      	nop
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80077a6:	2301      	movs	r3, #1
 80077a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	79db      	ldrb	r3, [r3, #7]
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d001      	beq.n	80077b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80077b2:	f7f9 f8cb 	bl	800094c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077bc:	7bfa      	ldrb	r2, [r7, #15]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7fe fce4 	bl	800618e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077cc:	4618      	mov	r0, r3
 80077ce:	f7fe fc8c 	bl	80060ea <USBD_LL_Reset>
}
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fcdf 	bl	80061ae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	7adb      	ldrb	r3, [r3, #11]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d005      	beq.n	800781c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007810:	4b04      	ldr	r3, [pc, #16]	@ (8007824 <HAL_PCD_SuspendCallback+0x48>)
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	4a03      	ldr	r2, [pc, #12]	@ (8007824 <HAL_PCD_SuspendCallback+0x48>)
 8007816:	f043 0306 	orr.w	r3, r3, #6
 800781a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	e000ed00 	.word	0xe000ed00

08007828 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fcd5 	bl	80061e6 <USBD_LL_Resume>
}
 800783c:	bf00      	nop
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	460b      	mov	r3, r1
 800784e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	4611      	mov	r1, r2
 800785a:	4618      	mov	r0, r3
 800785c:	f7fe fd2d 	bl	80062ba <USBD_LL_IsoOUTIncomplete>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b082      	sub	sp, #8
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800787a:	78fa      	ldrb	r2, [r7, #3]
 800787c:	4611      	mov	r1, r2
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fce9 	bl	8006256 <USBD_LL_IsoINIncomplete>
}
 8007884:	bf00      	nop
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fd3f 	bl	800631e <USBD_LL_DevConnected>
}
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7fe fd3c 	bl	8006334 <USBD_LL_DevDisconnected>
}
 80078bc:	bf00      	nop
 80078be:	3708      	adds	r7, #8
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d13c      	bne.n	800794e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078d4:	4a20      	ldr	r2, [pc, #128]	@ (8007958 <USBD_LL_Init+0x94>)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a1e      	ldr	r2, [pc, #120]	@ (8007958 <USBD_LL_Init+0x94>)
 80078e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007958 <USBD_LL_Init+0x94>)
 80078e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80078ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078ec:	4b1a      	ldr	r3, [pc, #104]	@ (8007958 <USBD_LL_Init+0x94>)
 80078ee:	2204      	movs	r2, #4
 80078f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078f2:	4b19      	ldr	r3, [pc, #100]	@ (8007958 <USBD_LL_Init+0x94>)
 80078f4:	2202      	movs	r2, #2
 80078f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078f8:	4b17      	ldr	r3, [pc, #92]	@ (8007958 <USBD_LL_Init+0x94>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078fe:	4b16      	ldr	r3, [pc, #88]	@ (8007958 <USBD_LL_Init+0x94>)
 8007900:	2202      	movs	r2, #2
 8007902:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007904:	4b14      	ldr	r3, [pc, #80]	@ (8007958 <USBD_LL_Init+0x94>)
 8007906:	2200      	movs	r2, #0
 8007908:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800790a:	4b13      	ldr	r3, [pc, #76]	@ (8007958 <USBD_LL_Init+0x94>)
 800790c:	2200      	movs	r2, #0
 800790e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007910:	4b11      	ldr	r3, [pc, #68]	@ (8007958 <USBD_LL_Init+0x94>)
 8007912:	2200      	movs	r2, #0
 8007914:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007916:	4b10      	ldr	r3, [pc, #64]	@ (8007958 <USBD_LL_Init+0x94>)
 8007918:	2200      	movs	r2, #0
 800791a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800791c:	4b0e      	ldr	r3, [pc, #56]	@ (8007958 <USBD_LL_Init+0x94>)
 800791e:	2200      	movs	r2, #0
 8007920:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007922:	480d      	ldr	r0, [pc, #52]	@ (8007958 <USBD_LL_Init+0x94>)
 8007924:	f7fa fac6 	bl	8001eb4 <HAL_PCD_Init>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800792e:	f7f9 f80d 	bl	800094c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007932:	2180      	movs	r1, #128	@ 0x80
 8007934:	4808      	ldr	r0, [pc, #32]	@ (8007958 <USBD_LL_Init+0x94>)
 8007936:	f7fb fcf2 	bl	800331e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800793a:	2240      	movs	r2, #64	@ 0x40
 800793c:	2100      	movs	r1, #0
 800793e:	4806      	ldr	r0, [pc, #24]	@ (8007958 <USBD_LL_Init+0x94>)
 8007940:	f7fb fca6 	bl	8003290 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007944:	2280      	movs	r2, #128	@ 0x80
 8007946:	2101      	movs	r1, #1
 8007948:	4803      	ldr	r0, [pc, #12]	@ (8007958 <USBD_LL_Init+0x94>)
 800794a:	f7fb fca1 	bl	8003290 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	20000ef4 	.word	0x20000ef4

0800795c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007972:	4618      	mov	r0, r3
 8007974:	f7fa fbad 	bl	80020d2 <HAL_PCD_Start>
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4618      	mov	r0, r3
 8007980:	f000 f942 	bl	8007c08 <USBD_Get_USB_Status>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007988:	7bbb      	ldrb	r3, [r7, #14]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	4608      	mov	r0, r1
 800799c:	4611      	mov	r1, r2
 800799e:	461a      	mov	r2, r3
 80079a0:	4603      	mov	r3, r0
 80079a2:	70fb      	strb	r3, [r7, #3]
 80079a4:	460b      	mov	r3, r1
 80079a6:	70bb      	strb	r3, [r7, #2]
 80079a8:	4613      	mov	r3, r2
 80079aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ac:	2300      	movs	r3, #0
 80079ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079b0:	2300      	movs	r3, #0
 80079b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80079ba:	78bb      	ldrb	r3, [r7, #2]
 80079bc:	883a      	ldrh	r2, [r7, #0]
 80079be:	78f9      	ldrb	r1, [r7, #3]
 80079c0:	f7fb f881 	bl	8002ac6 <HAL_PCD_EP_Open>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f91c 	bl	8007c08 <USBD_Get_USB_Status>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}

080079de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079de:	b580      	push	{r7, lr}
 80079e0:	b084      	sub	sp, #16
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079ea:	2300      	movs	r3, #0
 80079ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079ee:	2300      	movs	r3, #0
 80079f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079f8:	78fa      	ldrb	r2, [r7, #3]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7fb f8cc 	bl	8002b9a <HAL_PCD_EP_Close>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 f8fd 	bl	8007c08 <USBD_Get_USB_Status>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	4611      	mov	r1, r2
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7fb f984 	bl	8002d48 <HAL_PCD_EP_SetStall>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 f8de 	bl	8007c08 <USBD_Get_USB_Status>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a74:	78fa      	ldrb	r2, [r7, #3]
 8007a76:	4611      	mov	r1, r2
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7fb f9c8 	bl	8002e0e <HAL_PCD_EP_ClrStall>
 8007a7e:	4603      	mov	r3, r0
 8007a80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a82:	7bfb      	ldrb	r3, [r7, #15]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f8bf 	bl	8007c08 <USBD_Get_USB_Status>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007aaa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	da0b      	bge.n	8007acc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007aba:	68f9      	ldr	r1, [r7, #12]
 8007abc:	4613      	mov	r3, r2
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	440b      	add	r3, r1
 8007ac6:	3316      	adds	r3, #22
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	e00b      	b.n	8007ae4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007acc:	78fb      	ldrb	r3, [r7, #3]
 8007ace:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	00db      	lsls	r3, r3, #3
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007ae2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3714      	adds	r7, #20
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	460b      	mov	r3, r1
 8007afa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b00:	2300      	movs	r3, #0
 8007b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007b0a:	78fa      	ldrb	r2, [r7, #3]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa ffb5 	bl	8002a7e <HAL_PCD_SetAddress>
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 f874 	bl	8007c08 <USBD_Get_USB_Status>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	60f8      	str	r0, [r7, #12]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
 8007b3a:	460b      	mov	r3, r1
 8007b3c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b4c:	7af9      	ldrb	r1, [r7, #11]
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	f7fb f8bf 	bl	8002cd4 <HAL_PCD_EP_Transmit>
 8007b56:	4603      	mov	r3, r0
 8007b58:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b5a:	7dfb      	ldrb	r3, [r7, #23]
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 f853 	bl	8007c08 <USBD_Get_USB_Status>
 8007b62:	4603      	mov	r3, r0
 8007b64:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007b66:	7dbb      	ldrb	r3, [r7, #22]
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3718      	adds	r7, #24
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	607a      	str	r2, [r7, #4]
 8007b7a:	603b      	str	r3, [r7, #0]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b80:	2300      	movs	r3, #0
 8007b82:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b84:	2300      	movs	r3, #0
 8007b86:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007b8e:	7af9      	ldrb	r1, [r7, #11]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	f7fb f84b 	bl	8002c2e <HAL_PCD_EP_Receive>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b9c:	7dfb      	ldrb	r3, [r7, #23]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f000 f832 	bl	8007c08 <USBD_Get_USB_Status>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ba8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
 8007bba:	460b      	mov	r3, r1
 8007bbc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007bc4:	78fa      	ldrb	r2, [r7, #3]
 8007bc6:	4611      	mov	r1, r2
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7fb f86b 	bl	8002ca4 <HAL_PCD_EP_GetRxCount>
 8007bce:	4603      	mov	r3, r0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007be0:	4b03      	ldr	r3, [pc, #12]	@ (8007bf0 <USBD_static_malloc+0x18>)
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	200013d8 	.word	0x200013d8

08007bf4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	b083      	sub	sp, #12
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]

}
 8007bfc:	bf00      	nop
 8007bfe:	370c      	adds	r7, #12
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b085      	sub	sp, #20
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d817      	bhi.n	8007c4c <USBD_Get_USB_Status+0x44>
 8007c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c24 <USBD_Get_USB_Status+0x1c>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c35 	.word	0x08007c35
 8007c28:	08007c3b 	.word	0x08007c3b
 8007c2c:	08007c41 	.word	0x08007c41
 8007c30:	08007c47 	.word	0x08007c47
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c34:	2300      	movs	r3, #0
 8007c36:	73fb      	strb	r3, [r7, #15]
    break;
 8007c38:	e00b      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c3e:	e008      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c40:	2301      	movs	r3, #1
 8007c42:	73fb      	strb	r3, [r7, #15]
    break;
 8007c44:	e005      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
    break;
 8007c4a:	e002      	b.n	8007c52 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c50:	bf00      	nop
  }
  return usb_status;
 8007c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3714      	adds	r7, #20
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <siprintf>:
 8007c60:	b40e      	push	{r1, r2, r3}
 8007c62:	b500      	push	{lr}
 8007c64:	b09c      	sub	sp, #112	@ 0x70
 8007c66:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c68:	9002      	str	r0, [sp, #8]
 8007c6a:	9006      	str	r0, [sp, #24]
 8007c6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c70:	4809      	ldr	r0, [pc, #36]	@ (8007c98 <siprintf+0x38>)
 8007c72:	9107      	str	r1, [sp, #28]
 8007c74:	9104      	str	r1, [sp, #16]
 8007c76:	4909      	ldr	r1, [pc, #36]	@ (8007c9c <siprintf+0x3c>)
 8007c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c7c:	9105      	str	r1, [sp, #20]
 8007c7e:	6800      	ldr	r0, [r0, #0]
 8007c80:	9301      	str	r3, [sp, #4]
 8007c82:	a902      	add	r1, sp, #8
 8007c84:	f000 f9a2 	bl	8007fcc <_svfiprintf_r>
 8007c88:	9b02      	ldr	r3, [sp, #8]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	701a      	strb	r2, [r3, #0]
 8007c8e:	b01c      	add	sp, #112	@ 0x70
 8007c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c94:	b003      	add	sp, #12
 8007c96:	4770      	bx	lr
 8007c98:	20000104 	.word	0x20000104
 8007c9c:	ffff0208 	.word	0xffff0208

08007ca0 <memset>:
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d100      	bne.n	8007caa <memset+0xa>
 8007ca8:	4770      	bx	lr
 8007caa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cae:	e7f9      	b.n	8007ca4 <memset+0x4>

08007cb0 <__errno>:
 8007cb0:	4b01      	ldr	r3, [pc, #4]	@ (8007cb8 <__errno+0x8>)
 8007cb2:	6818      	ldr	r0, [r3, #0]
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop
 8007cb8:	20000104 	.word	0x20000104

08007cbc <__libc_init_array>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	4d0d      	ldr	r5, [pc, #52]	@ (8007cf4 <__libc_init_array+0x38>)
 8007cc0:	4c0d      	ldr	r4, [pc, #52]	@ (8007cf8 <__libc_init_array+0x3c>)
 8007cc2:	1b64      	subs	r4, r4, r5
 8007cc4:	10a4      	asrs	r4, r4, #2
 8007cc6:	2600      	movs	r6, #0
 8007cc8:	42a6      	cmp	r6, r4
 8007cca:	d109      	bne.n	8007ce0 <__libc_init_array+0x24>
 8007ccc:	4d0b      	ldr	r5, [pc, #44]	@ (8007cfc <__libc_init_array+0x40>)
 8007cce:	4c0c      	ldr	r4, [pc, #48]	@ (8007d00 <__libc_init_array+0x44>)
 8007cd0:	f000 fc66 	bl	80085a0 <_init>
 8007cd4:	1b64      	subs	r4, r4, r5
 8007cd6:	10a4      	asrs	r4, r4, #2
 8007cd8:	2600      	movs	r6, #0
 8007cda:	42a6      	cmp	r6, r4
 8007cdc:	d105      	bne.n	8007cea <__libc_init_array+0x2e>
 8007cde:	bd70      	pop	{r4, r5, r6, pc}
 8007ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce4:	4798      	blx	r3
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7ee      	b.n	8007cc8 <__libc_init_array+0xc>
 8007cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cee:	4798      	blx	r3
 8007cf0:	3601      	adds	r6, #1
 8007cf2:	e7f2      	b.n	8007cda <__libc_init_array+0x1e>
 8007cf4:	08008678 	.word	0x08008678
 8007cf8:	08008678 	.word	0x08008678
 8007cfc:	08008678 	.word	0x08008678
 8007d00:	0800867c 	.word	0x0800867c

08007d04 <__retarget_lock_acquire_recursive>:
 8007d04:	4770      	bx	lr

08007d06 <__retarget_lock_release_recursive>:
 8007d06:	4770      	bx	lr

08007d08 <memcpy>:
 8007d08:	440a      	add	r2, r1
 8007d0a:	4291      	cmp	r1, r2
 8007d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d10:	d100      	bne.n	8007d14 <memcpy+0xc>
 8007d12:	4770      	bx	lr
 8007d14:	b510      	push	{r4, lr}
 8007d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d1e:	4291      	cmp	r1, r2
 8007d20:	d1f9      	bne.n	8007d16 <memcpy+0xe>
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <_free_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4605      	mov	r5, r0
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	d041      	beq.n	8007db0 <_free_r+0x8c>
 8007d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d30:	1f0c      	subs	r4, r1, #4
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bfb8      	it	lt
 8007d36:	18e4      	addlt	r4, r4, r3
 8007d38:	f000 f8e0 	bl	8007efc <__malloc_lock>
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	@ (8007db4 <_free_r+0x90>)
 8007d3e:	6813      	ldr	r3, [r2, #0]
 8007d40:	b933      	cbnz	r3, 8007d50 <_free_r+0x2c>
 8007d42:	6063      	str	r3, [r4, #4]
 8007d44:	6014      	str	r4, [r2, #0]
 8007d46:	4628      	mov	r0, r5
 8007d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d4c:	f000 b8dc 	b.w	8007f08 <__malloc_unlock>
 8007d50:	42a3      	cmp	r3, r4
 8007d52:	d908      	bls.n	8007d66 <_free_r+0x42>
 8007d54:	6820      	ldr	r0, [r4, #0]
 8007d56:	1821      	adds	r1, r4, r0
 8007d58:	428b      	cmp	r3, r1
 8007d5a:	bf01      	itttt	eq
 8007d5c:	6819      	ldreq	r1, [r3, #0]
 8007d5e:	685b      	ldreq	r3, [r3, #4]
 8007d60:	1809      	addeq	r1, r1, r0
 8007d62:	6021      	streq	r1, [r4, #0]
 8007d64:	e7ed      	b.n	8007d42 <_free_r+0x1e>
 8007d66:	461a      	mov	r2, r3
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	b10b      	cbz	r3, 8007d70 <_free_r+0x4c>
 8007d6c:	42a3      	cmp	r3, r4
 8007d6e:	d9fa      	bls.n	8007d66 <_free_r+0x42>
 8007d70:	6811      	ldr	r1, [r2, #0]
 8007d72:	1850      	adds	r0, r2, r1
 8007d74:	42a0      	cmp	r0, r4
 8007d76:	d10b      	bne.n	8007d90 <_free_r+0x6c>
 8007d78:	6820      	ldr	r0, [r4, #0]
 8007d7a:	4401      	add	r1, r0
 8007d7c:	1850      	adds	r0, r2, r1
 8007d7e:	4283      	cmp	r3, r0
 8007d80:	6011      	str	r1, [r2, #0]
 8007d82:	d1e0      	bne.n	8007d46 <_free_r+0x22>
 8007d84:	6818      	ldr	r0, [r3, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	6053      	str	r3, [r2, #4]
 8007d8a:	4408      	add	r0, r1
 8007d8c:	6010      	str	r0, [r2, #0]
 8007d8e:	e7da      	b.n	8007d46 <_free_r+0x22>
 8007d90:	d902      	bls.n	8007d98 <_free_r+0x74>
 8007d92:	230c      	movs	r3, #12
 8007d94:	602b      	str	r3, [r5, #0]
 8007d96:	e7d6      	b.n	8007d46 <_free_r+0x22>
 8007d98:	6820      	ldr	r0, [r4, #0]
 8007d9a:	1821      	adds	r1, r4, r0
 8007d9c:	428b      	cmp	r3, r1
 8007d9e:	bf04      	itt	eq
 8007da0:	6819      	ldreq	r1, [r3, #0]
 8007da2:	685b      	ldreq	r3, [r3, #4]
 8007da4:	6063      	str	r3, [r4, #4]
 8007da6:	bf04      	itt	eq
 8007da8:	1809      	addeq	r1, r1, r0
 8007daa:	6021      	streq	r1, [r4, #0]
 8007dac:	6054      	str	r4, [r2, #4]
 8007dae:	e7ca      	b.n	8007d46 <_free_r+0x22>
 8007db0:	bd38      	pop	{r3, r4, r5, pc}
 8007db2:	bf00      	nop
 8007db4:	2000173c 	.word	0x2000173c

08007db8 <sbrk_aligned>:
 8007db8:	b570      	push	{r4, r5, r6, lr}
 8007dba:	4e0f      	ldr	r6, [pc, #60]	@ (8007df8 <sbrk_aligned+0x40>)
 8007dbc:	460c      	mov	r4, r1
 8007dbe:	6831      	ldr	r1, [r6, #0]
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	b911      	cbnz	r1, 8007dca <sbrk_aligned+0x12>
 8007dc4:	f000 fba6 	bl	8008514 <_sbrk_r>
 8007dc8:	6030      	str	r0, [r6, #0]
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 fba1 	bl	8008514 <_sbrk_r>
 8007dd2:	1c43      	adds	r3, r0, #1
 8007dd4:	d103      	bne.n	8007dde <sbrk_aligned+0x26>
 8007dd6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dda:	4620      	mov	r0, r4
 8007ddc:	bd70      	pop	{r4, r5, r6, pc}
 8007dde:	1cc4      	adds	r4, r0, #3
 8007de0:	f024 0403 	bic.w	r4, r4, #3
 8007de4:	42a0      	cmp	r0, r4
 8007de6:	d0f8      	beq.n	8007dda <sbrk_aligned+0x22>
 8007de8:	1a21      	subs	r1, r4, r0
 8007dea:	4628      	mov	r0, r5
 8007dec:	f000 fb92 	bl	8008514 <_sbrk_r>
 8007df0:	3001      	adds	r0, #1
 8007df2:	d1f2      	bne.n	8007dda <sbrk_aligned+0x22>
 8007df4:	e7ef      	b.n	8007dd6 <sbrk_aligned+0x1e>
 8007df6:	bf00      	nop
 8007df8:	20001738 	.word	0x20001738

08007dfc <_malloc_r>:
 8007dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e00:	1ccd      	adds	r5, r1, #3
 8007e02:	f025 0503 	bic.w	r5, r5, #3
 8007e06:	3508      	adds	r5, #8
 8007e08:	2d0c      	cmp	r5, #12
 8007e0a:	bf38      	it	cc
 8007e0c:	250c      	movcc	r5, #12
 8007e0e:	2d00      	cmp	r5, #0
 8007e10:	4606      	mov	r6, r0
 8007e12:	db01      	blt.n	8007e18 <_malloc_r+0x1c>
 8007e14:	42a9      	cmp	r1, r5
 8007e16:	d904      	bls.n	8007e22 <_malloc_r+0x26>
 8007e18:	230c      	movs	r3, #12
 8007e1a:	6033      	str	r3, [r6, #0]
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ef8 <_malloc_r+0xfc>
 8007e26:	f000 f869 	bl	8007efc <__malloc_lock>
 8007e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e2e:	461c      	mov	r4, r3
 8007e30:	bb44      	cbnz	r4, 8007e84 <_malloc_r+0x88>
 8007e32:	4629      	mov	r1, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff ffbf 	bl	8007db8 <sbrk_aligned>
 8007e3a:	1c43      	adds	r3, r0, #1
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	d158      	bne.n	8007ef2 <_malloc_r+0xf6>
 8007e40:	f8d8 4000 	ldr.w	r4, [r8]
 8007e44:	4627      	mov	r7, r4
 8007e46:	2f00      	cmp	r7, #0
 8007e48:	d143      	bne.n	8007ed2 <_malloc_r+0xd6>
 8007e4a:	2c00      	cmp	r4, #0
 8007e4c:	d04b      	beq.n	8007ee6 <_malloc_r+0xea>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	4639      	mov	r1, r7
 8007e52:	4630      	mov	r0, r6
 8007e54:	eb04 0903 	add.w	r9, r4, r3
 8007e58:	f000 fb5c 	bl	8008514 <_sbrk_r>
 8007e5c:	4581      	cmp	r9, r0
 8007e5e:	d142      	bne.n	8007ee6 <_malloc_r+0xea>
 8007e60:	6821      	ldr	r1, [r4, #0]
 8007e62:	1a6d      	subs	r5, r5, r1
 8007e64:	4629      	mov	r1, r5
 8007e66:	4630      	mov	r0, r6
 8007e68:	f7ff ffa6 	bl	8007db8 <sbrk_aligned>
 8007e6c:	3001      	adds	r0, #1
 8007e6e:	d03a      	beq.n	8007ee6 <_malloc_r+0xea>
 8007e70:	6823      	ldr	r3, [r4, #0]
 8007e72:	442b      	add	r3, r5
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	f8d8 3000 	ldr.w	r3, [r8]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	bb62      	cbnz	r2, 8007ed8 <_malloc_r+0xdc>
 8007e7e:	f8c8 7000 	str.w	r7, [r8]
 8007e82:	e00f      	b.n	8007ea4 <_malloc_r+0xa8>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	1b52      	subs	r2, r2, r5
 8007e88:	d420      	bmi.n	8007ecc <_malloc_r+0xd0>
 8007e8a:	2a0b      	cmp	r2, #11
 8007e8c:	d917      	bls.n	8007ebe <_malloc_r+0xc2>
 8007e8e:	1961      	adds	r1, r4, r5
 8007e90:	42a3      	cmp	r3, r4
 8007e92:	6025      	str	r5, [r4, #0]
 8007e94:	bf18      	it	ne
 8007e96:	6059      	strne	r1, [r3, #4]
 8007e98:	6863      	ldr	r3, [r4, #4]
 8007e9a:	bf08      	it	eq
 8007e9c:	f8c8 1000 	streq.w	r1, [r8]
 8007ea0:	5162      	str	r2, [r4, r5]
 8007ea2:	604b      	str	r3, [r1, #4]
 8007ea4:	4630      	mov	r0, r6
 8007ea6:	f000 f82f 	bl	8007f08 <__malloc_unlock>
 8007eaa:	f104 000b 	add.w	r0, r4, #11
 8007eae:	1d23      	adds	r3, r4, #4
 8007eb0:	f020 0007 	bic.w	r0, r0, #7
 8007eb4:	1ac2      	subs	r2, r0, r3
 8007eb6:	bf1c      	itt	ne
 8007eb8:	1a1b      	subne	r3, r3, r0
 8007eba:	50a3      	strne	r3, [r4, r2]
 8007ebc:	e7af      	b.n	8007e1e <_malloc_r+0x22>
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	bf0c      	ite	eq
 8007ec4:	f8c8 2000 	streq.w	r2, [r8]
 8007ec8:	605a      	strne	r2, [r3, #4]
 8007eca:	e7eb      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ecc:	4623      	mov	r3, r4
 8007ece:	6864      	ldr	r4, [r4, #4]
 8007ed0:	e7ae      	b.n	8007e30 <_malloc_r+0x34>
 8007ed2:	463c      	mov	r4, r7
 8007ed4:	687f      	ldr	r7, [r7, #4]
 8007ed6:	e7b6      	b.n	8007e46 <_malloc_r+0x4a>
 8007ed8:	461a      	mov	r2, r3
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	d1fb      	bne.n	8007ed8 <_malloc_r+0xdc>
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	6053      	str	r3, [r2, #4]
 8007ee4:	e7de      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	6033      	str	r3, [r6, #0]
 8007eea:	4630      	mov	r0, r6
 8007eec:	f000 f80c 	bl	8007f08 <__malloc_unlock>
 8007ef0:	e794      	b.n	8007e1c <_malloc_r+0x20>
 8007ef2:	6005      	str	r5, [r0, #0]
 8007ef4:	e7d6      	b.n	8007ea4 <_malloc_r+0xa8>
 8007ef6:	bf00      	nop
 8007ef8:	2000173c 	.word	0x2000173c

08007efc <__malloc_lock>:
 8007efc:	4801      	ldr	r0, [pc, #4]	@ (8007f04 <__malloc_lock+0x8>)
 8007efe:	f7ff bf01 	b.w	8007d04 <__retarget_lock_acquire_recursive>
 8007f02:	bf00      	nop
 8007f04:	20001734 	.word	0x20001734

08007f08 <__malloc_unlock>:
 8007f08:	4801      	ldr	r0, [pc, #4]	@ (8007f10 <__malloc_unlock+0x8>)
 8007f0a:	f7ff befc 	b.w	8007d06 <__retarget_lock_release_recursive>
 8007f0e:	bf00      	nop
 8007f10:	20001734 	.word	0x20001734

08007f14 <__ssputs_r>:
 8007f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f18:	688e      	ldr	r6, [r1, #8]
 8007f1a:	461f      	mov	r7, r3
 8007f1c:	42be      	cmp	r6, r7
 8007f1e:	680b      	ldr	r3, [r1, #0]
 8007f20:	4682      	mov	sl, r0
 8007f22:	460c      	mov	r4, r1
 8007f24:	4690      	mov	r8, r2
 8007f26:	d82d      	bhi.n	8007f84 <__ssputs_r+0x70>
 8007f28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f30:	d026      	beq.n	8007f80 <__ssputs_r+0x6c>
 8007f32:	6965      	ldr	r5, [r4, #20]
 8007f34:	6909      	ldr	r1, [r1, #16]
 8007f36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f3a:	eba3 0901 	sub.w	r9, r3, r1
 8007f3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f42:	1c7b      	adds	r3, r7, #1
 8007f44:	444b      	add	r3, r9
 8007f46:	106d      	asrs	r5, r5, #1
 8007f48:	429d      	cmp	r5, r3
 8007f4a:	bf38      	it	cc
 8007f4c:	461d      	movcc	r5, r3
 8007f4e:	0553      	lsls	r3, r2, #21
 8007f50:	d527      	bpl.n	8007fa2 <__ssputs_r+0x8e>
 8007f52:	4629      	mov	r1, r5
 8007f54:	f7ff ff52 	bl	8007dfc <_malloc_r>
 8007f58:	4606      	mov	r6, r0
 8007f5a:	b360      	cbz	r0, 8007fb6 <__ssputs_r+0xa2>
 8007f5c:	6921      	ldr	r1, [r4, #16]
 8007f5e:	464a      	mov	r2, r9
 8007f60:	f7ff fed2 	bl	8007d08 <memcpy>
 8007f64:	89a3      	ldrh	r3, [r4, #12]
 8007f66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f6e:	81a3      	strh	r3, [r4, #12]
 8007f70:	6126      	str	r6, [r4, #16]
 8007f72:	6165      	str	r5, [r4, #20]
 8007f74:	444e      	add	r6, r9
 8007f76:	eba5 0509 	sub.w	r5, r5, r9
 8007f7a:	6026      	str	r6, [r4, #0]
 8007f7c:	60a5      	str	r5, [r4, #8]
 8007f7e:	463e      	mov	r6, r7
 8007f80:	42be      	cmp	r6, r7
 8007f82:	d900      	bls.n	8007f86 <__ssputs_r+0x72>
 8007f84:	463e      	mov	r6, r7
 8007f86:	6820      	ldr	r0, [r4, #0]
 8007f88:	4632      	mov	r2, r6
 8007f8a:	4641      	mov	r1, r8
 8007f8c:	f000 faa8 	bl	80084e0 <memmove>
 8007f90:	68a3      	ldr	r3, [r4, #8]
 8007f92:	1b9b      	subs	r3, r3, r6
 8007f94:	60a3      	str	r3, [r4, #8]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	4433      	add	r3, r6
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	2000      	movs	r0, #0
 8007f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa2:	462a      	mov	r2, r5
 8007fa4:	f000 fac6 	bl	8008534 <_realloc_r>
 8007fa8:	4606      	mov	r6, r0
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d1e0      	bne.n	8007f70 <__ssputs_r+0x5c>
 8007fae:	6921      	ldr	r1, [r4, #16]
 8007fb0:	4650      	mov	r0, sl
 8007fb2:	f7ff feb7 	bl	8007d24 <_free_r>
 8007fb6:	230c      	movs	r3, #12
 8007fb8:	f8ca 3000 	str.w	r3, [sl]
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc2:	81a3      	strh	r3, [r4, #12]
 8007fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc8:	e7e9      	b.n	8007f9e <__ssputs_r+0x8a>
	...

08007fcc <_svfiprintf_r>:
 8007fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd0:	4698      	mov	r8, r3
 8007fd2:	898b      	ldrh	r3, [r1, #12]
 8007fd4:	061b      	lsls	r3, r3, #24
 8007fd6:	b09d      	sub	sp, #116	@ 0x74
 8007fd8:	4607      	mov	r7, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	4614      	mov	r4, r2
 8007fde:	d510      	bpl.n	8008002 <_svfiprintf_r+0x36>
 8007fe0:	690b      	ldr	r3, [r1, #16]
 8007fe2:	b973      	cbnz	r3, 8008002 <_svfiprintf_r+0x36>
 8007fe4:	2140      	movs	r1, #64	@ 0x40
 8007fe6:	f7ff ff09 	bl	8007dfc <_malloc_r>
 8007fea:	6028      	str	r0, [r5, #0]
 8007fec:	6128      	str	r0, [r5, #16]
 8007fee:	b930      	cbnz	r0, 8007ffe <_svfiprintf_r+0x32>
 8007ff0:	230c      	movs	r3, #12
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	b01d      	add	sp, #116	@ 0x74
 8007ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffe:	2340      	movs	r3, #64	@ 0x40
 8008000:	616b      	str	r3, [r5, #20]
 8008002:	2300      	movs	r3, #0
 8008004:	9309      	str	r3, [sp, #36]	@ 0x24
 8008006:	2320      	movs	r3, #32
 8008008:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800800c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008010:	2330      	movs	r3, #48	@ 0x30
 8008012:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081b0 <_svfiprintf_r+0x1e4>
 8008016:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800801a:	f04f 0901 	mov.w	r9, #1
 800801e:	4623      	mov	r3, r4
 8008020:	469a      	mov	sl, r3
 8008022:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008026:	b10a      	cbz	r2, 800802c <_svfiprintf_r+0x60>
 8008028:	2a25      	cmp	r2, #37	@ 0x25
 800802a:	d1f9      	bne.n	8008020 <_svfiprintf_r+0x54>
 800802c:	ebba 0b04 	subs.w	fp, sl, r4
 8008030:	d00b      	beq.n	800804a <_svfiprintf_r+0x7e>
 8008032:	465b      	mov	r3, fp
 8008034:	4622      	mov	r2, r4
 8008036:	4629      	mov	r1, r5
 8008038:	4638      	mov	r0, r7
 800803a:	f7ff ff6b 	bl	8007f14 <__ssputs_r>
 800803e:	3001      	adds	r0, #1
 8008040:	f000 80a7 	beq.w	8008192 <_svfiprintf_r+0x1c6>
 8008044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008046:	445a      	add	r2, fp
 8008048:	9209      	str	r2, [sp, #36]	@ 0x24
 800804a:	f89a 3000 	ldrb.w	r3, [sl]
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 809f 	beq.w	8008192 <_svfiprintf_r+0x1c6>
 8008054:	2300      	movs	r3, #0
 8008056:	f04f 32ff 	mov.w	r2, #4294967295
 800805a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800805e:	f10a 0a01 	add.w	sl, sl, #1
 8008062:	9304      	str	r3, [sp, #16]
 8008064:	9307      	str	r3, [sp, #28]
 8008066:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800806a:	931a      	str	r3, [sp, #104]	@ 0x68
 800806c:	4654      	mov	r4, sl
 800806e:	2205      	movs	r2, #5
 8008070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008074:	484e      	ldr	r0, [pc, #312]	@ (80081b0 <_svfiprintf_r+0x1e4>)
 8008076:	f7f8 f8cb 	bl	8000210 <memchr>
 800807a:	9a04      	ldr	r2, [sp, #16]
 800807c:	b9d8      	cbnz	r0, 80080b6 <_svfiprintf_r+0xea>
 800807e:	06d0      	lsls	r0, r2, #27
 8008080:	bf44      	itt	mi
 8008082:	2320      	movmi	r3, #32
 8008084:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008088:	0711      	lsls	r1, r2, #28
 800808a:	bf44      	itt	mi
 800808c:	232b      	movmi	r3, #43	@ 0x2b
 800808e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008092:	f89a 3000 	ldrb.w	r3, [sl]
 8008096:	2b2a      	cmp	r3, #42	@ 0x2a
 8008098:	d015      	beq.n	80080c6 <_svfiprintf_r+0xfa>
 800809a:	9a07      	ldr	r2, [sp, #28]
 800809c:	4654      	mov	r4, sl
 800809e:	2000      	movs	r0, #0
 80080a0:	f04f 0c0a 	mov.w	ip, #10
 80080a4:	4621      	mov	r1, r4
 80080a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080aa:	3b30      	subs	r3, #48	@ 0x30
 80080ac:	2b09      	cmp	r3, #9
 80080ae:	d94b      	bls.n	8008148 <_svfiprintf_r+0x17c>
 80080b0:	b1b0      	cbz	r0, 80080e0 <_svfiprintf_r+0x114>
 80080b2:	9207      	str	r2, [sp, #28]
 80080b4:	e014      	b.n	80080e0 <_svfiprintf_r+0x114>
 80080b6:	eba0 0308 	sub.w	r3, r0, r8
 80080ba:	fa09 f303 	lsl.w	r3, r9, r3
 80080be:	4313      	orrs	r3, r2
 80080c0:	9304      	str	r3, [sp, #16]
 80080c2:	46a2      	mov	sl, r4
 80080c4:	e7d2      	b.n	800806c <_svfiprintf_r+0xa0>
 80080c6:	9b03      	ldr	r3, [sp, #12]
 80080c8:	1d19      	adds	r1, r3, #4
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	9103      	str	r1, [sp, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	bfbb      	ittet	lt
 80080d2:	425b      	neglt	r3, r3
 80080d4:	f042 0202 	orrlt.w	r2, r2, #2
 80080d8:	9307      	strge	r3, [sp, #28]
 80080da:	9307      	strlt	r3, [sp, #28]
 80080dc:	bfb8      	it	lt
 80080de:	9204      	strlt	r2, [sp, #16]
 80080e0:	7823      	ldrb	r3, [r4, #0]
 80080e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80080e4:	d10a      	bne.n	80080fc <_svfiprintf_r+0x130>
 80080e6:	7863      	ldrb	r3, [r4, #1]
 80080e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080ea:	d132      	bne.n	8008152 <_svfiprintf_r+0x186>
 80080ec:	9b03      	ldr	r3, [sp, #12]
 80080ee:	1d1a      	adds	r2, r3, #4
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	9203      	str	r2, [sp, #12]
 80080f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080f8:	3402      	adds	r4, #2
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081c0 <_svfiprintf_r+0x1f4>
 8008100:	7821      	ldrb	r1, [r4, #0]
 8008102:	2203      	movs	r2, #3
 8008104:	4650      	mov	r0, sl
 8008106:	f7f8 f883 	bl	8000210 <memchr>
 800810a:	b138      	cbz	r0, 800811c <_svfiprintf_r+0x150>
 800810c:	9b04      	ldr	r3, [sp, #16]
 800810e:	eba0 000a 	sub.w	r0, r0, sl
 8008112:	2240      	movs	r2, #64	@ 0x40
 8008114:	4082      	lsls	r2, r0
 8008116:	4313      	orrs	r3, r2
 8008118:	3401      	adds	r4, #1
 800811a:	9304      	str	r3, [sp, #16]
 800811c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008120:	4824      	ldr	r0, [pc, #144]	@ (80081b4 <_svfiprintf_r+0x1e8>)
 8008122:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008126:	2206      	movs	r2, #6
 8008128:	f7f8 f872 	bl	8000210 <memchr>
 800812c:	2800      	cmp	r0, #0
 800812e:	d036      	beq.n	800819e <_svfiprintf_r+0x1d2>
 8008130:	4b21      	ldr	r3, [pc, #132]	@ (80081b8 <_svfiprintf_r+0x1ec>)
 8008132:	bb1b      	cbnz	r3, 800817c <_svfiprintf_r+0x1b0>
 8008134:	9b03      	ldr	r3, [sp, #12]
 8008136:	3307      	adds	r3, #7
 8008138:	f023 0307 	bic.w	r3, r3, #7
 800813c:	3308      	adds	r3, #8
 800813e:	9303      	str	r3, [sp, #12]
 8008140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008142:	4433      	add	r3, r6
 8008144:	9309      	str	r3, [sp, #36]	@ 0x24
 8008146:	e76a      	b.n	800801e <_svfiprintf_r+0x52>
 8008148:	fb0c 3202 	mla	r2, ip, r2, r3
 800814c:	460c      	mov	r4, r1
 800814e:	2001      	movs	r0, #1
 8008150:	e7a8      	b.n	80080a4 <_svfiprintf_r+0xd8>
 8008152:	2300      	movs	r3, #0
 8008154:	3401      	adds	r4, #1
 8008156:	9305      	str	r3, [sp, #20]
 8008158:	4619      	mov	r1, r3
 800815a:	f04f 0c0a 	mov.w	ip, #10
 800815e:	4620      	mov	r0, r4
 8008160:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008164:	3a30      	subs	r2, #48	@ 0x30
 8008166:	2a09      	cmp	r2, #9
 8008168:	d903      	bls.n	8008172 <_svfiprintf_r+0x1a6>
 800816a:	2b00      	cmp	r3, #0
 800816c:	d0c6      	beq.n	80080fc <_svfiprintf_r+0x130>
 800816e:	9105      	str	r1, [sp, #20]
 8008170:	e7c4      	b.n	80080fc <_svfiprintf_r+0x130>
 8008172:	fb0c 2101 	mla	r1, ip, r1, r2
 8008176:	4604      	mov	r4, r0
 8008178:	2301      	movs	r3, #1
 800817a:	e7f0      	b.n	800815e <_svfiprintf_r+0x192>
 800817c:	ab03      	add	r3, sp, #12
 800817e:	9300      	str	r3, [sp, #0]
 8008180:	462a      	mov	r2, r5
 8008182:	4b0e      	ldr	r3, [pc, #56]	@ (80081bc <_svfiprintf_r+0x1f0>)
 8008184:	a904      	add	r1, sp, #16
 8008186:	4638      	mov	r0, r7
 8008188:	f3af 8000 	nop.w
 800818c:	1c42      	adds	r2, r0, #1
 800818e:	4606      	mov	r6, r0
 8008190:	d1d6      	bne.n	8008140 <_svfiprintf_r+0x174>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	065b      	lsls	r3, r3, #25
 8008196:	f53f af2d 	bmi.w	8007ff4 <_svfiprintf_r+0x28>
 800819a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800819c:	e72c      	b.n	8007ff8 <_svfiprintf_r+0x2c>
 800819e:	ab03      	add	r3, sp, #12
 80081a0:	9300      	str	r3, [sp, #0]
 80081a2:	462a      	mov	r2, r5
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <_svfiprintf_r+0x1f0>)
 80081a6:	a904      	add	r1, sp, #16
 80081a8:	4638      	mov	r0, r7
 80081aa:	f000 f879 	bl	80082a0 <_printf_i>
 80081ae:	e7ed      	b.n	800818c <_svfiprintf_r+0x1c0>
 80081b0:	0800863c 	.word	0x0800863c
 80081b4:	08008646 	.word	0x08008646
 80081b8:	00000000 	.word	0x00000000
 80081bc:	08007f15 	.word	0x08007f15
 80081c0:	08008642 	.word	0x08008642

080081c4 <_printf_common>:
 80081c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	4616      	mov	r6, r2
 80081ca:	4698      	mov	r8, r3
 80081cc:	688a      	ldr	r2, [r1, #8]
 80081ce:	690b      	ldr	r3, [r1, #16]
 80081d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081d4:	4293      	cmp	r3, r2
 80081d6:	bfb8      	it	lt
 80081d8:	4613      	movlt	r3, r2
 80081da:	6033      	str	r3, [r6, #0]
 80081dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081e0:	4607      	mov	r7, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	b10a      	cbz	r2, 80081ea <_printf_common+0x26>
 80081e6:	3301      	adds	r3, #1
 80081e8:	6033      	str	r3, [r6, #0]
 80081ea:	6823      	ldr	r3, [r4, #0]
 80081ec:	0699      	lsls	r1, r3, #26
 80081ee:	bf42      	ittt	mi
 80081f0:	6833      	ldrmi	r3, [r6, #0]
 80081f2:	3302      	addmi	r3, #2
 80081f4:	6033      	strmi	r3, [r6, #0]
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	f015 0506 	ands.w	r5, r5, #6
 80081fc:	d106      	bne.n	800820c <_printf_common+0x48>
 80081fe:	f104 0a19 	add.w	sl, r4, #25
 8008202:	68e3      	ldr	r3, [r4, #12]
 8008204:	6832      	ldr	r2, [r6, #0]
 8008206:	1a9b      	subs	r3, r3, r2
 8008208:	42ab      	cmp	r3, r5
 800820a:	dc26      	bgt.n	800825a <_printf_common+0x96>
 800820c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	3b00      	subs	r3, #0
 8008214:	bf18      	it	ne
 8008216:	2301      	movne	r3, #1
 8008218:	0692      	lsls	r2, r2, #26
 800821a:	d42b      	bmi.n	8008274 <_printf_common+0xb0>
 800821c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008220:	4641      	mov	r1, r8
 8008222:	4638      	mov	r0, r7
 8008224:	47c8      	blx	r9
 8008226:	3001      	adds	r0, #1
 8008228:	d01e      	beq.n	8008268 <_printf_common+0xa4>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	6922      	ldr	r2, [r4, #16]
 800822e:	f003 0306 	and.w	r3, r3, #6
 8008232:	2b04      	cmp	r3, #4
 8008234:	bf02      	ittt	eq
 8008236:	68e5      	ldreq	r5, [r4, #12]
 8008238:	6833      	ldreq	r3, [r6, #0]
 800823a:	1aed      	subeq	r5, r5, r3
 800823c:	68a3      	ldr	r3, [r4, #8]
 800823e:	bf0c      	ite	eq
 8008240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008244:	2500      	movne	r5, #0
 8008246:	4293      	cmp	r3, r2
 8008248:	bfc4      	itt	gt
 800824a:	1a9b      	subgt	r3, r3, r2
 800824c:	18ed      	addgt	r5, r5, r3
 800824e:	2600      	movs	r6, #0
 8008250:	341a      	adds	r4, #26
 8008252:	42b5      	cmp	r5, r6
 8008254:	d11a      	bne.n	800828c <_printf_common+0xc8>
 8008256:	2000      	movs	r0, #0
 8008258:	e008      	b.n	800826c <_printf_common+0xa8>
 800825a:	2301      	movs	r3, #1
 800825c:	4652      	mov	r2, sl
 800825e:	4641      	mov	r1, r8
 8008260:	4638      	mov	r0, r7
 8008262:	47c8      	blx	r9
 8008264:	3001      	adds	r0, #1
 8008266:	d103      	bne.n	8008270 <_printf_common+0xac>
 8008268:	f04f 30ff 	mov.w	r0, #4294967295
 800826c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008270:	3501      	adds	r5, #1
 8008272:	e7c6      	b.n	8008202 <_printf_common+0x3e>
 8008274:	18e1      	adds	r1, r4, r3
 8008276:	1c5a      	adds	r2, r3, #1
 8008278:	2030      	movs	r0, #48	@ 0x30
 800827a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800827e:	4422      	add	r2, r4
 8008280:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008284:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008288:	3302      	adds	r3, #2
 800828a:	e7c7      	b.n	800821c <_printf_common+0x58>
 800828c:	2301      	movs	r3, #1
 800828e:	4622      	mov	r2, r4
 8008290:	4641      	mov	r1, r8
 8008292:	4638      	mov	r0, r7
 8008294:	47c8      	blx	r9
 8008296:	3001      	adds	r0, #1
 8008298:	d0e6      	beq.n	8008268 <_printf_common+0xa4>
 800829a:	3601      	adds	r6, #1
 800829c:	e7d9      	b.n	8008252 <_printf_common+0x8e>
	...

080082a0 <_printf_i>:
 80082a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	7e0f      	ldrb	r7, [r1, #24]
 80082a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082a8:	2f78      	cmp	r7, #120	@ 0x78
 80082aa:	4691      	mov	r9, r2
 80082ac:	4680      	mov	r8, r0
 80082ae:	460c      	mov	r4, r1
 80082b0:	469a      	mov	sl, r3
 80082b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082b6:	d807      	bhi.n	80082c8 <_printf_i+0x28>
 80082b8:	2f62      	cmp	r7, #98	@ 0x62
 80082ba:	d80a      	bhi.n	80082d2 <_printf_i+0x32>
 80082bc:	2f00      	cmp	r7, #0
 80082be:	f000 80d2 	beq.w	8008466 <_printf_i+0x1c6>
 80082c2:	2f58      	cmp	r7, #88	@ 0x58
 80082c4:	f000 80b9 	beq.w	800843a <_printf_i+0x19a>
 80082c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d0:	e03a      	b.n	8008348 <_printf_i+0xa8>
 80082d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082d6:	2b15      	cmp	r3, #21
 80082d8:	d8f6      	bhi.n	80082c8 <_printf_i+0x28>
 80082da:	a101      	add	r1, pc, #4	@ (adr r1, 80082e0 <_printf_i+0x40>)
 80082dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e0:	08008339 	.word	0x08008339
 80082e4:	0800834d 	.word	0x0800834d
 80082e8:	080082c9 	.word	0x080082c9
 80082ec:	080082c9 	.word	0x080082c9
 80082f0:	080082c9 	.word	0x080082c9
 80082f4:	080082c9 	.word	0x080082c9
 80082f8:	0800834d 	.word	0x0800834d
 80082fc:	080082c9 	.word	0x080082c9
 8008300:	080082c9 	.word	0x080082c9
 8008304:	080082c9 	.word	0x080082c9
 8008308:	080082c9 	.word	0x080082c9
 800830c:	0800844d 	.word	0x0800844d
 8008310:	08008377 	.word	0x08008377
 8008314:	08008407 	.word	0x08008407
 8008318:	080082c9 	.word	0x080082c9
 800831c:	080082c9 	.word	0x080082c9
 8008320:	0800846f 	.word	0x0800846f
 8008324:	080082c9 	.word	0x080082c9
 8008328:	08008377 	.word	0x08008377
 800832c:	080082c9 	.word	0x080082c9
 8008330:	080082c9 	.word	0x080082c9
 8008334:	0800840f 	.word	0x0800840f
 8008338:	6833      	ldr	r3, [r6, #0]
 800833a:	1d1a      	adds	r2, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6032      	str	r2, [r6, #0]
 8008340:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008344:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008348:	2301      	movs	r3, #1
 800834a:	e09d      	b.n	8008488 <_printf_i+0x1e8>
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	6820      	ldr	r0, [r4, #0]
 8008350:	1d19      	adds	r1, r3, #4
 8008352:	6031      	str	r1, [r6, #0]
 8008354:	0606      	lsls	r6, r0, #24
 8008356:	d501      	bpl.n	800835c <_printf_i+0xbc>
 8008358:	681d      	ldr	r5, [r3, #0]
 800835a:	e003      	b.n	8008364 <_printf_i+0xc4>
 800835c:	0645      	lsls	r5, r0, #25
 800835e:	d5fb      	bpl.n	8008358 <_printf_i+0xb8>
 8008360:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008364:	2d00      	cmp	r5, #0
 8008366:	da03      	bge.n	8008370 <_printf_i+0xd0>
 8008368:	232d      	movs	r3, #45	@ 0x2d
 800836a:	426d      	negs	r5, r5
 800836c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008370:	4859      	ldr	r0, [pc, #356]	@ (80084d8 <_printf_i+0x238>)
 8008372:	230a      	movs	r3, #10
 8008374:	e011      	b.n	800839a <_printf_i+0xfa>
 8008376:	6821      	ldr	r1, [r4, #0]
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	0608      	lsls	r0, r1, #24
 800837c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008380:	d402      	bmi.n	8008388 <_printf_i+0xe8>
 8008382:	0649      	lsls	r1, r1, #25
 8008384:	bf48      	it	mi
 8008386:	b2ad      	uxthmi	r5, r5
 8008388:	2f6f      	cmp	r7, #111	@ 0x6f
 800838a:	4853      	ldr	r0, [pc, #332]	@ (80084d8 <_printf_i+0x238>)
 800838c:	6033      	str	r3, [r6, #0]
 800838e:	bf14      	ite	ne
 8008390:	230a      	movne	r3, #10
 8008392:	2308      	moveq	r3, #8
 8008394:	2100      	movs	r1, #0
 8008396:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800839a:	6866      	ldr	r6, [r4, #4]
 800839c:	60a6      	str	r6, [r4, #8]
 800839e:	2e00      	cmp	r6, #0
 80083a0:	bfa2      	ittt	ge
 80083a2:	6821      	ldrge	r1, [r4, #0]
 80083a4:	f021 0104 	bicge.w	r1, r1, #4
 80083a8:	6021      	strge	r1, [r4, #0]
 80083aa:	b90d      	cbnz	r5, 80083b0 <_printf_i+0x110>
 80083ac:	2e00      	cmp	r6, #0
 80083ae:	d04b      	beq.n	8008448 <_printf_i+0x1a8>
 80083b0:	4616      	mov	r6, r2
 80083b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80083b6:	fb03 5711 	mls	r7, r3, r1, r5
 80083ba:	5dc7      	ldrb	r7, [r0, r7]
 80083bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083c0:	462f      	mov	r7, r5
 80083c2:	42bb      	cmp	r3, r7
 80083c4:	460d      	mov	r5, r1
 80083c6:	d9f4      	bls.n	80083b2 <_printf_i+0x112>
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d10b      	bne.n	80083e4 <_printf_i+0x144>
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07df      	lsls	r7, r3, #31
 80083d0:	d508      	bpl.n	80083e4 <_printf_i+0x144>
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	6861      	ldr	r1, [r4, #4]
 80083d6:	4299      	cmp	r1, r3
 80083d8:	bfde      	ittt	le
 80083da:	2330      	movle	r3, #48	@ 0x30
 80083dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083e4:	1b92      	subs	r2, r2, r6
 80083e6:	6122      	str	r2, [r4, #16]
 80083e8:	f8cd a000 	str.w	sl, [sp]
 80083ec:	464b      	mov	r3, r9
 80083ee:	aa03      	add	r2, sp, #12
 80083f0:	4621      	mov	r1, r4
 80083f2:	4640      	mov	r0, r8
 80083f4:	f7ff fee6 	bl	80081c4 <_printf_common>
 80083f8:	3001      	adds	r0, #1
 80083fa:	d14a      	bne.n	8008492 <_printf_i+0x1f2>
 80083fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008400:	b004      	add	sp, #16
 8008402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	f043 0320 	orr.w	r3, r3, #32
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	4833      	ldr	r0, [pc, #204]	@ (80084dc <_printf_i+0x23c>)
 8008410:	2778      	movs	r7, #120	@ 0x78
 8008412:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	6831      	ldr	r1, [r6, #0]
 800841a:	061f      	lsls	r7, r3, #24
 800841c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008420:	d402      	bmi.n	8008428 <_printf_i+0x188>
 8008422:	065f      	lsls	r7, r3, #25
 8008424:	bf48      	it	mi
 8008426:	b2ad      	uxthmi	r5, r5
 8008428:	6031      	str	r1, [r6, #0]
 800842a:	07d9      	lsls	r1, r3, #31
 800842c:	bf44      	itt	mi
 800842e:	f043 0320 	orrmi.w	r3, r3, #32
 8008432:	6023      	strmi	r3, [r4, #0]
 8008434:	b11d      	cbz	r5, 800843e <_printf_i+0x19e>
 8008436:	2310      	movs	r3, #16
 8008438:	e7ac      	b.n	8008394 <_printf_i+0xf4>
 800843a:	4827      	ldr	r0, [pc, #156]	@ (80084d8 <_printf_i+0x238>)
 800843c:	e7e9      	b.n	8008412 <_printf_i+0x172>
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f023 0320 	bic.w	r3, r3, #32
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	e7f6      	b.n	8008436 <_printf_i+0x196>
 8008448:	4616      	mov	r6, r2
 800844a:	e7bd      	b.n	80083c8 <_printf_i+0x128>
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	6961      	ldr	r1, [r4, #20]
 8008452:	1d18      	adds	r0, r3, #4
 8008454:	6030      	str	r0, [r6, #0]
 8008456:	062e      	lsls	r6, r5, #24
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	d501      	bpl.n	8008460 <_printf_i+0x1c0>
 800845c:	6019      	str	r1, [r3, #0]
 800845e:	e002      	b.n	8008466 <_printf_i+0x1c6>
 8008460:	0668      	lsls	r0, r5, #25
 8008462:	d5fb      	bpl.n	800845c <_printf_i+0x1bc>
 8008464:	8019      	strh	r1, [r3, #0]
 8008466:	2300      	movs	r3, #0
 8008468:	6123      	str	r3, [r4, #16]
 800846a:	4616      	mov	r6, r2
 800846c:	e7bc      	b.n	80083e8 <_printf_i+0x148>
 800846e:	6833      	ldr	r3, [r6, #0]
 8008470:	1d1a      	adds	r2, r3, #4
 8008472:	6032      	str	r2, [r6, #0]
 8008474:	681e      	ldr	r6, [r3, #0]
 8008476:	6862      	ldr	r2, [r4, #4]
 8008478:	2100      	movs	r1, #0
 800847a:	4630      	mov	r0, r6
 800847c:	f7f7 fec8 	bl	8000210 <memchr>
 8008480:	b108      	cbz	r0, 8008486 <_printf_i+0x1e6>
 8008482:	1b80      	subs	r0, r0, r6
 8008484:	6060      	str	r0, [r4, #4]
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	6123      	str	r3, [r4, #16]
 800848a:	2300      	movs	r3, #0
 800848c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008490:	e7aa      	b.n	80083e8 <_printf_i+0x148>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	4632      	mov	r2, r6
 8008496:	4649      	mov	r1, r9
 8008498:	4640      	mov	r0, r8
 800849a:	47d0      	blx	sl
 800849c:	3001      	adds	r0, #1
 800849e:	d0ad      	beq.n	80083fc <_printf_i+0x15c>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	079b      	lsls	r3, r3, #30
 80084a4:	d413      	bmi.n	80084ce <_printf_i+0x22e>
 80084a6:	68e0      	ldr	r0, [r4, #12]
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	4298      	cmp	r0, r3
 80084ac:	bfb8      	it	lt
 80084ae:	4618      	movlt	r0, r3
 80084b0:	e7a6      	b.n	8008400 <_printf_i+0x160>
 80084b2:	2301      	movs	r3, #1
 80084b4:	4632      	mov	r2, r6
 80084b6:	4649      	mov	r1, r9
 80084b8:	4640      	mov	r0, r8
 80084ba:	47d0      	blx	sl
 80084bc:	3001      	adds	r0, #1
 80084be:	d09d      	beq.n	80083fc <_printf_i+0x15c>
 80084c0:	3501      	adds	r5, #1
 80084c2:	68e3      	ldr	r3, [r4, #12]
 80084c4:	9903      	ldr	r1, [sp, #12]
 80084c6:	1a5b      	subs	r3, r3, r1
 80084c8:	42ab      	cmp	r3, r5
 80084ca:	dcf2      	bgt.n	80084b2 <_printf_i+0x212>
 80084cc:	e7eb      	b.n	80084a6 <_printf_i+0x206>
 80084ce:	2500      	movs	r5, #0
 80084d0:	f104 0619 	add.w	r6, r4, #25
 80084d4:	e7f5      	b.n	80084c2 <_printf_i+0x222>
 80084d6:	bf00      	nop
 80084d8:	0800864d 	.word	0x0800864d
 80084dc:	0800865e 	.word	0x0800865e

080084e0 <memmove>:
 80084e0:	4288      	cmp	r0, r1
 80084e2:	b510      	push	{r4, lr}
 80084e4:	eb01 0402 	add.w	r4, r1, r2
 80084e8:	d902      	bls.n	80084f0 <memmove+0x10>
 80084ea:	4284      	cmp	r4, r0
 80084ec:	4623      	mov	r3, r4
 80084ee:	d807      	bhi.n	8008500 <memmove+0x20>
 80084f0:	1e43      	subs	r3, r0, #1
 80084f2:	42a1      	cmp	r1, r4
 80084f4:	d008      	beq.n	8008508 <memmove+0x28>
 80084f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084fe:	e7f8      	b.n	80084f2 <memmove+0x12>
 8008500:	4402      	add	r2, r0
 8008502:	4601      	mov	r1, r0
 8008504:	428a      	cmp	r2, r1
 8008506:	d100      	bne.n	800850a <memmove+0x2a>
 8008508:	bd10      	pop	{r4, pc}
 800850a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800850e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008512:	e7f7      	b.n	8008504 <memmove+0x24>

08008514 <_sbrk_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d06      	ldr	r5, [pc, #24]	@ (8008530 <_sbrk_r+0x1c>)
 8008518:	2300      	movs	r3, #0
 800851a:	4604      	mov	r4, r0
 800851c:	4608      	mov	r0, r1
 800851e:	602b      	str	r3, [r5, #0]
 8008520:	f7f8 fac4 	bl	8000aac <_sbrk>
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d102      	bne.n	800852e <_sbrk_r+0x1a>
 8008528:	682b      	ldr	r3, [r5, #0]
 800852a:	b103      	cbz	r3, 800852e <_sbrk_r+0x1a>
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	bd38      	pop	{r3, r4, r5, pc}
 8008530:	20001730 	.word	0x20001730

08008534 <_realloc_r>:
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	4680      	mov	r8, r0
 800853a:	4615      	mov	r5, r2
 800853c:	460c      	mov	r4, r1
 800853e:	b921      	cbnz	r1, 800854a <_realloc_r+0x16>
 8008540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008544:	4611      	mov	r1, r2
 8008546:	f7ff bc59 	b.w	8007dfc <_malloc_r>
 800854a:	b92a      	cbnz	r2, 8008558 <_realloc_r+0x24>
 800854c:	f7ff fbea 	bl	8007d24 <_free_r>
 8008550:	2400      	movs	r4, #0
 8008552:	4620      	mov	r0, r4
 8008554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008558:	f000 f81a 	bl	8008590 <_malloc_usable_size_r>
 800855c:	4285      	cmp	r5, r0
 800855e:	4606      	mov	r6, r0
 8008560:	d802      	bhi.n	8008568 <_realloc_r+0x34>
 8008562:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008566:	d8f4      	bhi.n	8008552 <_realloc_r+0x1e>
 8008568:	4629      	mov	r1, r5
 800856a:	4640      	mov	r0, r8
 800856c:	f7ff fc46 	bl	8007dfc <_malloc_r>
 8008570:	4607      	mov	r7, r0
 8008572:	2800      	cmp	r0, #0
 8008574:	d0ec      	beq.n	8008550 <_realloc_r+0x1c>
 8008576:	42b5      	cmp	r5, r6
 8008578:	462a      	mov	r2, r5
 800857a:	4621      	mov	r1, r4
 800857c:	bf28      	it	cs
 800857e:	4632      	movcs	r2, r6
 8008580:	f7ff fbc2 	bl	8007d08 <memcpy>
 8008584:	4621      	mov	r1, r4
 8008586:	4640      	mov	r0, r8
 8008588:	f7ff fbcc 	bl	8007d24 <_free_r>
 800858c:	463c      	mov	r4, r7
 800858e:	e7e0      	b.n	8008552 <_realloc_r+0x1e>

08008590 <_malloc_usable_size_r>:
 8008590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008594:	1f18      	subs	r0, r3, #4
 8008596:	2b00      	cmp	r3, #0
 8008598:	bfbc      	itt	lt
 800859a:	580b      	ldrlt	r3, [r1, r0]
 800859c:	18c0      	addlt	r0, r0, r3
 800859e:	4770      	bx	lr

080085a0 <_init>:
 80085a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a2:	bf00      	nop
 80085a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a6:	bc08      	pop	{r3}
 80085a8:	469e      	mov	lr, r3
 80085aa:	4770      	bx	lr

080085ac <_fini>:
 80085ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ae:	bf00      	nop
 80085b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085b2:	bc08      	pop	{r3}
 80085b4:	469e      	mov	lr, r3
 80085b6:	4770      	bx	lr
