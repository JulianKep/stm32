
stm32_usb_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008888  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08008a28  08008a28  00009a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b00  08008b00  0000a154  2**0
                  CONTENTS
  4 .ARM          00000008  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b08  08008b08  0000a154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b08  08008b08  00009b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b0c  08008b0c  00009b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  08008b10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015ec  20000154  08008c64  0000a154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001740  08008c64  0000a740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109a5  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed9  00000000  00000000  0001ab29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001da08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000add  00000000  00000000  0001e868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a5  00000000  00000000  0001f345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001459c  00000000  00000000  000377ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008929c  00000000  00000000  0004bd86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d5022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000d5068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d909c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000154 	.word	0x20000154
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008a10 	.word	0x08008a10

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000158 	.word	0x20000158
 80001dc:	08008a10 	.word	0x08008a10

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	091b      	lsrs	r3, r3, #4
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	461a      	mov	r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	461a      	mov	r2, r3
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	4413      	add	r3, r2
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 80005d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	2307      	movs	r3, #7
 80005de:	9301      	str	r3, [sp, #4]
 80005e0:	463b      	mov	r3, r7
 80005e2:	9300      	str	r3, [sp, #0]
 80005e4:	2301      	movs	r3, #1
 80005e6:	2200      	movs	r2, #0
 80005e8:	21d0      	movs	r1, #208	@ 0xd0
 80005ea:	481f      	ldr	r0, [pc, #124]	@ (8000668 <Get_Time+0x98>)
 80005ec:	f001 f8b4 	bl	8001758 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 80005f0:	783b      	ldrb	r3, [r7, #0]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ffd4 	bl	80005a0 <bcdToDec>
 80005f8:	4603      	mov	r3, r0
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b1b      	ldr	r3, [pc, #108]	@ (800066c <Get_Time+0x9c>)
 80005fe:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000600:	787b      	ldrb	r3, [r7, #1]
 8000602:	4618      	mov	r0, r3
 8000604:	f7ff ffcc 	bl	80005a0 <bcdToDec>
 8000608:	4603      	mov	r3, r0
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <Get_Time+0x9c>)
 800060e:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000610:	78bb      	ldrb	r3, [r7, #2]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff ffc4 	bl	80005a0 <bcdToDec>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b13      	ldr	r3, [pc, #76]	@ (800066c <Get_Time+0x9c>)
 800061e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ffbc 	bl	80005a0 <bcdToDec>
 8000628:	4603      	mov	r3, r0
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <Get_Time+0x9c>)
 800062e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000630:	793b      	ldrb	r3, [r7, #4]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff ffb4 	bl	80005a0 <bcdToDec>
 8000638:	4603      	mov	r3, r0
 800063a:	b2da      	uxtb	r2, r3
 800063c:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <Get_Time+0x9c>)
 800063e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000640:	797b      	ldrb	r3, [r7, #5]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff ffac 	bl	80005a0 <bcdToDec>
 8000648:	4603      	mov	r3, r0
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b07      	ldr	r3, [pc, #28]	@ (800066c <Get_Time+0x9c>)
 800064e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f7ff ffa4 	bl	80005a0 <bcdToDec>
 8000658:	4603      	mov	r3, r0
 800065a:	b2da      	uxtb	r2, r3
 800065c:	4b03      	ldr	r3, [pc, #12]	@ (800066c <Get_Time+0x9c>)
 800065e:	719a      	strb	r2, [r3, #6]
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000170 	.word	0x20000170
 800066c:	20000204 	.word	0x20000204

08000670 <HMC588L_init>:


void HMC588L_init (void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af04      	add	r7, sp, #16
	//data to be put into registers
	uint8_t CRA_data = 0x70;
 8000676:	2370      	movs	r3, #112	@ 0x70
 8000678:	71fb      	strb	r3, [r7, #7]
	uint8_t CRB_data = 0xA0;
 800067a:	23a0      	movs	r3, #160	@ 0xa0
 800067c:	71bb      	strb	r3, [r7, #6]
	uint8_t MR_data = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	717b      	strb	r3, [r7, #5]

	//args: pointer to handle, device address, register address, sizeof register, pointer to data, number of bytes to write, timeoutvariable
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_WRITE_ADDRESS, 0x00, 1, &CRA_data, 1, 1000);
 8000682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000686:	9302      	str	r3, [sp, #8]
 8000688:	2301      	movs	r3, #1
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2301      	movs	r3, #1
 8000692:	2200      	movs	r2, #0
 8000694:	213c      	movs	r1, #60	@ 0x3c
 8000696:	4812      	ldr	r0, [pc, #72]	@ (80006e0 <HMC588L_init+0x70>)
 8000698:	f000 ff64 	bl	8001564 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_WRITE_ADDRESS, 0x01, 1, &CRB_data, 1, 1000);
 800069c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a0:	9302      	str	r3, [sp, #8]
 80006a2:	2301      	movs	r3, #1
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	1dbb      	adds	r3, r7, #6
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	2301      	movs	r3, #1
 80006ac:	2201      	movs	r2, #1
 80006ae:	213c      	movs	r1, #60	@ 0x3c
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <HMC588L_init+0x70>)
 80006b2:	f000 ff57 	bl	8001564 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, HMC5883L_WRITE_ADDRESS, 0x02, 1, &MR_data, 1, 1000);
 80006b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ba:	9302      	str	r3, [sp, #8]
 80006bc:	2301      	movs	r3, #1
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	1d7b      	adds	r3, r7, #5
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	2202      	movs	r2, #2
 80006c8:	213c      	movs	r1, #60	@ 0x3c
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <HMC588L_init+0x70>)
 80006cc:	f000 ff4a 	bl	8001564 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	@ 0x64
 80006d2:	f000 fb2f 	bl	8000d34 <HAL_Delay>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000170 	.word	0x20000170

080006e4 <HMC588L_poll>:



void HMC588L_poll (void)
{
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	b08d      	sub	sp, #52	@ 0x34
 80006e8:	af04      	add	r7, sp, #16
	uint8_t polldata[6];

	//only poll X, Y
	HAL_I2C_Mem_Read(&hi2c1, HMC5883L_READ_ADDRESS, 0x00, 1, polldata, 6, 1000);
 80006ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006ee:	9302      	str	r3, [sp, #8]
 80006f0:	2306      	movs	r3, #6
 80006f2:	9301      	str	r3, [sp, #4]
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2301      	movs	r3, #1
 80006fc:	2200      	movs	r2, #0
 80006fe:	213d      	movs	r1, #61	@ 0x3d
 8000700:	4812      	ldr	r0, [pc, #72]	@ (800074c <HMC588L_poll+0x68>)
 8000702:	f001 f829 	bl	8001758 <HAL_I2C_Mem_Read>

	char datastring[20];
	sprintf(datastring, "%02X %02X %02X %02X %02X %02X\n", polldata[0], polldata[1], polldata[2], polldata[3], polldata[4], polldata[5]);
 8000706:	7e3b      	ldrb	r3, [r7, #24]
 8000708:	461d      	mov	r5, r3
 800070a:	7e7b      	ldrb	r3, [r7, #25]
 800070c:	461e      	mov	r6, r3
 800070e:	7ebb      	ldrb	r3, [r7, #26]
 8000710:	7efa      	ldrb	r2, [r7, #27]
 8000712:	7f39      	ldrb	r1, [r7, #28]
 8000714:	7f78      	ldrb	r0, [r7, #29]
 8000716:	4604      	mov	r4, r0
 8000718:	1d38      	adds	r0, r7, #4
 800071a:	9403      	str	r4, [sp, #12]
 800071c:	9102      	str	r1, [sp, #8]
 800071e:	9201      	str	r2, [sp, #4]
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	4633      	mov	r3, r6
 8000724:	462a      	mov	r2, r5
 8000726:	490a      	ldr	r1, [pc, #40]	@ (8000750 <HMC588L_poll+0x6c>)
 8000728:	f007 fcd2 	bl	80080d0 <siprintf>
	CDC_Transmit_FS((uint8_t *)datastring, strlen(datastring));
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff fd60 	bl	80001f4 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f007 f875 	bl	800782c <CDC_Transmit_FS>

}
 8000742:	bf00      	nop
 8000744:	3724      	adds	r7, #36	@ 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	bf00      	nop
 800074c:	20000170 	.word	0x20000170
 8000750:	08008a38 	.word	0x08008a38

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b091      	sub	sp, #68	@ 0x44
 8000758:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800075a:	f000 fa79 	bl	8000c50 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075e:	f000 f85b 	bl	8000818 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000762:	f000 f8f3 	bl	800094c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000766:	f006 ff8d 	bl	8007684 <MX_USB_DEVICE_Init>
  MX_I2C1_Init();
 800076a:	f000 f8c1 	bl	80008f0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */



  HMC588L_init();
 800076e:	f7ff ff7f 	bl	8000670 <HMC588L_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HMC588L_init();
 8000772:	f7ff ff7d 	bl	8000670 <HMC588L_init>




	  //check for incoming usb serial data
	  HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	@ 0x64
 8000778:	f000 fadc 	bl	8000d34 <HAL_Delay>


	  if(strcmp((char*)buffer, comparestring)==0){
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <main+0xa8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	481f      	ldr	r0, [pc, #124]	@ (8000800 <main+0xac>)
 8000784:	f7ff fd2c 	bl	80001e0 <strcmp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10c      	bne.n	80007a8 <main+0x54>
		  CDC_Transmit_FS((uint8_t *) data, strlen(data));
 800078e:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <main+0xb0>)
 8000790:	681c      	ldr	r4, [r3, #0]
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <main+0xb0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd2c 	bl	80001f4 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29b      	uxth	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	4620      	mov	r0, r4
 80007a4:	f007 f842 	bl	800782c <CDC_Transmit_FS>
	  }


	  //poll time from ds3231
	  Get_Time();
 80007a8:	f7ff ff12 	bl	80005d0 <Get_Time>
	  char time_string[20];
	  sprintf(time_string, "%02d:%02d:%02d\n", time.hour, time.minutes, time.seconds);
 80007ac:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <main+0xb4>)
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <main+0xb4>)
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	4619      	mov	r1, r3
 80007b8:	4b13      	ldr	r3, [pc, #76]	@ (8000808 <main+0xb4>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	f107 001c 	add.w	r0, r7, #28
 80007c0:	9300      	str	r3, [sp, #0]
 80007c2:	460b      	mov	r3, r1
 80007c4:	4911      	ldr	r1, [pc, #68]	@ (800080c <main+0xb8>)
 80007c6:	f007 fc83 	bl	80080d0 <siprintf>
	  //CDC_Transmit_FS((uint8_t *) time_string, strlen(time_string));


	  //poll raw value from ds3231
	  uint8_t readtest;
	  HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, &readtest, 1, 1000);
 80007ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ce:	9302      	str	r3, [sp, #8]
 80007d0:	2301      	movs	r3, #1
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	f107 031b 	add.w	r3, r7, #27
 80007d8:	9300      	str	r3, [sp, #0]
 80007da:	2301      	movs	r3, #1
 80007dc:	2200      	movs	r2, #0
 80007de:	21d0      	movs	r1, #208	@ 0xd0
 80007e0:	480b      	ldr	r0, [pc, #44]	@ (8000810 <main+0xbc>)
 80007e2:	f000 ffb9 	bl	8001758 <HAL_I2C_Mem_Read>
	  char datastring[20];
	  sprintf(datastring, "%u\n", readtest);
 80007e6:	7efb      	ldrb	r3, [r7, #27]
 80007e8:	461a      	mov	r2, r3
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4909      	ldr	r1, [pc, #36]	@ (8000814 <main+0xc0>)
 80007ee:	4618      	mov	r0, r3
 80007f0:	f007 fc6e 	bl	80080d0 <siprintf>
	  //CDC_Transmit_FS((uint8_t *) datastring, strlen(datastring));

	  //poll from gyro
	  HMC588L_poll ();
 80007f4:	f7ff ff76 	bl	80006e4 <HMC588L_poll>
  {
 80007f8:	e7bd      	b.n	8000776 <main+0x22>
 80007fa:	bf00      	nop
 80007fc:	20000004 	.word	0x20000004
 8000800:	200001c4 	.word	0x200001c4
 8000804:	20000000 	.word	0x20000000
 8000808:	20000204 	.word	0x20000204
 800080c:	08008a58 	.word	0x08008a58
 8000810:	20000170 	.word	0x20000170
 8000814:	08008a68 	.word	0x08008a68

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b094      	sub	sp, #80	@ 0x50
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0320 	add.w	r3, r7, #32
 8000822:	2230      	movs	r2, #48	@ 0x30
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f007 fc72 	bl	8008110 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <SystemClock_Config+0xd0>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a28      	ldr	r2, [pc, #160]	@ (80008e8 <SystemClock_Config+0xd0>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <SystemClock_Config+0xd0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000854:	60bb      	str	r3, [r7, #8]
 8000856:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <SystemClock_Config+0xd4>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <SystemClock_Config+0xd4>)
 8000866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800086a:	6013      	str	r3, [r2, #0]
 800086c:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <SystemClock_Config+0xd4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000886:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800088c:	2319      	movs	r3, #25
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000890:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000894:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000896:	2304      	movs	r3, #4
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800089a:	2307      	movs	r3, #7
 800089c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4618      	mov	r0, r3
 80008a4:	f002 ff90 	bl	80037c8 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008ae:	f000 f8ad 	bl	8000a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	2102      	movs	r1, #2
 80008ce:	4618      	mov	r0, r3
 80008d0:	f003 f9f2 	bl	8003cb8 <HAL_RCC_ClockConfig>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008da:	f000 f897 	bl	8000a0c <Error_Handler>
  }
}
 80008de:	bf00      	nop
 80008e0:	3750      	adds	r7, #80	@ 0x50
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40007000 	.word	0x40007000

080008f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008f6:	4a13      	ldr	r2, [pc, #76]	@ (8000944 <MX_I2C1_Init+0x54>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_I2C1_Init+0x50>)
 80008fc:	4a12      	ldr	r2, [pc, #72]	@ (8000948 <MX_I2C1_Init+0x58>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_I2C1_Init+0x50>)
 800090e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000912:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b0a      	ldr	r3, [pc, #40]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_I2C1_Init+0x50>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000922:	2200      	movs	r2, #0
 8000924:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_I2C1_Init+0x50>)
 8000928:	2200      	movs	r2, #0
 800092a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	@ (8000940 <MX_I2C1_Init+0x50>)
 800092e:	f000 fcd5 	bl	80012dc <HAL_I2C_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000938:	f000 f868 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000170 	.word	0x20000170
 8000944:	40005400 	.word	0x40005400
 8000948:	000186a0 	.word	0x000186a0

0800094c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	@ 0x28
 8000950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a26      	ldr	r2, [pc, #152]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 800096c:	f043 0304 	orr.w	r3, r3, #4
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b24      	ldr	r3, [pc, #144]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0304 	and.w	r3, r3, #4
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a1f      	ldr	r2, [pc, #124]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b1d      	ldr	r3, [pc, #116]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a18      	ldr	r2, [pc, #96]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b16      	ldr	r3, [pc, #88]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b12      	ldr	r3, [pc, #72]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009c0:	f043 0302 	orr.w	r3, r3, #2
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <MX_GPIO_Init+0xb8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0302 	and.w	r3, r3, #2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d8:	480b      	ldr	r0, [pc, #44]	@ (8000a08 <MX_GPIO_Init+0xbc>)
 80009da:	f000 fc65 	bl	80012a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4804      	ldr	r0, [pc, #16]	@ (8000a08 <MX_GPIO_Init+0xbc>)
 80009f8:	f000 fad2 	bl	8000fa0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	@ 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <Error_Handler+0x8>

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	@ 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <HAL_I2C_MspInit+0x84>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d12b      	bne.n	8000ae2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b18      	ldr	r3, [pc, #96]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b15      	ldr	r3, [pc, #84]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0302 	and.w	r3, r3, #2
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000aa6:	23c0      	movs	r3, #192	@ 0xc0
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aaa:	2312      	movs	r3, #18
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab6:	2304      	movs	r3, #4
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <HAL_I2C_MspInit+0x8c>)
 8000ac2:	f000 fa6d 	bl	8000fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	4a08      	ldr	r2, [pc, #32]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad6:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_I2C_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	@ 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <NMI_Handler+0x4>

08000b00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <MemManage_Handler+0x4>

08000b10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4e:	f000 f8d1 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b5c:	4802      	ldr	r0, [pc, #8]	@ (8000b68 <OTG_FS_IRQHandler+0x10>)
 8000b5e:	f001 fd25 	bl	80025ac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000ef4 	.word	0x20000ef4

08000b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b74:	4a14      	ldr	r2, [pc, #80]	@ (8000bc8 <_sbrk+0x5c>)
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <_sbrk+0x60>)
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <_sbrk+0x64>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b88:	4b11      	ldr	r3, [pc, #68]	@ (8000bd0 <_sbrk+0x64>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	@ (8000bd4 <_sbrk+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <_sbrk+0x64>)
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4413      	add	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d207      	bcs.n	8000bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b9c:	f007 fac0 	bl	8008120 <__errno>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e009      	b.n	8000bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bac:	4b08      	ldr	r3, [pc, #32]	@ (8000bd0 <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <_sbrk+0x64>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4413      	add	r3, r2
 8000bba:	4a05      	ldr	r2, [pc, #20]	@ (8000bd0 <_sbrk+0x64>)
 8000bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3718      	adds	r7, #24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20010000 	.word	0x20010000
 8000bcc:	00000400 	.word	0x00000400
 8000bd0:	2000020c 	.word	0x2000020c
 8000bd4:	20001740 	.word	0x20001740

08000bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f007 fa7f 	bl	800812c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fd91 	bl	8000754 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8000c40:	08008b10 	.word	0x08008b10
  ldr r2, =_sbss
 8000c44:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8000c48:	20001740 	.word	0x20001740

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>
	...

08000c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c54:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a0d      	ldr	r2, [pc, #52]	@ (8000c90 <HAL_Init+0x40>)
 8000c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c60:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_Init+0x40>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0a      	ldr	r2, [pc, #40]	@ (8000c90 <HAL_Init+0x40>)
 8000c66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_Init+0x40>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a07      	ldr	r2, [pc, #28]	@ (8000c90 <HAL_Init+0x40>)
 8000c72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f000 f94f 	bl	8000f1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c7e:	200f      	movs	r0, #15
 8000c80:	f000 f808 	bl	8000c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c84:	f7ff fec8 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023c00 	.word	0x40023c00

08000c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <HAL_InitTick+0x54>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <HAL_InitTick+0x58>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 f967 	bl	8000f86 <HAL_SYSTICK_Config>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	e00e      	b.n	8000ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d80a      	bhi.n	8000cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f92f 	bl	8000f32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4a06      	ldr	r2, [pc, #24]	@ (8000cf0 <HAL_InitTick+0x5c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	20000010 	.word	0x20000010
 8000cf0:	2000000c 	.word	0x2000000c

08000cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_IncTick+0x20>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4413      	add	r3, r2
 8000d04:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <HAL_IncTick+0x24>)
 8000d06:	6013      	str	r3, [r2, #0]
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000010 	.word	0x20000010
 8000d18:	20000210 	.word	0x20000210

08000d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d20:	4b03      	ldr	r3, [pc, #12]	@ (8000d30 <HAL_GetTick+0x14>)
 8000d22:	681b      	ldr	r3, [r3, #0]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	20000210 	.word	0x20000210

08000d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d3c:	f7ff ffee 	bl	8000d1c <HAL_GetTick>
 8000d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4c:	d005      	beq.n	8000d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <HAL_Delay+0x44>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d5a:	bf00      	nop
 8000d5c:	f7ff ffde 	bl	8000d1c <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	68fa      	ldr	r2, [r7, #12]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d8f7      	bhi.n	8000d5c <HAL_Delay+0x28>
  {
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000010 	.word	0x20000010

08000d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000da8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dae:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	60d3      	str	r3, [r2, #12]
}
 8000db4:	bf00      	nop
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dc8:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <__NVIC_GetPriorityGrouping+0x18>)
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	f003 0307 	and.w	r3, r3, #7
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db0b      	blt.n	8000e0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	f003 021f 	and.w	r2, r3, #31
 8000df8:	4907      	ldr	r1, [pc, #28]	@ (8000e18 <__NVIC_EnableIRQ+0x38>)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	2001      	movs	r0, #1
 8000e02:	fa00 f202 	lsl.w	r2, r0, r2
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000e100 	.word	0xe000e100

08000e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	6039      	str	r1, [r7, #0]
 8000e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	db0a      	blt.n	8000e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	490c      	ldr	r1, [pc, #48]	@ (8000e68 <__NVIC_SetPriority+0x4c>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	0112      	lsls	r2, r2, #4
 8000e3c:	b2d2      	uxtb	r2, r2
 8000e3e:	440b      	add	r3, r1
 8000e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e44:	e00a      	b.n	8000e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4908      	ldr	r1, [pc, #32]	@ (8000e6c <__NVIC_SetPriority+0x50>)
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	f003 030f 	and.w	r3, r3, #15
 8000e52:	3b04      	subs	r3, #4
 8000e54:	0112      	lsls	r2, r2, #4
 8000e56:	b2d2      	uxtb	r2, r2
 8000e58:	440b      	add	r3, r1
 8000e5a:	761a      	strb	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000e100 	.word	0xe000e100
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b089      	sub	sp, #36	@ 0x24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f003 0307 	and.w	r3, r3, #7
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	f1c3 0307 	rsb	r3, r3, #7
 8000e8a:	2b04      	cmp	r3, #4
 8000e8c:	bf28      	it	cs
 8000e8e:	2304      	movcs	r3, #4
 8000e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3304      	adds	r3, #4
 8000e96:	2b06      	cmp	r3, #6
 8000e98:	d902      	bls.n	8000ea0 <NVIC_EncodePriority+0x30>
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3b03      	subs	r3, #3
 8000e9e:	e000      	b.n	8000ea2 <NVIC_EncodePriority+0x32>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	43da      	mvns	r2, r3
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	401a      	ands	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec2:	43d9      	mvns	r1, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	4313      	orrs	r3, r2
         );
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3724      	adds	r7, #36	@ 0x24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee8:	d301      	bcc.n	8000eee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00f      	b.n	8000f0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eee:	4a0a      	ldr	r2, [pc, #40]	@ (8000f18 <SysTick_Config+0x40>)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ef6:	210f      	movs	r1, #15
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8000efc:	f7ff ff8e 	bl	8000e1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <SysTick_Config+0x40>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f06:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <SysTick_Config+0x40>)
 8000f08:	2207      	movs	r2, #7
 8000f0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	e000e010 	.word	0xe000e010

08000f1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ff29 	bl	8000d7c <__NVIC_SetPriorityGrouping>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b086      	sub	sp, #24
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f44:	f7ff ff3e 	bl	8000dc4 <__NVIC_GetPriorityGrouping>
 8000f48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68b9      	ldr	r1, [r7, #8]
 8000f4e:	6978      	ldr	r0, [r7, #20]
 8000f50:	f7ff ff8e 	bl	8000e70 <NVIC_EncodePriority>
 8000f54:	4602      	mov	r2, r0
 8000f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ff5d 	bl	8000e1c <__NVIC_SetPriority>
}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff31 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ffa2 	bl	8000ed8 <SysTick_Config>
 8000f94:	4603      	mov	r3, r0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e159      	b.n	8001270 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 8148 	bne.w	800126a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80a2 	beq.w	800126a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b57      	ldr	r3, [pc, #348]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a56      	ldr	r2, [pc, #344]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b54      	ldr	r3, [pc, #336]	@ (8001288 <HAL_GPIO_Init+0x2e8>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a52      	ldr	r2, [pc, #328]	@ (800128c <HAL_GPIO_Init+0x2ec>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a49      	ldr	r2, [pc, #292]	@ (8001290 <HAL_GPIO_Init+0x2f0>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d019      	beq.n	80011a2 <HAL_GPIO_Init+0x202>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a48      	ldr	r2, [pc, #288]	@ (8001294 <HAL_GPIO_Init+0x2f4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d013      	beq.n	800119e <HAL_GPIO_Init+0x1fe>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a47      	ldr	r2, [pc, #284]	@ (8001298 <HAL_GPIO_Init+0x2f8>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d00d      	beq.n	800119a <HAL_GPIO_Init+0x1fa>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a46      	ldr	r2, [pc, #280]	@ (800129c <HAL_GPIO_Init+0x2fc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d007      	beq.n	8001196 <HAL_GPIO_Init+0x1f6>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a45      	ldr	r2, [pc, #276]	@ (80012a0 <HAL_GPIO_Init+0x300>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d101      	bne.n	8001192 <HAL_GPIO_Init+0x1f2>
 800118e:	2304      	movs	r3, #4
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001192:	2307      	movs	r3, #7
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x204>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	@ (800128c <HAL_GPIO_Init+0x2ec>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b38      	ldr	r3, [pc, #224]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a2f      	ldr	r2, [pc, #188]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2d      	ldr	r3, [pc, #180]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a24      	ldr	r2, [pc, #144]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001216:	4b23      	ldr	r3, [pc, #140]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123a:	4a1a      	ldr	r2, [pc, #104]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001264:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_GPIO_Init+0x304>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f aea2 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40013800 	.word	0x40013800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40013c00 	.word	0x40013c00

080012a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
 80012b4:	4613      	mov	r3, r2
 80012b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	787b      	ldrb	r3, [r7, #1]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012be:	887a      	ldrh	r2, [r7, #2]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c4:	e003      	b.n	80012ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c6:	887b      	ldrh	r3, [r7, #2]
 80012c8:	041a      	lsls	r2, r3, #16
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	619a      	str	r2, [r3, #24]
}
 80012ce:	bf00      	nop
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
	...

080012dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e12b      	b.n	8001546 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fbb0 	bl	8000a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2224      	movs	r2, #36	@ 0x24
 800130c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800132e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800133e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001340:	f002 fe72 	bl	8004028 <HAL_RCC_GetPCLK1Freq>
 8001344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4a81      	ldr	r2, [pc, #516]	@ (8001550 <HAL_I2C_Init+0x274>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d807      	bhi.n	8001360 <HAL_I2C_Init+0x84>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4a80      	ldr	r2, [pc, #512]	@ (8001554 <HAL_I2C_Init+0x278>)
 8001354:	4293      	cmp	r3, r2
 8001356:	bf94      	ite	ls
 8001358:	2301      	movls	r3, #1
 800135a:	2300      	movhi	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	e006      	b.n	800136e <HAL_I2C_Init+0x92>
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4a7d      	ldr	r2, [pc, #500]	@ (8001558 <HAL_I2C_Init+0x27c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	bf94      	ite	ls
 8001368:	2301      	movls	r3, #1
 800136a:	2300      	movhi	r3, #0
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e0e7      	b.n	8001546 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4a78      	ldr	r2, [pc, #480]	@ (800155c <HAL_I2C_Init+0x280>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0c9b      	lsrs	r3, r3, #18
 8001380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	430a      	orrs	r2, r1
 8001394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6a1b      	ldr	r3, [r3, #32]
 800139c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a6a      	ldr	r2, [pc, #424]	@ (8001550 <HAL_I2C_Init+0x274>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d802      	bhi.n	80013b0 <HAL_I2C_Init+0xd4>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	3301      	adds	r3, #1
 80013ae:	e009      	b.n	80013c4 <HAL_I2C_Init+0xe8>
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4a69      	ldr	r2, [pc, #420]	@ (8001560 <HAL_I2C_Init+0x284>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	099b      	lsrs	r3, r3, #6
 80013c2:	3301      	adds	r3, #1
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	6812      	ldr	r2, [r2, #0]
 80013c8:	430b      	orrs	r3, r1
 80013ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	495c      	ldr	r1, [pc, #368]	@ (8001550 <HAL_I2C_Init+0x274>)
 80013e0:	428b      	cmp	r3, r1
 80013e2:	d819      	bhi.n	8001418 <HAL_I2C_Init+0x13c>
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1e59      	subs	r1, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80013f2:	1c59      	adds	r1, r3, #1
 80013f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80013f8:	400b      	ands	r3, r1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00a      	beq.n	8001414 <HAL_I2C_Init+0x138>
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	1e59      	subs	r1, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fbb1 f3f3 	udiv	r3, r1, r3
 800140c:	3301      	adds	r3, #1
 800140e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001412:	e051      	b.n	80014b8 <HAL_I2C_Init+0x1dc>
 8001414:	2304      	movs	r3, #4
 8001416:	e04f      	b.n	80014b8 <HAL_I2C_Init+0x1dc>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d111      	bne.n	8001444 <HAL_I2C_Init+0x168>
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1e58      	subs	r0, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6859      	ldr	r1, [r3, #4]
 8001428:	460b      	mov	r3, r1
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	440b      	add	r3, r1
 800142e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001432:	3301      	adds	r3, #1
 8001434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf0c      	ite	eq
 800143c:	2301      	moveq	r3, #1
 800143e:	2300      	movne	r3, #0
 8001440:	b2db      	uxtb	r3, r3
 8001442:	e012      	b.n	800146a <HAL_I2C_Init+0x18e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1e58      	subs	r0, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6859      	ldr	r1, [r3, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	0099      	lsls	r1, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	fbb0 f3f3 	udiv	r3, r0, r3
 800145a:	3301      	adds	r3, #1
 800145c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf0c      	ite	eq
 8001464:	2301      	moveq	r3, #1
 8001466:	2300      	movne	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_I2C_Init+0x196>
 800146e:	2301      	movs	r3, #1
 8001470:	e022      	b.n	80014b8 <HAL_I2C_Init+0x1dc>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10e      	bne.n	8001498 <HAL_I2C_Init+0x1bc>
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	1e58      	subs	r0, r3, #1
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6859      	ldr	r1, [r3, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	440b      	add	r3, r1
 8001488:	fbb0 f3f3 	udiv	r3, r0, r3
 800148c:	3301      	adds	r3, #1
 800148e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001496:	e00f      	b.n	80014b8 <HAL_I2C_Init+0x1dc>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	1e58      	subs	r0, r3, #1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6859      	ldr	r1, [r3, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	440b      	add	r3, r1
 80014a6:	0099      	lsls	r1, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ae:	3301      	adds	r3, #1
 80014b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	6809      	ldr	r1, [r1, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69da      	ldr	r2, [r3, #28]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1b      	ldr	r3, [r3, #32]
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6911      	ldr	r1, [r2, #16]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	68d2      	ldr	r2, [r2, #12]
 80014f2:	4311      	orrs	r1, r2
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	6812      	ldr	r2, [r2, #0]
 80014f8:	430b      	orrs	r3, r1
 80014fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695a      	ldr	r2, [r3, #20]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f042 0201 	orr.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2220      	movs	r2, #32
 8001532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	000186a0 	.word	0x000186a0
 8001554:	001e847f 	.word	0x001e847f
 8001558:	003d08ff 	.word	0x003d08ff
 800155c:	431bde83 	.word	0x431bde83
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af02      	add	r7, sp, #8
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	4608      	mov	r0, r1
 800156e:	4611      	mov	r1, r2
 8001570:	461a      	mov	r2, r3
 8001572:	4603      	mov	r3, r0
 8001574:	817b      	strh	r3, [r7, #10]
 8001576:	460b      	mov	r3, r1
 8001578:	813b      	strh	r3, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800157e:	f7ff fbcd 	bl	8000d1c <HAL_GetTick>
 8001582:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b20      	cmp	r3, #32
 800158e:	f040 80d9 	bne.w	8001744 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2319      	movs	r3, #25
 8001598:	2201      	movs	r2, #1
 800159a:	496d      	ldr	r1, [pc, #436]	@ (8001750 <HAL_I2C_Mem_Write+0x1ec>)
 800159c:	68f8      	ldr	r0, [r7, #12]
 800159e:	f000 fc8b 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015a8:	2302      	movs	r3, #2
 80015aa:	e0cc      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_I2C_Mem_Write+0x56>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0c5      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d007      	beq.n	80015e0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2221      	movs	r2, #33	@ 0x21
 80015f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2240      	movs	r2, #64	@ 0x40
 80015fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001610:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4a4d      	ldr	r2, [pc, #308]	@ (8001754 <HAL_I2C_Mem_Write+0x1f0>)
 8001620:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001622:	88f8      	ldrh	r0, [r7, #6]
 8001624:	893a      	ldrh	r2, [r7, #8]
 8001626:	8979      	ldrh	r1, [r7, #10]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f000 fac2 	bl	8001bbc <I2C_RequestMemoryWrite>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d052      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e081      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001642:	697a      	ldr	r2, [r7, #20]
 8001644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 fd50 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d00d      	beq.n	800166e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	2b04      	cmp	r3, #4
 8001658:	d107      	bne.n	800166a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001668:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e06b      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	781a      	ldrb	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	1c5a      	adds	r2, r3, #1
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001688:	3b01      	subs	r3, #1
 800168a:	b29a      	uxth	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001694:	b29b      	uxth	r3, r3
 8001696:	3b01      	subs	r3, #1
 8001698:	b29a      	uxth	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b04      	cmp	r3, #4
 80016aa:	d11b      	bne.n	80016e4 <HAL_I2C_Mem_Write+0x180>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d017      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016da:	b29b      	uxth	r3, r3
 80016dc:	3b01      	subs	r3, #1
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1aa      	bne.n	8001642 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	f000 fd43 	bl	800217c <I2C_WaitOnBTFFlagUntilTimeout>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	2b04      	cmp	r3, #4
 8001702:	d107      	bne.n	8001714 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001712:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e016      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2220      	movs	r2, #32
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	e000      	b.n	8001746 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001744:	2302      	movs	r3, #2
  }
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	00100002 	.word	0x00100002
 8001754:	ffff0000 	.word	0xffff0000

08001758 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	@ 0x30
 800175c:	af02      	add	r7, sp, #8
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	4608      	mov	r0, r1
 8001762:	4611      	mov	r1, r2
 8001764:	461a      	mov	r2, r3
 8001766:	4603      	mov	r3, r0
 8001768:	817b      	strh	r3, [r7, #10]
 800176a:	460b      	mov	r3, r1
 800176c:	813b      	strh	r3, [r7, #8]
 800176e:	4613      	mov	r3, r2
 8001770:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001772:	f7ff fad3 	bl	8000d1c <HAL_GetTick>
 8001776:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b20      	cmp	r3, #32
 8001782:	f040 8214 	bne.w	8001bae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2319      	movs	r3, #25
 800178c:	2201      	movs	r2, #1
 800178e:	497b      	ldr	r1, [pc, #492]	@ (800197c <HAL_I2C_Mem_Read+0x224>)
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 fb91 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800179c:	2302      	movs	r3, #2
 800179e:	e207      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d101      	bne.n	80017ae <HAL_I2C_Mem_Read+0x56>
 80017aa:	2302      	movs	r3, #2
 80017ac:	e200      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d007      	beq.n	80017d4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f042 0201 	orr.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2222      	movs	r2, #34	@ 0x22
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2240      	movs	r2, #64	@ 0x40
 80017f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2200      	movs	r2, #0
 80017f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4a5b      	ldr	r2, [pc, #364]	@ (8001980 <HAL_I2C_Mem_Read+0x228>)
 8001814:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001816:	88f8      	ldrh	r0, [r7, #6]
 8001818:	893a      	ldrh	r2, [r7, #8]
 800181a:	8979      	ldrh	r1, [r7, #10]
 800181c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 fa5e 	bl	8001ce8 <I2C_RequestMemoryRead>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e1bc      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800183a:	2b00      	cmp	r3, #0
 800183c:	d113      	bne.n	8001866 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	623b      	str	r3, [r7, #32]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	623b      	str	r3, [r7, #32]
 8001852:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	e190      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800186a:	2b01      	cmp	r3, #1
 800186c:	d11b      	bne.n	80018a6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800187c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	61fb      	str	r3, [r7, #28]
 8001892:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	e170      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d11b      	bne.n	80018e6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80018bc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80018cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ce:	2300      	movs	r3, #0
 80018d0:	61bb      	str	r3, [r7, #24]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	61bb      	str	r3, [r7, #24]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	e150      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80018fc:	e144      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001902:	2b03      	cmp	r3, #3
 8001904:	f200 80f1 	bhi.w	8001aea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800190c:	2b01      	cmp	r3, #1
 800190e:	d123      	bne.n	8001958 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001912:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001914:	68f8      	ldr	r0, [r7, #12]
 8001916:	f000 fc79 	bl	800220c <I2C_WaitOnRXNEFlagUntilTimeout>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e145      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001940:	3b01      	subs	r3, #1
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800194c:	b29b      	uxth	r3, r3
 800194e:	3b01      	subs	r3, #1
 8001950:	b29a      	uxth	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001956:	e117      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800195c:	2b02      	cmp	r3, #2
 800195e:	d14e      	bne.n	80019fe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001962:	9300      	str	r3, [sp, #0]
 8001964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001966:	2200      	movs	r2, #0
 8001968:	4906      	ldr	r1, [pc, #24]	@ (8001984 <HAL_I2C_Mem_Read+0x22c>)
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 faa4 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d008      	beq.n	8001988 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e11a      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
 800197a:	bf00      	nop
 800197c:	00100002 	.word	0x00100002
 8001980:	ffff0000 	.word	0xffff0000
 8001984:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001996:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	691a      	ldr	r2, [r3, #16]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	3b01      	subs	r3, #1
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019dc:	1c5a      	adds	r2, r3, #1
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80019fc:	e0c4      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a04:	2200      	movs	r2, #0
 8001a06:	496c      	ldr	r1, [pc, #432]	@ (8001bb8 <HAL_I2C_Mem_Read+0x460>)
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fa55 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0cb      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	691a      	ldr	r2, [r3, #16]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a44:	3b01      	subs	r3, #1
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	3b01      	subs	r3, #1
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a60:	2200      	movs	r2, #0
 8001a62:	4955      	ldr	r1, [pc, #340]	@ (8001bb8 <HAL_I2C_Mem_Read+0x460>)
 8001a64:	68f8      	ldr	r0, [r7, #12]
 8001a66:	f000 fa27 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e09d      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	b29a      	uxth	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	691a      	ldr	r2, [r3, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ae8:	e04e      	b.n	8001b88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fb8c 	bl	800220c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e058      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	691a      	ldr	r2, [r3, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d124      	bne.n	8001b88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d107      	bne.n	8001b56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f47f aeb6 	bne.w	80018fe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2220      	movs	r2, #32
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e000      	b.n	8001bb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001bae:	2302      	movs	r3, #2
  }
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3728      	adds	r7, #40	@ 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	00010004 	.word	0x00010004

08001bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af02      	add	r7, sp, #8
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	4608      	mov	r0, r1
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	817b      	strh	r3, [r7, #10]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	813b      	strh	r3, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	6a3b      	ldr	r3, [r7, #32]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 f960 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00d      	beq.n	8001c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c0c:	d103      	bne.n	8001c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e05f      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	6a3a      	ldr	r2, [r7, #32]
 8001c2e:	492d      	ldr	r1, [pc, #180]	@ (8001ce4 <I2C_RequestMemoryWrite+0x128>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 f9bb 	bl	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e04c      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c58:	6a39      	ldr	r1, [r7, #32]
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 fa46 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	d107      	bne.n	8001c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e02b      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c88:	893b      	ldrh	r3, [r7, #8]
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	e021      	b.n	8001cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c94:	893b      	ldrh	r3, [r7, #8]
 8001c96:	0a1b      	lsrs	r3, r3, #8
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	6a39      	ldr	r1, [r7, #32]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fa20 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00d      	beq.n	8001cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	d107      	bne.n	8001cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e005      	b.n	8001cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001cce:	893b      	ldrh	r3, [r7, #8]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	00010002 	.word	0x00010002

08001ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	4608      	mov	r0, r1
 8001cf2:	4611      	mov	r1, r2
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	817b      	strh	r3, [r7, #10]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	813b      	strh	r3, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f8c2 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00d      	beq.n	8001d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d48:	d103      	bne.n	8001d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e0aa      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d56:	897b      	ldrh	r3, [r7, #10]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	6a3a      	ldr	r2, [r7, #32]
 8001d6a:	4952      	ldr	r1, [pc, #328]	@ (8001eb4 <I2C_RequestMemoryRead+0x1cc>)
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 f91d 	bl	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e097      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d94:	6a39      	ldr	r1, [r7, #32]
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f000 f9a8 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00d      	beq.n	8001dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d107      	bne.n	8001dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e076      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001dc4:	893b      	ldrh	r3, [r7, #8]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	611a      	str	r2, [r3, #16]
 8001dce:	e021      	b.n	8001e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001dd0:	893b      	ldrh	r3, [r7, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001de0:	6a39      	ldr	r1, [r7, #32]
 8001de2:	68f8      	ldr	r0, [r7, #12]
 8001de4:	f000 f982 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d107      	bne.n	8001e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e050      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e0a:	893b      	ldrh	r3, [r7, #8]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f967 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d00d      	beq.n	8001e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e035      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 f82b 	bl	8001eb8 <I2C_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00d      	beq.n	8001e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e76:	d103      	bne.n	8001e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e013      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001e84:	897b      	ldrh	r3, [r7, #10]
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	6a3a      	ldr	r2, [r7, #32]
 8001e98:	4906      	ldr	r1, [pc, #24]	@ (8001eb4 <I2C_RequestMemoryRead+0x1cc>)
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 f886 	bl	8001fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3718      	adds	r7, #24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	00010002 	.word	0x00010002

08001eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec8:	e048      	b.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d044      	beq.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7fe ff23 	bl	8000d1c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d302      	bcc.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d139      	bne.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	0c1b      	lsrs	r3, r3, #16
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d10d      	bne.n	8001f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	43da      	mvns	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	4013      	ands	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	bf0c      	ite	eq
 8001f04:	2301      	moveq	r3, #1
 8001f06:	2300      	movne	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	e00c      	b.n	8001f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	43da      	mvns	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d116      	bne.n	8001f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e023      	b.n	8001fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	0c1b      	lsrs	r3, r3, #16
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d10d      	bne.n	8001f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	4013      	ands	r3, r2
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	bf0c      	ite	eq
 8001f78:	2301      	moveq	r3, #1
 8001f7a:	2300      	movne	r3, #0
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	e00c      	b.n	8001f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	43da      	mvns	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d093      	beq.n	8001eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fba:	e071      	b.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fca:	d123      	bne.n	8002014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2220      	movs	r2, #32
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f043 0204 	orr.w	r2, r3, #4
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e067      	b.n	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d041      	beq.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800201c:	f7fe fe7e 	bl	8000d1c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d136      	bne.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10c      	bne.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4013      	ands	r3, r2
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	bf14      	ite	ne
 800204e:	2301      	movne	r3, #1
 8002050:	2300      	moveq	r3, #0
 8002052:	b2db      	uxtb	r3, r3
 8002054:	e00b      	b.n	800206e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	43da      	mvns	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	4013      	ands	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf14      	ite	ne
 8002068:	2301      	movne	r3, #1
 800206a:	2300      	moveq	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2220      	movs	r2, #32
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0220 	orr.w	r2, r3, #32
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e021      	b.n	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10c      	bne.n	80020c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	e00b      	b.n	80020dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	43da      	mvns	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4013      	ands	r3, r2
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f af6d 	bne.w	8001fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f8:	e034      	b.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f8e3 	bl	80022c6 <I2C_IsAcknowledgeFailed>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e034      	b.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d028      	beq.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7fe fe03 	bl	8000d1c <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d11d      	bne.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002132:	2b80      	cmp	r3, #128	@ 0x80
 8002134:	d016      	beq.n	8002164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2220      	movs	r2, #32
 8002140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e007      	b.n	8002174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216e:	2b80      	cmp	r3, #128	@ 0x80
 8002170:	d1c3      	bne.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002188:	e034      	b.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 f89b 	bl	80022c6 <I2C_IsAcknowledgeFailed>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e034      	b.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a0:	d028      	beq.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a2:	f7fe fdbb 	bl	8000d1c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d302      	bcc.n	80021b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d11d      	bne.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d016      	beq.n	80021f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f043 0220 	orr.w	r2, r3, #32
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e007      	b.n	8002204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d1c3      	bne.n	800218a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002218:	e049      	b.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b10      	cmp	r3, #16
 8002226:	d119      	bne.n	800225c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0210 	mvn.w	r2, #16
 8002230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2220      	movs	r2, #32
 800223c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e030      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225c:	f7fe fd5e 	bl	8000d1c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d302      	bcc.n	8002272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d11d      	bne.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800227c:	2b40      	cmp	r3, #64	@ 0x40
 800227e:	d016      	beq.n	80022ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e007      	b.n	80022be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d1ae      	bne.n	800221a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022dc:	d11b      	bne.n	8002316 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af02      	add	r7, sp, #8
 800232a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e101      	b.n	800253a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f005 fbb3 	bl	8007abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002364:	d102      	bne.n	800236c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4618      	mov	r0, r3
 8002372:	f001 ff84 	bl	800427e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6818      	ldr	r0, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7c1a      	ldrb	r2, [r3, #16]
 800237e:	f88d 2000 	strb.w	r2, [sp]
 8002382:	3304      	adds	r3, #4
 8002384:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002386:	f001 fe63 	bl	8004050 <USB_CoreInit>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2202      	movs	r2, #2
 8002394:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0ce      	b.n	800253a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 ff7c 	bl	80042a0 <USB_SetCurrentMode>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2202      	movs	r2, #2
 80023b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0bf      	b.n	800253a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e04a      	b.n	8002456 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	3315      	adds	r3, #21
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023d4:	7bfa      	ldrb	r2, [r7, #15]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3314      	adds	r3, #20
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	b298      	uxth	r0, r3
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	4413      	add	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	332e      	adds	r3, #46	@ 0x2e
 80023fc:	4602      	mov	r2, r0
 80023fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002400:	7bfa      	ldrb	r2, [r7, #15]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3318      	adds	r3, #24
 8002410:	2200      	movs	r2, #0
 8002412:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002414:	7bfa      	ldrb	r2, [r7, #15]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	331c      	adds	r3, #28
 8002424:	2200      	movs	r2, #0
 8002426:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002428:	7bfa      	ldrb	r2, [r7, #15]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3320      	adds	r3, #32
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800243c:	7bfa      	ldrb	r2, [r7, #15]
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	440b      	add	r3, r1
 800244a:	3324      	adds	r3, #36	@ 0x24
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002450:	7bfb      	ldrb	r3, [r7, #15]
 8002452:	3301      	adds	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	791b      	ldrb	r3, [r3, #4]
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	429a      	cmp	r2, r3
 800245e:	d3af      	bcc.n	80023c0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002460:	2300      	movs	r3, #0
 8002462:	73fb      	strb	r3, [r7, #15]
 8002464:	e044      	b.n	80024f0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002466:	7bfa      	ldrb	r2, [r7, #15]
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	440b      	add	r3, r1
 8002474:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800248e:	7bfa      	ldrb	r2, [r7, #15]
 8002490:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002492:	7bfa      	ldrb	r2, [r7, #15]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a8:	7bfa      	ldrb	r2, [r7, #15]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4413      	add	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	4413      	add	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	440b      	add	r3, r1
 80024cc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
 80024ec:	3301      	adds	r3, #1
 80024ee:	73fb      	strb	r3, [r7, #15]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	791b      	ldrb	r3, [r3, #4]
 80024f4:	7bfa      	ldrb	r2, [r7, #15]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d3b5      	bcc.n	8002466 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	7c1a      	ldrb	r2, [r3, #16]
 8002502:	f88d 2000 	strb.w	r2, [sp]
 8002506:	3304      	adds	r3, #4
 8002508:	cb0e      	ldmia	r3, {r1, r2, r3}
 800250a:	f001 ff15 	bl	8004338 <USB_DevInit>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e00c      	b.n	800253a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 ff5f 	bl	80053f6 <USB_DevDisconnect>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_PCD_Start+0x1c>
 800255a:	2302      	movs	r3, #2
 800255c:	e022      	b.n	80025a4 <HAL_PCD_Start+0x62>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800256e:	2b00      	cmp	r3, #0
 8002570:	d009      	beq.n	8002586 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002576:	2b01      	cmp	r3, #1
 8002578:	d105      	bne.n	8002586 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800257e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f001 fe66 	bl	800425c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 ff0d 	bl	80053b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b08d      	sub	sp, #52	@ 0x34
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025ba:	6a3b      	ldr	r3, [r7, #32]
 80025bc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f002 ffcb 	bl	800555e <USB_GetMode>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f040 848c 	bne.w	8002ee8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 ff2f 	bl	8005438 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8482 	beq.w	8002ee6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 ff1c 	bl	8005438 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f002 0202 	and.w	r2, r2, #2
 8002618:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f002 ff0a 	bl	8005438 <USB_ReadInterrupts>
 8002624:	4603      	mov	r3, r0
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2b10      	cmp	r3, #16
 800262c:	d161      	bne.n	80026f2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0210 	bic.w	r2, r2, #16
 800263c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f003 020f 	and.w	r2, r3, #15
 800264a:	4613      	mov	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	3304      	adds	r3, #4
 800265c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	0c5b      	lsrs	r3, r3, #17
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	2b02      	cmp	r3, #2
 8002668:	d124      	bne.n	80026b4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d035      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002680:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002684:	b29b      	uxth	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	6a38      	ldr	r0, [r7, #32]
 800268a:	f002 fd41 	bl	8005110 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800269a:	441a      	add	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026ac:	441a      	add	r2, r3
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	615a      	str	r2, [r3, #20]
 80026b2:	e016      	b.n	80026e2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	0c5b      	lsrs	r3, r3, #17
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2b06      	cmp	r3, #6
 80026be:	d110      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026c6:	2208      	movs	r2, #8
 80026c8:	4619      	mov	r1, r3
 80026ca:	6a38      	ldr	r0, [r7, #32]
 80026cc:	f002 fd20 	bl	8005110 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	091b      	lsrs	r3, r3, #4
 80026d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026dc:	441a      	add	r2, r3
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f042 0210 	orr.w	r2, r2, #16
 80026f0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f002 fe9e 	bl	8005438 <USB_ReadInterrupts>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002702:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002706:	f040 80a7 	bne.w	8002858 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f002 fea3 	bl	800545e <USB_ReadDevAllOutEpInterrupt>
 8002718:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800271a:	e099      	b.n	8002850 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808e 	beq.w	8002844 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	4611      	mov	r1, r2
 8002732:	4618      	mov	r0, r3
 8002734:	f002 fec7 	bl	80054c6 <USB_ReadDevOutEPInterrupt>
 8002738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002750:	461a      	mov	r2, r3
 8002752:	2301      	movs	r3, #1
 8002754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002756:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 fea3 	bl	80034a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00c      	beq.n	8002782 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	4413      	add	r3, r2
 8002770:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002774:	461a      	mov	r2, r3
 8002776:	2308      	movs	r3, #8
 8002778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800277a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 ff79 	bl	8003674 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	4413      	add	r3, r2
 8002794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002798:	461a      	mov	r2, r3
 800279a:	2310      	movs	r3, #16
 800279c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d030      	beq.n	800280a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b0:	2b80      	cmp	r3, #128	@ 0x80
 80027b2:	d109      	bne.n	80027c8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027c6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	3304      	adds	r3, #4
 80027dc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	78db      	ldrb	r3, [r3, #3]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d108      	bne.n	80027f8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	4619      	mov	r1, r3
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f005 fa5e 	bl	8007cb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002804:	461a      	mov	r2, r3
 8002806:	2302      	movs	r3, #2
 8002808:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	f003 0320 	and.w	r3, r3, #32
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002820:	461a      	mov	r2, r3
 8002822:	2320      	movs	r3, #32
 8002824:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d009      	beq.n	8002844 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	015a      	lsls	r2, r3, #5
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	4413      	add	r3, r2
 8002838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800283c:	461a      	mov	r2, r3
 800283e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002842:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	3301      	adds	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	085b      	lsrs	r3, r3, #1
 800284e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002852:	2b00      	cmp	r3, #0
 8002854:	f47f af62 	bne.w	800271c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f002 fdeb 	bl	8005438 <USB_ReadInterrupts>
 8002862:	4603      	mov	r3, r0
 8002864:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800286c:	f040 80db 	bne.w	8002a26 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f002 fe0c 	bl	8005492 <USB_ReadDevAllInEpInterrupt>
 800287a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002880:	e0cd      	b.n	8002a1e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80c2 	beq.w	8002a12 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f002 fe32 	bl	8005502 <USB_ReadDevInEPInterrupt>
 800289e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d057      	beq.n	800295a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	f003 030f 	and.w	r3, r3, #15
 80028b0:	2201      	movs	r2, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69f9      	ldr	r1, [r7, #28]
 80028c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028ca:	4013      	ands	r3, r2
 80028cc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028da:	461a      	mov	r2, r3
 80028dc:	2301      	movs	r3, #1
 80028de:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	799b      	ldrb	r3, [r3, #6]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d132      	bne.n	800294e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	4613      	mov	r3, r2
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	4413      	add	r3, r2
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	440b      	add	r3, r1
 80028f6:	3320      	adds	r3, #32
 80028f8:	6819      	ldr	r1, [r3, #0]
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fe:	4613      	mov	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4403      	add	r3, r0
 8002908:	331c      	adds	r3, #28
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4419      	add	r1, r3
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4403      	add	r3, r0
 800291c:	3320      	adds	r3, #32
 800291e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	2b00      	cmp	r3, #0
 8002924:	d113      	bne.n	800294e <HAL_PCD_IRQHandler+0x3a2>
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800292a:	4613      	mov	r3, r2
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	3324      	adds	r3, #36	@ 0x24
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d108      	bne.n	800294e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002946:	461a      	mov	r2, r3
 8002948:	2101      	movs	r1, #1
 800294a:	f002 fe39 	bl	80055c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	b2db      	uxtb	r3, r3
 8002952:	4619      	mov	r1, r3
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f005 f932 	bl	8007bbe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002970:	461a      	mov	r2, r3
 8002972:	2308      	movs	r3, #8
 8002974:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	4413      	add	r3, r2
 8002988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800298c:	461a      	mov	r2, r3
 800298e:	2310      	movs	r3, #16
 8002990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029a8:	461a      	mov	r2, r3
 80029aa:	2340      	movs	r3, #64	@ 0x40
 80029ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ba:	6a38      	ldr	r0, [r7, #32]
 80029bc:	f001 fe20 	bl	8004600 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	3310      	adds	r3, #16
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	4413      	add	r3, r2
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	78db      	ldrb	r3, [r3, #3]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d108      	bne.n	80029ee <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2200      	movs	r2, #0
 80029e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4619      	mov	r1, r3
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f005 f975 	bl	8007cd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	015a      	lsls	r2, r3, #5
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	4413      	add	r3, r2
 80029f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029fa:	461a      	mov	r2, r3
 80029fc:	2302      	movs	r3, #2
 80029fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 fcbd 	bl	800338c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a1a:	085b      	lsrs	r3, r3, #1
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f47f af2e 	bne.w	8002882 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f002 fd04 	bl	8005438 <USB_ReadInterrupts>
 8002a30:	4603      	mov	r3, r0
 8002a32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a3a:	d122      	bne.n	8002a82 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d108      	bne.n	8002a6c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a62:	2100      	movs	r1, #0
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fea3 	bl	80037b0 <HAL_PCDEx_LPM_Callback>
 8002a6a:	e002      	b.n	8002a72 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f005 f913 	bl	8007c98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fcd6 	bl	8005438 <USB_ReadInterrupts>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a96:	d112      	bne.n	8002abe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d102      	bne.n	8002aae <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f005 f8cf 	bl	8007c4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002abc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f002 fcb8 	bl	8005438 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ace:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ad2:	f040 80b7 	bne.w	8002c44 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ae4:	f023 0301 	bic.w	r3, r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2110      	movs	r1, #16
 8002af0:	4618      	mov	r0, r3
 8002af2:	f001 fd85 	bl	8004600 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002afa:	e046      	b.n	8002b8a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002afc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b08:	461a      	mov	r2, r3
 8002b0a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b0e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b20:	0151      	lsls	r1, r2, #5
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	440a      	add	r2, r1
 8002b26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b2e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b42:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b54:	0151      	lsls	r1, r2, #5
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	440a      	add	r2, r1
 8002b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b5e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b74:	0151      	lsls	r1, r2, #5
 8002b76:	69fa      	ldr	r2, [r7, #28]
 8002b78:	440a      	add	r2, r1
 8002b7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b82:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b86:	3301      	adds	r3, #1
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	791b      	ldrb	r3, [r3, #4]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d3b2      	bcc.n	8002afc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ba4:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002ba8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	7bdb      	ldrb	r3, [r3, #15]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d016      	beq.n	8002be0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc2:	f043 030b 	orr.w	r3, r3, #11
 8002bc6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd8:	f043 030b 	orr.w	r3, r3, #11
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	e015      	b.n	8002c0c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bf2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bf6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c06:	f043 030b 	orr.w	r3, r3, #11
 8002c0a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c1e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f002 fcc6 	bl	80055c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f002 fbf5 	bl	8005438 <USB_ReadInterrupts>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c58:	d123      	bne.n	8002ca2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f002 fc8b 	bl	800557a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f001 fd42 	bl	80046f2 <USB_GetDevSpeed>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681c      	ldr	r4, [r3, #0]
 8002c7a:	f001 f9c9 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8002c7e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c84:	461a      	mov	r2, r3
 8002c86:	4620      	mov	r0, r4
 8002c88:	f001 fa46 	bl	8004118 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f004 ffbe 	bl	8007c0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ca0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fbc6 	bl	8005438 <USB_ReadInterrupts>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d10a      	bne.n	8002ccc <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f004 ff9b 	bl	8007bf2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f002 0208 	and.w	r2, r2, #8
 8002cca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fbb1 	bl	8005438 <USB_ReadInterrupts>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cdc:	2b80      	cmp	r3, #128	@ 0x80
 8002cde:	d123      	bne.n	8002d28 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cec:	2301      	movs	r3, #1
 8002cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cf0:	e014      	b.n	8002d1c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d105      	bne.n	8002d16 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4619      	mov	r1, r3
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fb0a 	bl	800332a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	3301      	adds	r3, #1
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	791b      	ldrb	r3, [r3, #4]
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d3e4      	bcc.n	8002cf2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 fb83 	bl	8005438 <USB_ReadInterrupts>
 8002d32:	4603      	mov	r3, r0
 8002d34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d3c:	d13c      	bne.n	8002db8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d3e:	2301      	movs	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d42:	e02b      	b.n	8002d9c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3318      	adds	r3, #24
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d115      	bne.n	8002d96 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d6a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	da12      	bge.n	8002d96 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d74:	4613      	mov	r3, r2
 8002d76:	00db      	lsls	r3, r3, #3
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	3317      	adds	r3, #23
 8002d80:	2201      	movs	r2, #1
 8002d82:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 faca 	bl	800332a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	3301      	adds	r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	791b      	ldrb	r3, [r3, #4]
 8002da0:	461a      	mov	r2, r3
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d3cd      	bcc.n	8002d44 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f002 fb3b 	bl	8005438 <USB_ReadInterrupts>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002dcc:	d156      	bne.n	8002e7c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002dce:	2301      	movs	r3, #1
 8002dd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dd2:	e045      	b.n	8002e60 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	015a      	lsls	r2, r3, #5
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d12e      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dfc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da2b      	bge.n	8002e5a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002e0e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d121      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10a      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e56:	6053      	str	r3, [r2, #4]
            break;
 8002e58:	e008      	b.n	8002e6c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	791b      	ldrb	r3, [r3, #4]
 8002e64:	461a      	mov	r2, r3
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d3b3      	bcc.n	8002dd4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695a      	ldr	r2, [r3, #20]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f002 fad9 	bl	8005438 <USB_ReadInterrupts>
 8002e86:	4603      	mov	r3, r0
 8002e88:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e90:	d10a      	bne.n	8002ea8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f004 ff32 	bl	8007cfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002ea6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fac3 	bl	8005438 <USB_ReadInterrupts>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d115      	bne.n	8002ee8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f004 ff22 	bl	8007d18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]
 8002ee4:	e000      	b.n	8002ee8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ee6:	bf00      	nop
    }
  }
}
 8002ee8:	3734      	adds	r7, #52	@ 0x34
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}

08002eee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d101      	bne.n	8002f08 <HAL_PCD_SetAddress+0x1a>
 8002f04:	2302      	movs	r3, #2
 8002f06:	e012      	b.n	8002f2e <HAL_PCD_SetAddress+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f002 fa22 	bl	8005368 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	4608      	mov	r0, r1
 8002f40:	4611      	mov	r1, r2
 8002f42:	461a      	mov	r2, r3
 8002f44:	4603      	mov	r3, r0
 8002f46:	70fb      	strb	r3, [r7, #3]
 8002f48:	460b      	mov	r3, r1
 8002f4a:	803b      	strh	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	da0f      	bge.n	8002f7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f003 020f 	and.w	r2, r3, #15
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	3310      	adds	r3, #16
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	4413      	add	r3, r2
 8002f70:	3304      	adds	r3, #4
 8002f72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	705a      	strb	r2, [r3, #1]
 8002f7a:	e00f      	b.n	8002f9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	f003 020f 	and.w	r2, r3, #15
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f9c:	78fb      	ldrb	r3, [r7, #3]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002fa8:	883b      	ldrh	r3, [r7, #0]
 8002faa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	78ba      	ldrb	r2, [r7, #2]
 8002fb6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fca:	78bb      	ldrb	r3, [r7, #2]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d102      	bne.n	8002fd6 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_PCD_EP_Open+0xae>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e00e      	b.n	8003002 <HAL_PCD_EP_Open+0xcc>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 fba2 	bl	800473c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003000:	7afb      	ldrb	r3, [r7, #11]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3710      	adds	r7, #16
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	460b      	mov	r3, r1
 8003014:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da0f      	bge.n	800303e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3310      	adds	r3, #16
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
 800303c:	e00f      	b.n	800305e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	b2da      	uxtb	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003070:	2b01      	cmp	r3, #1
 8003072:	d101      	bne.n	8003078 <HAL_PCD_EP_Close+0x6e>
 8003074:	2302      	movs	r3, #2
 8003076:	e00e      	b.n	8003096 <HAL_PCD_EP_Close+0x8c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68f9      	ldr	r1, [r7, #12]
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fbe0 	bl	800484c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b086      	sub	sp, #24
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	60f8      	str	r0, [r7, #12]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
 80030aa:	460b      	mov	r3, r1
 80030ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ae:	7afb      	ldrb	r3, [r7, #11]
 80030b0:	f003 020f 	and.w	r2, r3, #15
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2200      	movs	r2, #0
 80030d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030e0:	7afb      	ldrb	r3, [r7, #11]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	799b      	ldrb	r3, [r3, #6]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d102      	bne.n	80030fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	799b      	ldrb	r3, [r3, #6]
 8003102:	461a      	mov	r2, r3
 8003104:	6979      	ldr	r1, [r7, #20]
 8003106:	f001 fc7d 	bl	8004a04 <USB_EPStartXfer>

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	f003 020f 	and.w	r2, r3, #15
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003136:	681b      	ldr	r3, [r3, #0]
}
 8003138:	4618      	mov	r0, r3
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	607a      	str	r2, [r7, #4]
 800314e:	603b      	str	r3, [r7, #0]
 8003150:	460b      	mov	r3, r1
 8003152:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003154:	7afb      	ldrb	r3, [r7, #11]
 8003156:	f003 020f 	and.w	r2, r3, #15
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	3310      	adds	r3, #16
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	3304      	adds	r3, #4
 800316a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2200      	movs	r2, #0
 800317c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2201      	movs	r2, #1
 8003182:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003184:	7afb      	ldrb	r3, [r7, #11]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	b2da      	uxtb	r2, r3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	799b      	ldrb	r3, [r3, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d102      	bne.n	800319e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6818      	ldr	r0, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	799b      	ldrb	r3, [r3, #6]
 80031a6:	461a      	mov	r2, r3
 80031a8:	6979      	ldr	r1, [r7, #20]
 80031aa:	f001 fc2b 	bl	8004a04 <USB_EPStartXfer>

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	7912      	ldrb	r2, [r2, #4]
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d901      	bls.n	80031d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e04f      	b.n	8003276 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da0f      	bge.n	80031fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3310      	adds	r3, #16
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00d      	b.n	800321a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4613      	mov	r3, r2
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4413      	add	r3, r2
 8003210:	3304      	adds	r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_PCD_EP_SetStall+0x82>
 8003236:	2302      	movs	r3, #2
 8003238:	e01d      	b.n	8003276 <HAL_PCD_EP_SetStall+0xbe>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68f9      	ldr	r1, [r7, #12]
 8003248:	4618      	mov	r0, r3
 800324a:	f001 ffb9 	bl	80051c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2b00      	cmp	r3, #0
 8003256:	d109      	bne.n	800326c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	7999      	ldrb	r1, [r3, #6]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003266:	461a      	mov	r2, r3
 8003268:	f002 f9aa 	bl	80055c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b084      	sub	sp, #16
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
 8003286:	460b      	mov	r3, r1
 8003288:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 030f 	and.w	r3, r3, #15
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	7912      	ldrb	r2, [r2, #4]
 8003294:	4293      	cmp	r3, r2
 8003296:	d901      	bls.n	800329c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e042      	b.n	8003322 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800329c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da0f      	bge.n	80032c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	3310      	adds	r3, #16
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3304      	adds	r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2201      	movs	r2, #1
 80032c0:	705a      	strb	r2, [r3, #1]
 80032c2:	e00f      	b.n	80032e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 020f 	and.w	r2, r3, #15
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	4413      	add	r3, r2
 80032da:	3304      	adds	r3, #4
 80032dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_PCD_EP_ClrStall+0x86>
 8003300:	2302      	movs	r3, #2
 8003302:	e00e      	b.n	8003322 <HAL_PCD_EP_ClrStall+0xa4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	4618      	mov	r0, r3
 8003314:	f001 ffc2 	bl	800529c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003336:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800333a:	2b00      	cmp	r3, #0
 800333c:	da0c      	bge.n	8003358 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333e:	78fb      	ldrb	r3, [r7, #3]
 8003340:	f003 020f 	and.w	r2, r3, #15
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	3310      	adds	r3, #16
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4413      	add	r3, r2
 8003352:	3304      	adds	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	e00c      	b.n	8003372 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	f003 020f 	and.w	r2, r3, #15
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	3304      	adds	r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68f9      	ldr	r1, [r7, #12]
 8003378:	4618      	mov	r0, r3
 800337a:	f001 fde1 	bl	8004f40 <USB_EPStopXfer>
 800337e:	4603      	mov	r3, r0
 8003380:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003382:	7afb      	ldrb	r3, [r7, #11]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	@ 0x28
 8003390:	af02      	add	r7, sp, #8
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4613      	mov	r3, r2
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	3310      	adds	r3, #16
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	3304      	adds	r3, #4
 80033b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	691b      	ldr	r3, [r3, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d901      	bls.n	80033c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e06b      	b.n	800349c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d902      	bls.n	80033e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	3303      	adds	r3, #3
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033e8:	e02a      	b.n	8003440 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d902      	bls.n	8003406 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3303      	adds	r3, #3
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68d9      	ldr	r1, [r3, #12]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	4603      	mov	r3, r0
 8003422:	6978      	ldr	r0, [r7, #20]
 8003424:	f001 fe36 	bl	8005094 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	695a      	ldr	r2, [r3, #20]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	441a      	add	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	429a      	cmp	r2, r3
 8003454:	d809      	bhi.n	800346a <PCD_WriteEmptyTxFifo+0xde>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800345e:	429a      	cmp	r2, r3
 8003460:	d203      	bcs.n	800346a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1bf      	bne.n	80033ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	429a      	cmp	r2, r3
 8003474:	d811      	bhi.n	800349a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2201      	movs	r2, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800348a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	43db      	mvns	r3, r3
 8003490:	6939      	ldr	r1, [r7, #16]
 8003492:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003496:	4013      	ands	r3, r2
 8003498:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	333c      	adds	r3, #60	@ 0x3c
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	799b      	ldrb	r3, [r3, #6]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d17b      	bne.n	80035d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	4a61      	ldr	r2, [pc, #388]	@ (800366c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	f240 80b9 	bls.w	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 80b3 	beq.w	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800350c:	6093      	str	r3, [r2, #8]
 800350e:	e0a7      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f003 0320 	and.w	r3, r3, #32
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	015a      	lsls	r2, r3, #5
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003526:	461a      	mov	r2, r3
 8003528:	2320      	movs	r3, #32
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e098      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 8093 	bne.w	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4a4b      	ldr	r2, [pc, #300]	@ (800366c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d90f      	bls.n	8003562 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003558:	461a      	mov	r2, r3
 800355a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800355e:	6093      	str	r3, [r2, #8]
 8003560:	e07e      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	3304      	adds	r3, #4
 8003576:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	440b      	add	r3, r1
 8003584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d114      	bne.n	80035c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	f002 f806 	bl	80055c0 <USB_EP0_OutStart>
 80035b4:	e006      	b.n	80035c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	441a      	add	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f004 fadc 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
 80035d0:	e046      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	4a26      	ldr	r2, [pc, #152]	@ (8003670 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d124      	bne.n	8003624 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f0:	461a      	mov	r2, r3
 80035f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035f6:	6093      	str	r3, [r2, #8]
 80035f8:	e032      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003610:	461a      	mov	r2, r3
 8003612:	2320      	movs	r3, #32
 8003614:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	4619      	mov	r1, r3
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f004 fab3 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
 8003622:	e01d      	b.n	8003660 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d114      	bne.n	8003654 <PCD_EP_OutXfrComplete_int+0x1b0>
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	4613      	mov	r3, r2
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	4413      	add	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800364c:	461a      	mov	r2, r3
 800364e:	2100      	movs	r1, #0
 8003650:	f001 ffb6 	bl	80055c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	4619      	mov	r1, r3
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f004 fa94 	bl	8007b88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3720      	adds	r7, #32
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	4f54300a 	.word	0x4f54300a
 8003670:	4f54310a 	.word	0x4f54310a

08003674 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	333c      	adds	r3, #60	@ 0x3c
 800368c:	3304      	adds	r3, #4
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	015a      	lsls	r2, r3, #5
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4a15      	ldr	r2, [pc, #84]	@ (80036fc <PCD_EP_OutSetupPacket_int+0x88>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d90e      	bls.n	80036c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d009      	beq.n	80036c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	015a      	lsls	r2, r3, #5
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4413      	add	r3, r2
 80036bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036c0:	461a      	mov	r2, r3
 80036c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f004 fa4b 	bl	8007b64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a0a      	ldr	r2, [pc, #40]	@ (80036fc <PCD_EP_OutSetupPacket_int+0x88>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d90c      	bls.n	80036f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	799b      	ldrb	r3, [r3, #6]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d108      	bne.n	80036f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e8:	461a      	mov	r2, r3
 80036ea:	2101      	movs	r1, #1
 80036ec:	f001 ff68 	bl	80055c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	4f54300a 	.word	0x4f54300a

08003700 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	70fb      	strb	r3, [r7, #3]
 800370c:	4613      	mov	r3, r2
 800370e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d107      	bne.n	800372e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800371e:	883b      	ldrh	r3, [r7, #0]
 8003720:	0419      	lsls	r1, r3, #16
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	430a      	orrs	r2, r1
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
 800372c:	e028      	b.n	8003780 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	4413      	add	r3, r2
 800373a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
 8003740:	e00d      	b.n	800375e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	3340      	adds	r3, #64	@ 0x40
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0c1b      	lsrs	r3, r3, #16
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	4413      	add	r3, r2
 8003756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	3301      	adds	r3, #1
 800375c:	73fb      	strb	r3, [r7, #15]
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	78fb      	ldrb	r3, [r7, #3]
 8003762:	3b01      	subs	r3, #1
 8003764:	429a      	cmp	r2, r3
 8003766:	d3ec      	bcc.n	8003742 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003768:	883b      	ldrh	r3, [r7, #0]
 800376a:	0418      	lsls	r0, r3, #16
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6819      	ldr	r1, [r3, #0]
 8003770:	78fb      	ldrb	r3, [r7, #3]
 8003772:	3b01      	subs	r3, #1
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	4302      	orrs	r2, r0
 8003778:	3340      	adds	r3, #64	@ 0x40
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	887a      	ldrh	r2, [r7, #2]
 80037a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e267      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d075      	beq.n	80038d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037e6:	4b88      	ldr	r3, [pc, #544]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b85      	ldr	r3, [pc, #532]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d112      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b82      	ldr	r3, [pc, #520]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b7e      	ldr	r3, [pc, #504]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e242      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x74>
 800382e:	4b76      	ldr	r3, [pc, #472]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a75      	ldr	r2, [pc, #468]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x98>
 8003846:	4b70      	ldr	r3, [pc, #448]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6f      	ldr	r2, [pc, #444]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6d      	ldr	r3, [pc, #436]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6c      	ldr	r2, [pc, #432]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 8003860:	4b69      	ldr	r3, [pc, #420]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a68      	ldr	r2, [pc, #416]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b66      	ldr	r3, [pc, #408]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fd fa4c 	bl	8000d1c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7fd fa48 	bl	8000d1c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	@ 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e207      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5b      	ldr	r3, [pc, #364]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xc0>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fa38 	bl	8000d1c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038b0:	f7fd fa34 	bl	8000d1c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	@ 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1f3      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b51      	ldr	r3, [pc, #324]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe8>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038de:	4b4a      	ldr	r3, [pc, #296]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b44      	ldr	r3, [pc, #272]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c7      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4937      	ldr	r1, [pc, #220]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b34      	ldr	r3, [pc, #208]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7fd f9ed 	bl	8000d1c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7fd f9e9 	bl	8000d1c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a8      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2b      	ldr	r3, [pc, #172]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b28      	ldr	r3, [pc, #160]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4925      	ldr	r1, [pc, #148]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b24      	ldr	r3, [pc, #144]	@ (8003a0c <HAL_RCC_OscConfig+0x244>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7fd f9cc 	bl	8000d1c <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003988:	f7fd f9c8 	bl	8000d1c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e187      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d036      	beq.n	8003a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7fd f9ac 	bl	8000d1c <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fd f9a8 	bl	8000d1c <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e167      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_OscConfig+0x240>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x200>
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7fd f995 	bl	8000d1c <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	e00e      	b.n	8003a14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039f6:	f7fd f991 	bl	8000d1c <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d907      	bls.n	8003a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e150      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ea      	bne.n	80039f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b81      	ldr	r3, [pc, #516]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	4b7d      	ldr	r3, [pc, #500]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a46:	4a7c      	ldr	r2, [pc, #496]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b77      	ldr	r3, [pc, #476]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b74      	ldr	r3, [pc, #464]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a73      	ldr	r2, [pc, #460]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7fd f951 	bl	8000d1c <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7fd f94d 	bl	8000d1c <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e10c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b6a      	ldr	r3, [pc, #424]	@ (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2ea>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa8:	4a63      	ldr	r2, [pc, #396]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x30c>
 8003aba:	4b5f      	ldr	r3, [pc, #380]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a5e      	ldr	r2, [pc, #376]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aca:	4a5b      	ldr	r2, [pc, #364]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ad4:	4b58      	ldr	r3, [pc, #352]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad8:	4a57      	ldr	r2, [pc, #348]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ae0:	4b55      	ldr	r3, [pc, #340]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae4:	4a54      	ldr	r2, [pc, #336]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7fd f912 	bl	8000d1c <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fd f90e 	bl	8000d1c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0cb      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	4b49      	ldr	r3, [pc, #292]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x334>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fd f8fc 	bl	8000d1c <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fd f8f8 	bl	8000d1c <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0b5      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	4a38      	ldr	r2, [pc, #224]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a1 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b66:	4b34      	ldr	r3, [pc, #208]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d05c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d141      	bne.n	8003bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7fd f8cc 	bl	8000d1c <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fd f8c8 	bl	8000d1c <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e087      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b27      	ldr	r3, [pc, #156]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	491b      	ldr	r1, [pc, #108]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fd f8a1 	bl	8000d1c <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fd f89d 	bl	8000d1c <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e05c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x416>
 8003bfc:	e054      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	@ (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fd f88a 	bl	8000d1c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7fd f886 	bl	8000d1c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e045      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x444>
 8003c2a:	e03d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e038      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_RCC_OscConfig+0x4ec>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d121      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0cc      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b65      	ldr	r3, [pc, #404]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0307 	and.w	r3, r3, #7
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b8      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a58      	ldr	r2, [pc, #352]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d24:	4b53      	ldr	r3, [pc, #332]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a52      	ldr	r2, [pc, #328]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b50      	ldr	r3, [pc, #320]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	494d      	ldr	r1, [pc, #308]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d044      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b47      	ldr	r3, [pc, #284]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d119      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b3f      	ldr	r3, [pc, #252]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3b      	ldr	r3, [pc, #236]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e067      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b37      	ldr	r3, [pc, #220]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4934      	ldr	r1, [pc, #208]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7fc ffb8 	bl	8000d1c <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7fc ffb4 	bl	8000d1c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e04f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d20c      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b22      	ldr	r3, [pc, #136]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	@ (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0307 	and.w	r3, r3, #7
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e032      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4916      	ldr	r1, [pc, #88]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2a:	4b12      	ldr	r3, [pc, #72]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	490e      	ldr	r1, [pc, #56]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490a      	ldr	r1, [pc, #40]	@ (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a09      	ldr	r2, [pc, #36]	@ (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc ff18 	bl	8000c94 <HAL_InitTick>

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	08008ab4 	.word	0x08008ab4
 8003e7c:	20000008 	.word	0x20000008
 8003e80:	2000000c 	.word	0x2000000c

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b090      	sub	sp, #64	@ 0x40
 8003e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9c:	4b59      	ldr	r3, [pc, #356]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	f200 80a1 	bhi.w	8003ff0 <HAL_RCC_GetSysClockFreq+0x16c>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb6:	e09b      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b53      	ldr	r3, [pc, #332]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ebc:	e09b      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ebe:	4b53      	ldr	r3, [pc, #332]	@ (800400c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ec0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ec2:	e098      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b4f      	ldr	r3, [pc, #316]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b4d      	ldr	r3, [pc, #308]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d028      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b4a      	ldr	r3, [pc, #296]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	623b      	str	r3, [r7, #32]
 8003ee4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003eec:	2100      	movs	r1, #0
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ef0:	fb03 f201 	mul.w	r2, r3, r1
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	fb00 f303 	mul.w	r3, r0, r3
 8003efa:	4413      	add	r3, r2
 8003efc:	4a43      	ldr	r2, [pc, #268]	@ (800400c <HAL_RCC_GetSysClockFreq+0x188>)
 8003efe:	fba0 1202 	umull	r1, r2, r0, r2
 8003f02:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f04:	460a      	mov	r2, r1
 8003f06:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003f08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f0a:	4413      	add	r3, r2
 8003f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f10:	2200      	movs	r2, #0
 8003f12:	61bb      	str	r3, [r7, #24]
 8003f14:	61fa      	str	r2, [r7, #28]
 8003f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f1a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f1e:	f7fc f9c7 	bl	80002b0 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4613      	mov	r3, r2
 8003f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f2a:	e053      	b.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2c:	4b35      	ldr	r3, [pc, #212]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	099b      	lsrs	r3, r3, #6
 8003f32:	2200      	movs	r2, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	617a      	str	r2, [r7, #20]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f3e:	f04f 0b00 	mov.w	fp, #0
 8003f42:	4652      	mov	r2, sl
 8003f44:	465b      	mov	r3, fp
 8003f46:	f04f 0000 	mov.w	r0, #0
 8003f4a:	f04f 0100 	mov.w	r1, #0
 8003f4e:	0159      	lsls	r1, r3, #5
 8003f50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f54:	0150      	lsls	r0, r2, #5
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ebb2 080a 	subs.w	r8, r2, sl
 8003f5e:	eb63 090b 	sbc.w	r9, r3, fp
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f6e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f72:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f76:	ebb2 0408 	subs.w	r4, r2, r8
 8003f7a:	eb63 0509 	sbc.w	r5, r3, r9
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	00eb      	lsls	r3, r5, #3
 8003f88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f8c:	00e2      	lsls	r2, r4, #3
 8003f8e:	4614      	mov	r4, r2
 8003f90:	461d      	mov	r5, r3
 8003f92:	eb14 030a 	adds.w	r3, r4, sl
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	eb45 030b 	adc.w	r3, r5, fp
 8003f9c:	607b      	str	r3, [r7, #4]
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003faa:	4629      	mov	r1, r5
 8003fac:	028b      	lsls	r3, r1, #10
 8003fae:	4621      	mov	r1, r4
 8003fb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003fb4:	4621      	mov	r1, r4
 8003fb6:	028a      	lsls	r2, r1, #10
 8003fb8:	4610      	mov	r0, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	60fa      	str	r2, [r7, #12]
 8003fc4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc8:	f7fc f972 	bl	80002b0 <__aeabi_uldivmod>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	3301      	adds	r3, #1
 8003fe0:	005b      	lsls	r3, r3, #1
 8003fe2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003fe4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fee:	e002      	b.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ff0:	4b05      	ldr	r3, [pc, #20]	@ (8004008 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3740      	adds	r7, #64	@ 0x40
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	00f42400 	.word	0x00f42400
 800400c:	017d7840 	.word	0x017d7840

08004010 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004014:	4b03      	ldr	r3, [pc, #12]	@ (8004024 <HAL_RCC_GetHCLKFreq+0x14>)
 8004016:	681b      	ldr	r3, [r3, #0]
}
 8004018:	4618      	mov	r0, r3
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	20000008 	.word	0x20000008

08004028 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800402c:	f7ff fff0 	bl	8004010 <HAL_RCC_GetHCLKFreq>
 8004030:	4602      	mov	r2, r0
 8004032:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	0a9b      	lsrs	r3, r3, #10
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	4903      	ldr	r1, [pc, #12]	@ (800404c <HAL_RCC_GetPCLK1Freq+0x24>)
 800403e:	5ccb      	ldrb	r3, [r1, r3]
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004044:	4618      	mov	r0, r3
 8004046:	bd80      	pop	{r7, pc}
 8004048:	40023800 	.word	0x40023800
 800404c:	08008ac4 	.word	0x08008ac4

08004050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004050:	b084      	sub	sp, #16
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
 800405a:	f107 001c 	add.w	r0, r7, #28
 800405e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004062:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004066:	2b01      	cmp	r3, #1
 8004068:	d123      	bne.n	80040b2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800406e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800407e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004092:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004096:	2b01      	cmp	r3, #1
 8004098:	d105      	bne.n	80040a6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f001 fae8 	bl	800567c <USB_CoreReset>
 80040ac:	4603      	mov	r3, r0
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e01b      	b.n	80040ea <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f001 fadc 	bl	800567c <USB_CoreReset>
 80040c4:	4603      	mov	r3, r0
 80040c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38
 80040dc:	e005      	b.n	80040ea <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040ea:	7fbb      	ldrb	r3, [r7, #30]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10b      	bne.n	8004108 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f043 0206 	orr.w	r2, r3, #6
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004108:	7bfb      	ldrb	r3, [r7, #15]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004114:	b004      	add	sp, #16
 8004116:	4770      	bx	lr

08004118 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004118:	b480      	push	{r7}
 800411a:	b087      	sub	sp, #28
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	4613      	mov	r3, r2
 8004124:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004126:	79fb      	ldrb	r3, [r7, #7]
 8004128:	2b02      	cmp	r3, #2
 800412a:	d165      	bne.n	80041f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a41      	ldr	r2, [pc, #260]	@ (8004234 <USB_SetTurnaroundTime+0x11c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d906      	bls.n	8004142 <USB_SetTurnaroundTime+0x2a>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a40      	ldr	r2, [pc, #256]	@ (8004238 <USB_SetTurnaroundTime+0x120>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d202      	bcs.n	8004142 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800413c:	230f      	movs	r3, #15
 800413e:	617b      	str	r3, [r7, #20]
 8004140:	e062      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4a3c      	ldr	r2, [pc, #240]	@ (8004238 <USB_SetTurnaroundTime+0x120>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d306      	bcc.n	8004158 <USB_SetTurnaroundTime+0x40>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	4a3b      	ldr	r2, [pc, #236]	@ (800423c <USB_SetTurnaroundTime+0x124>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d202      	bcs.n	8004158 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004152:	230e      	movs	r3, #14
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e057      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4a38      	ldr	r2, [pc, #224]	@ (800423c <USB_SetTurnaroundTime+0x124>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d306      	bcc.n	800416e <USB_SetTurnaroundTime+0x56>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a37      	ldr	r2, [pc, #220]	@ (8004240 <USB_SetTurnaroundTime+0x128>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d202      	bcs.n	800416e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004168:	230d      	movs	r3, #13
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e04c      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	4a33      	ldr	r2, [pc, #204]	@ (8004240 <USB_SetTurnaroundTime+0x128>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d306      	bcc.n	8004184 <USB_SetTurnaroundTime+0x6c>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	4a32      	ldr	r2, [pc, #200]	@ (8004244 <USB_SetTurnaroundTime+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d802      	bhi.n	8004184 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800417e:	230c      	movs	r3, #12
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	e041      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4a2f      	ldr	r2, [pc, #188]	@ (8004244 <USB_SetTurnaroundTime+0x12c>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d906      	bls.n	800419a <USB_SetTurnaroundTime+0x82>
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4a2e      	ldr	r2, [pc, #184]	@ (8004248 <USB_SetTurnaroundTime+0x130>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d802      	bhi.n	800419a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004194:	230b      	movs	r3, #11
 8004196:	617b      	str	r3, [r7, #20]
 8004198:	e036      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4a2a      	ldr	r2, [pc, #168]	@ (8004248 <USB_SetTurnaroundTime+0x130>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d906      	bls.n	80041b0 <USB_SetTurnaroundTime+0x98>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <USB_SetTurnaroundTime+0x134>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d802      	bhi.n	80041b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80041aa:	230a      	movs	r3, #10
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	e02b      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	4a26      	ldr	r2, [pc, #152]	@ (800424c <USB_SetTurnaroundTime+0x134>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d906      	bls.n	80041c6 <USB_SetTurnaroundTime+0xae>
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4a25      	ldr	r2, [pc, #148]	@ (8004250 <USB_SetTurnaroundTime+0x138>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d202      	bcs.n	80041c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80041c0:	2309      	movs	r3, #9
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e020      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4a21      	ldr	r2, [pc, #132]	@ (8004250 <USB_SetTurnaroundTime+0x138>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d306      	bcc.n	80041dc <USB_SetTurnaroundTime+0xc4>
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4a20      	ldr	r2, [pc, #128]	@ (8004254 <USB_SetTurnaroundTime+0x13c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d802      	bhi.n	80041dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80041d6:	2308      	movs	r3, #8
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e015      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4a1d      	ldr	r2, [pc, #116]	@ (8004254 <USB_SetTurnaroundTime+0x13c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d906      	bls.n	80041f2 <USB_SetTurnaroundTime+0xda>
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4a1c      	ldr	r2, [pc, #112]	@ (8004258 <USB_SetTurnaroundTime+0x140>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d202      	bcs.n	80041f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80041ec:	2307      	movs	r3, #7
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e00a      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80041f2:	2306      	movs	r3, #6
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e007      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80041fe:	2309      	movs	r3, #9
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	e001      	b.n	8004208 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004204:	2309      	movs	r3, #9
 8004206:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	68da      	ldr	r2, [r3, #12]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	029b      	lsls	r3, r3, #10
 800421c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004220:	431a      	orrs	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	00d8acbf 	.word	0x00d8acbf
 8004238:	00e4e1c0 	.word	0x00e4e1c0
 800423c:	00f42400 	.word	0x00f42400
 8004240:	01067380 	.word	0x01067380
 8004244:	011a499f 	.word	0x011a499f
 8004248:	01312cff 	.word	0x01312cff
 800424c:	014ca43f 	.word	0x014ca43f
 8004250:	016e3600 	.word	0x016e3600
 8004254:	01a6ab1f 	.word	0x01a6ab1f
 8004258:	01e84800 	.word	0x01e84800

0800425c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f043 0201 	orr.w	r2, r3, #1
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f023 0201 	bic.w	r2, r3, #1
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042bc:	78fb      	ldrb	r3, [r7, #3]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d115      	bne.n	80042ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80042ce:	200a      	movs	r0, #10
 80042d0:	f7fc fd30 	bl	8000d34 <HAL_Delay>
      ms += 10U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	330a      	adds	r3, #10
 80042d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 f93f 	bl	800555e <USB_GetMode>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d01e      	beq.n	8004324 <USB_SetCurrentMode+0x84>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2bc7      	cmp	r3, #199	@ 0xc7
 80042ea:	d9f0      	bls.n	80042ce <USB_SetCurrentMode+0x2e>
 80042ec:	e01a      	b.n	8004324 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042ee:	78fb      	ldrb	r3, [r7, #3]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d115      	bne.n	8004320 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004300:	200a      	movs	r0, #10
 8004302:	f7fc fd17 	bl	8000d34 <HAL_Delay>
      ms += 10U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	330a      	adds	r3, #10
 800430a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f001 f926 	bl	800555e <USB_GetMode>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <USB_SetCurrentMode+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2bc7      	cmp	r3, #199	@ 0xc7
 800431c:	d9f0      	bls.n	8004300 <USB_SetCurrentMode+0x60>
 800431e:	e001      	b.n	8004324 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e005      	b.n	8004330 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2bc8      	cmp	r3, #200	@ 0xc8
 8004328:	d101      	bne.n	800432e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004338:	b084      	sub	sp, #16
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
 8004342:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004346:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004352:	2300      	movs	r3, #0
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e009      	b.n	800436c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3340      	adds	r3, #64	@ 0x40
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	2b0e      	cmp	r3, #14
 8004370:	d9f2      	bls.n	8004358 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004372:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004376:	2b00      	cmp	r3, #0
 8004378:	d11c      	bne.n	80043b4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004388:	f043 0302 	orr.w	r3, r3, #2
 800438c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004392:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800439e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043aa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80043b2:	e00b      	b.n	80043cc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043b8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80043d2:	461a      	mov	r2, r3
 80043d4:	2300      	movs	r3, #0
 80043d6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d10d      	bne.n	80043fc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d104      	bne.n	80043f2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f968 	bl	80046c0 <USB_SetDevSpeed>
 80043f0:	e008      	b.n	8004404 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043f2:	2101      	movs	r1, #1
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f963 	bl	80046c0 <USB_SetDevSpeed>
 80043fa:	e003      	b.n	8004404 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043fc:	2103      	movs	r1, #3
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 f95e 	bl	80046c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004404:	2110      	movs	r1, #16
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 f8fa 	bl	8004600 <USB_FlushTxFifo>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f924 	bl	8004664 <USB_FlushRxFifo>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004438:	461a      	mov	r2, r3
 800443a:	2300      	movs	r3, #0
 800443c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
 800444e:	e043      	b.n	80044d8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004462:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004466:	d118      	bne.n	800449a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10a      	bne.n	8004484 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800447a:	461a      	mov	r2, r3
 800447c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e013      	b.n	80044ac <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	461a      	mov	r2, r3
 8004492:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	e008      	b.n	80044ac <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044a6:	461a      	mov	r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	015a      	lsls	r2, r3, #5
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b8:	461a      	mov	r2, r3
 80044ba:	2300      	movs	r3, #0
 80044bc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	015a      	lsls	r2, r3, #5
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	4413      	add	r3, r2
 80044c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ca:	461a      	mov	r2, r3
 80044cc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80044dc:	461a      	mov	r2, r3
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d3b5      	bcc.n	8004450 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	613b      	str	r3, [r7, #16]
 80044e8:	e043      	b.n	8004572 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004500:	d118      	bne.n	8004534 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	015a      	lsls	r2, r3, #5
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4413      	add	r3, r2
 8004510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004514:	461a      	mov	r2, r3
 8004516:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800451a:	6013      	str	r3, [r2, #0]
 800451c:	e013      	b.n	8004546 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452a:	461a      	mov	r2, r3
 800452c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	e008      	b.n	8004546 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004540:	461a      	mov	r2, r3
 8004542:	2300      	movs	r3, #0
 8004544:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004552:	461a      	mov	r2, r3
 8004554:	2300      	movs	r3, #0
 8004556:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004564:	461a      	mov	r2, r3
 8004566:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800456a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	3301      	adds	r3, #1
 8004570:	613b      	str	r3, [r7, #16]
 8004572:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004576:	461a      	mov	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4293      	cmp	r3, r2
 800457c:	d3b5      	bcc.n	80044ea <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800458c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004590:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800459e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80045a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d105      	bne.n	80045b4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	f043 0210 	orr.w	r2, r3, #16
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699a      	ldr	r2, [r3, #24]
 80045b8:	4b10      	ldr	r3, [pc, #64]	@ (80045fc <USB_DevInit+0x2c4>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045c0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d005      	beq.n	80045d4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f043 0208 	orr.w	r2, r3, #8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d107      	bne.n	80045ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045e4:	f043 0304 	orr.w	r3, r3, #4
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045f8:	b004      	add	sp, #16
 80045fa:	4770      	bx	lr
 80045fc:	803c3800 	.word	0x803c3800

08004600 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	3301      	adds	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800461a:	d901      	bls.n	8004620 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e01b      	b.n	8004658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	daf2      	bge.n	800460e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	019b      	lsls	r3, r3, #6
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3301      	adds	r3, #1
 800463c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004644:	d901      	bls.n	800464a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e006      	b.n	8004658 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0320 	and.w	r3, r3, #32
 8004652:	2b20      	cmp	r3, #32
 8004654:	d0f0      	beq.n	8004638 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3301      	adds	r3, #1
 8004674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800467c:	d901      	bls.n	8004682 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e018      	b.n	80046b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	daf2      	bge.n	8004670 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2210      	movs	r2, #16
 8004692:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046a0:	d901      	bls.n	80046a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e006      	b.n	80046b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0310 	and.w	r3, r3, #16
 80046ae:	2b10      	cmp	r3, #16
 80046b0:	d0f0      	beq.n	8004694 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	78fb      	ldrb	r3, [r7, #3]
 80046da:	68f9      	ldr	r1, [r7, #12]
 80046dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3714      	adds	r7, #20
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b087      	sub	sp, #28
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0306 	and.w	r3, r3, #6
 800470a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004712:	2300      	movs	r3, #0
 8004714:	75fb      	strb	r3, [r7, #23]
 8004716:	e00a      	b.n	800472e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2b02      	cmp	r3, #2
 800471c:	d002      	beq.n	8004724 <USB_GetDevSpeed+0x32>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b06      	cmp	r3, #6
 8004722:	d102      	bne.n	800472a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004724:	2302      	movs	r3, #2
 8004726:	75fb      	strb	r3, [r7, #23]
 8004728:	e001      	b.n	800472e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800472a:	230f      	movs	r3, #15
 800472c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	785b      	ldrb	r3, [r3, #1]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d13a      	bne.n	80047ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	2101      	movs	r1, #1
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	b29b      	uxth	r3, r3
 8004770:	68f9      	ldr	r1, [r7, #12]
 8004772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004776:	4313      	orrs	r3, r2
 8004778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4413      	add	r3, r2
 8004782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d155      	bne.n	800483c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	791b      	ldrb	r3, [r3, #4]
 80047aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	059b      	lsls	r3, r3, #22
 80047b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80047b4:	4313      	orrs	r3, r2
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	0151      	lsls	r1, r2, #5
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	440a      	add	r2, r1
 80047be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	e036      	b.n	800483c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f003 030f 	and.w	r3, r3, #15
 80047de:	2101      	movs	r1, #1
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	68f9      	ldr	r1, [r7, #12]
 80047e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80047ec:	4313      	orrs	r3, r2
 80047ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11a      	bne.n	800483c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004822:	430b      	orrs	r3, r1
 8004824:	4313      	orrs	r3, r2
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	0151      	lsls	r1, r2, #5
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	440a      	add	r2, r1
 800482e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004832:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800483a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
	...

0800484c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	785b      	ldrb	r3, [r3, #1]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d161      	bne.n	800492c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800487a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800487e:	d11f      	bne.n	80048c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	0151      	lsls	r1, r2, #5
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	440a      	add	r2, r1
 8004896:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800489a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800489e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	0151      	lsls	r1, r2, #5
 80048b2:	68fa      	ldr	r2, [r7, #12]
 80048b4:	440a      	add	r2, r1
 80048b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f303 	lsl.w	r3, r1, r3
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80048e0:	4013      	ands	r3, r2
 80048e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2101      	movs	r1, #1
 80048f6:	fa01 f303 	lsl.w	r3, r1, r3
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004904:	4013      	ands	r3, r2
 8004906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	440b      	add	r3, r1
 800491e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004922:	4619      	mov	r1, r3
 8004924:	4b35      	ldr	r3, [pc, #212]	@ (80049fc <USB_DeactivateEndpoint+0x1b0>)
 8004926:	4013      	ands	r3, r2
 8004928:	600b      	str	r3, [r1, #0]
 800492a:	e060      	b.n	80049ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800493e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004942:	d11f      	bne.n	8004984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800495e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	015a      	lsls	r2, r3, #5
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	0151      	lsls	r1, r2, #5
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	440a      	add	r2, r1
 800497a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800498a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2101      	movs	r1, #1
 8004996:	fa01 f303 	lsl.w	r3, r1, r3
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	43db      	mvns	r3, r3
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049a4:	4013      	ands	r3, r2
 80049a6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ae:	69da      	ldr	r2, [r3, #28]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	2101      	movs	r1, #1
 80049ba:	fa01 f303 	lsl.w	r3, r1, r3
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	43db      	mvns	r3, r3
 80049c2:	68f9      	ldr	r1, [r7, #12]
 80049c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80049c8:	4013      	ands	r3, r2
 80049ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	015a      	lsls	r2, r3, #5
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	4413      	add	r3, r2
 80049d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	0159      	lsls	r1, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	440b      	add	r3, r1
 80049e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e6:	4619      	mov	r1, r3
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <USB_DeactivateEndpoint+0x1b4>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr
 80049fc:	ec337800 	.word	0xec337800
 8004a00:	eff37800 	.word	0xeff37800

08004a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	@ 0x28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	785b      	ldrb	r3, [r3, #1]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	f040 817f 	bne.w	8004d24 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d132      	bne.n	8004a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	0151      	lsls	r1, r2, #5
 8004a40:	69fa      	ldr	r2, [r7, #28]
 8004a42:	440a      	add	r2, r1
 8004a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a48:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004a4c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a5e:	691b      	ldr	r3, [r3, #16]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	0151      	lsls	r1, r2, #5
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	440a      	add	r2, r1
 8004a68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	015a      	lsls	r2, r3, #5
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	4413      	add	r3, r2
 8004a7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	0151      	lsls	r1, r2, #5
 8004a84:	69fa      	ldr	r2, [r7, #28]
 8004a86:	440a      	add	r2, r1
 8004a88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a8c:	0cdb      	lsrs	r3, r3, #19
 8004a8e:	04db      	lsls	r3, r3, #19
 8004a90:	6113      	str	r3, [r2, #16]
 8004a92:	e097      	b.n	8004bc4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004aae:	0cdb      	lsrs	r3, r3, #19
 8004ab0:	04db      	lsls	r3, r3, #19
 8004ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	0151      	lsls	r1, r2, #5
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	440a      	add	r2, r1
 8004aca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ace:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ad2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004ad6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11a      	bne.n	8004b14 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691a      	ldr	r2, [r3, #16]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d903      	bls.n	8004af2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b10:	6113      	str	r3, [r2, #16]
 8004b12:	e044      	b.n	8004b9e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	1e5a      	subs	r2, r3, #1
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b28:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	8afb      	ldrh	r3, [r7, #22]
 8004b3a:	04d9      	lsls	r1, r3, #19
 8004b3c:	4ba4      	ldr	r3, [pc, #656]	@ (8004dd0 <USB_EPStartXfer+0x3cc>)
 8004b3e:	400b      	ands	r3, r1
 8004b40:	69b9      	ldr	r1, [r7, #24]
 8004b42:	0148      	lsls	r0, r1, #5
 8004b44:	69f9      	ldr	r1, [r7, #28]
 8004b46:	4401      	add	r1, r0
 8004b48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	791b      	ldrb	r3, [r3, #4]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d122      	bne.n	8004b9e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	69fa      	ldr	r2, [r7, #28]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b72:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004b76:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	015a      	lsls	r2, r3, #5
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	4413      	add	r3, r2
 8004b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	8afb      	ldrh	r3, [r7, #22]
 8004b88:	075b      	lsls	r3, r3, #29
 8004b8a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004b8e:	69b9      	ldr	r1, [r7, #24]
 8004b90:	0148      	lsls	r0, r1, #5
 8004b92:	69f9      	ldr	r1, [r7, #28]
 8004b94:	4401      	add	r1, r0
 8004b96:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb4:	69b9      	ldr	r1, [r7, #24]
 8004bb6:	0148      	lsls	r0, r1, #5
 8004bb8:	69f9      	ldr	r1, [r7, #28]
 8004bba:	4401      	add	r1, r0
 8004bbc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d14b      	bne.n	8004c62 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	791b      	ldrb	r3, [r3, #4]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d128      	bne.n	8004c40 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d110      	bne.n	8004c20 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	69fa      	ldr	r2, [r7, #28]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00f      	b.n	8004c40 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	0151      	lsls	r1, r2, #5
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	440a      	add	r2, r1
 8004c56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c5a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e166      	b.n	8004f30 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	015a      	lsls	r2, r3, #5
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	4413      	add	r3, r2
 8004c6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	0151      	lsls	r1, r2, #5
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	440a      	add	r2, r1
 8004c78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c7c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004c80:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	791b      	ldrb	r3, [r3, #4]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d015      	beq.n	8004cb6 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 814e 	beq.w	8004f30 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	69f9      	ldr	r1, [r7, #28]
 8004cac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	634b      	str	r3, [r1, #52]	@ 0x34
 8004cb4:	e13c      	b.n	8004f30 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d110      	bne.n	8004ce8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00f      	b.n	8004d08 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	68d9      	ldr	r1, [r3, #12]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	781a      	ldrb	r2, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	b298      	uxth	r0, r3
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f9b9 	bl	8005094 <USB_WritePacket>
 8004d22:	e105      	b.n	8004f30 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	0151      	lsls	r1, r2, #5
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	440a      	add	r2, r1
 8004d3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d3e:	0cdb      	lsrs	r3, r3, #19
 8004d40:	04db      	lsls	r3, r3, #19
 8004d42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004d62:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004d66:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d132      	bne.n	8004dd4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	689a      	ldr	r2, [r3, #8]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
 8004d98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d9c:	69b9      	ldr	r1, [r7, #24]
 8004d9e:	0148      	lsls	r0, r1, #5
 8004da0:	69f9      	ldr	r1, [r7, #28]
 8004da2:	4401      	add	r1, r0
 8004da4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004da8:	4313      	orrs	r3, r2
 8004daa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dca:	6113      	str	r3, [r2, #16]
 8004dcc:	e062      	b.n	8004e94 <USB_EPStartXfer+0x490>
 8004dce:	bf00      	nop
 8004dd0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d123      	bne.n	8004e24 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004df2:	69b9      	ldr	r1, [r7, #24]
 8004df4:	0148      	lsls	r0, r1, #5
 8004df6:	69f9      	ldr	r1, [r7, #28]
 8004df8:	4401      	add	r1, r0
 8004dfa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e02:	69bb      	ldr	r3, [r7, #24]
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	0151      	lsls	r1, r2, #5
 8004e14:	69fa      	ldr	r2, [r7, #28]
 8004e16:	440a      	add	r2, r1
 8004e18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e20:	6113      	str	r3, [r2, #16]
 8004e22:	e037      	b.n	8004e94 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	691a      	ldr	r2, [r3, #16]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	1e5a      	subs	r2, r3, #1
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e38:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	8afa      	ldrh	r2, [r7, #22]
 8004e40:	fb03 f202 	mul.w	r2, r3, r2
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	691a      	ldr	r2, [r3, #16]
 8004e56:	8afb      	ldrh	r3, [r7, #22]
 8004e58:	04d9      	lsls	r1, r3, #19
 8004e5a:	4b38      	ldr	r3, [pc, #224]	@ (8004f3c <USB_EPStartXfer+0x538>)
 8004e5c:	400b      	ands	r3, r1
 8004e5e:	69b9      	ldr	r1, [r7, #24]
 8004e60:	0148      	lsls	r0, r1, #5
 8004e62:	69f9      	ldr	r1, [r7, #28]
 8004e64:	4401      	add	r1, r0
 8004e66:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e84:	69b9      	ldr	r1, [r7, #24]
 8004e86:	0148      	lsls	r0, r1, #5
 8004e88:	69f9      	ldr	r1, [r7, #28]
 8004e8a:	4401      	add	r1, r0
 8004e8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004e90:	4313      	orrs	r3, r2
 8004e92:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d10d      	bne.n	8004eb6 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d009      	beq.n	8004eb6 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eb2:	460a      	mov	r2, r1
 8004eb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	791b      	ldrb	r3, [r3, #4]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d128      	bne.n	8004f10 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d110      	bne.n	8004ef0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	69fa      	ldr	r2, [r7, #28]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ee8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	e00f      	b.n	8004f10 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	69ba      	ldr	r2, [r7, #24]
 8004f00:	0151      	lsls	r1, r2, #5
 8004f02:	69fa      	ldr	r2, [r7, #28]
 8004f04:	440a      	add	r2, r1
 8004f06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	69fa      	ldr	r2, [r7, #28]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f2a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3720      	adds	r7, #32
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	1ff80000 	.word	0x1ff80000

08004f40 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	785b      	ldrb	r3, [r3, #1]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d14a      	bne.n	8004ff4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	015a      	lsls	r2, r3, #5
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	4413      	add	r3, r2
 8004f68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f76:	f040 8086 	bne.w	8005086 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	7812      	ldrb	r2, [r2, #0]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f98:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004f9c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	7812      	ldrb	r2, [r2, #0]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004fbc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004fc0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d902      	bls.n	8004fd8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fd6:	e056      	b.n	8005086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ff0:	d0e7      	beq.n	8004fc2 <USB_EPStopXfer+0x82>
 8004ff2:	e048      	b.n	8005086 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005008:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800500c:	d13b      	bne.n	8005086 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800502c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005030:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005050:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3301      	adds	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005062:	4293      	cmp	r3, r2
 8005064:	d902      	bls.n	800506c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
          break;
 800506a:	e00c      	b.n	8005086 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005080:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005084:	d0e7      	beq.n	8005056 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005086:	7dfb      	ldrb	r3, [r7, #23]
}
 8005088:	4618      	mov	r0, r3
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005094:	b480      	push	{r7}
 8005096:	b089      	sub	sp, #36	@ 0x24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4611      	mov	r1, r2
 80050a0:	461a      	mov	r2, r3
 80050a2:	460b      	mov	r3, r1
 80050a4:	71fb      	strb	r3, [r7, #7]
 80050a6:	4613      	mov	r3, r2
 80050a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80050b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d123      	bne.n	8005102 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80050ba:	88bb      	ldrh	r3, [r7, #4]
 80050bc:	3303      	adds	r3, #3
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80050c2:	2300      	movs	r3, #0
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	e018      	b.n	80050fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	031a      	lsls	r2, r3, #12
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050d4:	461a      	mov	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	3301      	adds	r3, #1
 80050e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	3301      	adds	r3, #1
 80050e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	3301      	adds	r3, #1
 80050ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	3301      	adds	r3, #1
 80050f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	3301      	adds	r3, #1
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d3e2      	bcc.n	80050c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3724      	adds	r7, #36	@ 0x24
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005110:	b480      	push	{r7}
 8005112:	b08b      	sub	sp, #44	@ 0x2c
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	4613      	mov	r3, r2
 800511c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	089b      	lsrs	r3, r3, #2
 800512a:	b29b      	uxth	r3, r3
 800512c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	f003 0303 	and.w	r3, r3, #3
 8005134:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005136:	2300      	movs	r3, #0
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	e014      	b.n	8005166 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005146:	601a      	str	r2, [r3, #0]
    pDest++;
 8005148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514a:	3301      	adds	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	3301      	adds	r3, #1
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	3301      	adds	r3, #1
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	3301      	adds	r3, #1
 800515e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	3301      	adds	r3, #1
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	6a3a      	ldr	r2, [r7, #32]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3e6      	bcc.n	800513c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800516e:	8bfb      	ldrh	r3, [r7, #30]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d01e      	beq.n	80051b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800517e:	461a      	mov	r2, r3
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	b2db      	uxtb	r3, r3
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005198:	701a      	strb	r2, [r3, #0]
      i++;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	3301      	adds	r3, #1
 800519e:	623b      	str	r3, [r7, #32]
      pDest++;
 80051a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a2:	3301      	adds	r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80051a6:	8bfb      	ldrh	r3, [r7, #30]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80051ac:	8bfb      	ldrh	r3, [r7, #30]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1ea      	bne.n	8005188 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	372c      	adds	r7, #44	@ 0x2c
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	785b      	ldrb	r3, [r3, #1]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d12c      	bne.n	8005236 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	015a      	lsls	r2, r3, #5
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	db12      	blt.n	8005214 <USB_EPSetStall+0x54>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00f      	beq.n	8005214 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	015a      	lsls	r2, r3, #5
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	4413      	add	r3, r2
 80051fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	0151      	lsls	r1, r2, #5
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	440a      	add	r2, r1
 800520a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800520e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005212:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800522e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	e02b      	b.n	800528e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	db12      	blt.n	800526e <USB_EPSetStall+0xae>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00f      	beq.n	800526e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005268:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800526c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	0151      	lsls	r1, r2, #5
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	440a      	add	r2, r1
 8005284:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005288:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800528c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d128      	bne.n	800530a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	791b      	ldrb	r3, [r3, #4]
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d003      	beq.n	80052e8 <USB_EPClearStall+0x4c>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	791b      	ldrb	r3, [r3, #4]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d138      	bne.n	800535a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005302:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e027      	b.n	800535a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005324:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005328:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	791b      	ldrb	r3, [r3, #4]
 800532e:	2b03      	cmp	r3, #3
 8005330:	d003      	beq.n	800533a <USB_EPClearStall+0x9e>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	791b      	ldrb	r3, [r3, #4]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d10f      	bne.n	800535a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	0151      	lsls	r1, r2, #5
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	440a      	add	r2, r1
 8005350:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005358:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005386:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800538a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800539c:	68f9      	ldr	r1, [r7, #12]
 800539e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053a2:	4313      	orrs	r3, r2
 80053a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80053e2:	f023 0302 	bic.w	r3, r3, #2
 80053e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b085      	sub	sp, #20
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	699b      	ldr	r3, [r3, #24]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4013      	ands	r3, r2
 800544e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005450:	68fb      	ldr	r3, [r7, #12]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	4013      	ands	r3, r2
 8005480:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	0c1b      	lsrs	r3, r3, #16
}
 8005486:	4618      	mov	r0, r3
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ae:	69db      	ldr	r3, [r3, #28]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4013      	ands	r3, r2
 80054b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	b29b      	uxth	r3, r3
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3714      	adds	r7, #20
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	460b      	mov	r3, r1
 80054d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80054d6:	78fb      	ldrb	r3, [r7, #3]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	4013      	ands	r3, r2
 80054f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054f4:	68bb      	ldr	r3, [r7, #8]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005502:	b480      	push	{r7}
 8005504:	b087      	sub	sp, #28
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	460b      	mov	r3, r1
 800550c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	f003 030f 	and.w	r3, r3, #15
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	01db      	lsls	r3, r3, #7
 8005534:	b2db      	uxtb	r3, r3
 8005536:	693a      	ldr	r2, [r7, #16]
 8005538:	4313      	orrs	r3, r2
 800553a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800553c:	78fb      	ldrb	r3, [r7, #3]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4013      	ands	r3, r2
 800554e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005550:	68bb      	ldr	r3, [r7, #8]
}
 8005552:	4618      	mov	r0, r3
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0301 	and.w	r3, r3, #1
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800557a:	b480      	push	{r7}
 800557c:	b085      	sub	sp, #20
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005594:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005598:	f023 0307 	bic.w	r3, r3, #7
 800559c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	460b      	mov	r3, r1
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	333c      	adds	r3, #60	@ 0x3c
 80055d6:	3304      	adds	r3, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	4a26      	ldr	r2, [pc, #152]	@ (8005678 <USB_EP0_OutStart+0xb8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d90a      	bls.n	80055fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f4:	d101      	bne.n	80055fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055f6:	2300      	movs	r3, #0
 80055f8:	e037      	b.n	800566a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005600:	461a      	mov	r2, r3
 8005602:	2300      	movs	r3, #0
 8005604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005614:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005628:	f043 0318 	orr.w	r3, r3, #24
 800562c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005640:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005642:	7afb      	ldrb	r3, [r7, #11]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d10f      	bne.n	8005668 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005662:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005666:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	4f54300a 	.word	0x4f54300a

0800567c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005694:	d901      	bls.n	800569a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e01b      	b.n	80056d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	daf2      	bge.n	8005688 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f043 0201 	orr.w	r2, r3, #1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3301      	adds	r3, #1
 80056b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056be:	d901      	bls.n	80056c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e006      	b.n	80056d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f003 0301 	and.w	r3, r3, #1
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d0f0      	beq.n	80056b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
	...

080056e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80056ec:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80056f0:	f002 fcaa 	bl	8008048 <USBD_static_malloc>
 80056f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d109      	bne.n	8005710 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	32b0      	adds	r2, #176	@ 0xb0
 8005706:	2100      	movs	r1, #0
 8005708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800570c:	2302      	movs	r3, #2
 800570e:	e0d4      	b.n	80058ba <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005710:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005714:	2100      	movs	r1, #0
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f002 fcfa 	bl	8008110 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	32b0      	adds	r2, #176	@ 0xb0
 8005726:	68f9      	ldr	r1, [r7, #12]
 8005728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	32b0      	adds	r2, #176	@ 0xb0
 8005736:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	7c1b      	ldrb	r3, [r3, #16]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d138      	bne.n	80057ba <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005748:	4b5e      	ldr	r3, [pc, #376]	@ (80058c4 <USBD_CDC_Init+0x1e4>)
 800574a:	7819      	ldrb	r1, [r3, #0]
 800574c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005750:	2202      	movs	r2, #2
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f002 fb55 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005758:	4b5a      	ldr	r3, [pc, #360]	@ (80058c4 <USBD_CDC_Init+0x1e4>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	f003 020f 	and.w	r2, r3, #15
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	440b      	add	r3, r1
 800576c:	3324      	adds	r3, #36	@ 0x24
 800576e:	2201      	movs	r2, #1
 8005770:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005772:	4b55      	ldr	r3, [pc, #340]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 8005774:	7819      	ldrb	r1, [r3, #0]
 8005776:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800577a:	2202      	movs	r2, #2
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f002 fb40 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005782:	4b51      	ldr	r3, [pc, #324]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	f003 020f 	and.w	r2, r3, #15
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800579a:	2201      	movs	r2, #1
 800579c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800579e:	4b4b      	ldr	r3, [pc, #300]	@ (80058cc <USBD_CDC_Init+0x1ec>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	f003 020f 	and.w	r2, r3, #15
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4613      	mov	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	3326      	adds	r3, #38	@ 0x26
 80057b4:	2210      	movs	r2, #16
 80057b6:	801a      	strh	r2, [r3, #0]
 80057b8:	e035      	b.n	8005826 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057ba:	4b42      	ldr	r3, [pc, #264]	@ (80058c4 <USBD_CDC_Init+0x1e4>)
 80057bc:	7819      	ldrb	r1, [r3, #0]
 80057be:	2340      	movs	r3, #64	@ 0x40
 80057c0:	2202      	movs	r2, #2
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f002 fb1d 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057c8:	4b3e      	ldr	r3, [pc, #248]	@ (80058c4 <USBD_CDC_Init+0x1e4>)
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 020f 	and.w	r2, r3, #15
 80057d0:	6879      	ldr	r1, [r7, #4]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	3324      	adds	r3, #36	@ 0x24
 80057de:	2201      	movs	r2, #1
 80057e0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80057e2:	4b39      	ldr	r3, [pc, #228]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 80057e4:	7819      	ldrb	r1, [r3, #0]
 80057e6:	2340      	movs	r3, #64	@ 0x40
 80057e8:	2202      	movs	r2, #2
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f002 fb09 	bl	8007e02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80057f0:	4b35      	ldr	r3, [pc, #212]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005808:	2201      	movs	r2, #1
 800580a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800580c:	4b2f      	ldr	r3, [pc, #188]	@ (80058cc <USBD_CDC_Init+0x1ec>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f003 020f 	and.w	r2, r3, #15
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	3326      	adds	r3, #38	@ 0x26
 8005822:	2210      	movs	r2, #16
 8005824:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005826:	4b29      	ldr	r3, [pc, #164]	@ (80058cc <USBD_CDC_Init+0x1ec>)
 8005828:	7819      	ldrb	r1, [r3, #0]
 800582a:	2308      	movs	r3, #8
 800582c:	2203      	movs	r2, #3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f002 fae7 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005834:	4b25      	ldr	r3, [pc, #148]	@ (80058cc <USBD_CDC_Init+0x1ec>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	f003 020f 	and.w	r2, r3, #15
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	009b      	lsls	r3, r3, #2
 8005846:	440b      	add	r3, r1
 8005848:	3324      	adds	r3, #36	@ 0x24
 800584a:	2201      	movs	r2, #1
 800584c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	33b0      	adds	r3, #176	@ 0xb0
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005884:	2302      	movs	r3, #2
 8005886:	e018      	b.n	80058ba <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	7c1b      	ldrb	r3, [r3, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10a      	bne.n	80058a6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005890:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 8005892:	7819      	ldrb	r1, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800589a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f002 fb9e 	bl	8007fe0 <USBD_LL_PrepareReceive>
 80058a4:	e008      	b.n	80058b8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058a6:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <USBD_CDC_Init+0x1e8>)
 80058a8:	7819      	ldrb	r1, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80058b0:	2340      	movs	r3, #64	@ 0x40
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f002 fb94 	bl	8007fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	2000009b 	.word	0x2000009b
 80058c8:	2000009c 	.word	0x2000009c
 80058cc:	2000009d 	.word	0x2000009d

080058d0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	460b      	mov	r3, r1
 80058da:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80058dc:	4b3a      	ldr	r3, [pc, #232]	@ (80059c8 <USBD_CDC_DeInit+0xf8>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	4619      	mov	r1, r3
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f002 fab3 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80058e8:	4b37      	ldr	r3, [pc, #220]	@ (80059c8 <USBD_CDC_DeInit+0xf8>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	f003 020f 	and.w	r2, r3, #15
 80058f0:	6879      	ldr	r1, [r7, #4]
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	3324      	adds	r3, #36	@ 0x24
 80058fe:	2200      	movs	r2, #0
 8005900:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005902:	4b32      	ldr	r3, [pc, #200]	@ (80059cc <USBD_CDC_DeInit+0xfc>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f002 faa0 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800590e:	4b2f      	ldr	r3, [pc, #188]	@ (80059cc <USBD_CDC_DeInit+0xfc>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005926:	2200      	movs	r2, #0
 8005928:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800592a:	4b29      	ldr	r3, [pc, #164]	@ (80059d0 <USBD_CDC_DeInit+0x100>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f002 fa8c 	bl	8007e4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005936:	4b26      	ldr	r3, [pc, #152]	@ (80059d0 <USBD_CDC_DeInit+0x100>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	f003 020f 	and.w	r2, r3, #15
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4613      	mov	r3, r2
 8005942:	009b      	lsls	r3, r3, #2
 8005944:	4413      	add	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	440b      	add	r3, r1
 800594a:	3324      	adds	r3, #36	@ 0x24
 800594c:	2200      	movs	r2, #0
 800594e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005950:	4b1f      	ldr	r3, [pc, #124]	@ (80059d0 <USBD_CDC_DeInit+0x100>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	3326      	adds	r3, #38	@ 0x26
 8005966:	2200      	movs	r2, #0
 8005968:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	32b0      	adds	r2, #176	@ 0xb0
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01f      	beq.n	80059bc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	33b0      	adds	r3, #176	@ 0xb0
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4413      	add	r3, r2
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	32b0      	adds	r2, #176	@ 0xb0
 800599a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800599e:	4618      	mov	r0, r3
 80059a0:	f002 fb60 	bl	8008064 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	32b0      	adds	r2, #176	@ 0xb0
 80059ae:	2100      	movs	r1, #0
 80059b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2000009b 	.word	0x2000009b
 80059cc:	2000009c 	.word	0x2000009c
 80059d0:	2000009d 	.word	0x2000009d

080059d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	32b0      	adds	r2, #176	@ 0xb0
 80059e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ec:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d101      	bne.n	8005a04 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e0bf      	b.n	8005b84 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d050      	beq.n	8005ab2 <USBD_CDC_Setup+0xde>
 8005a10:	2b20      	cmp	r3, #32
 8005a12:	f040 80af 	bne.w	8005b74 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	88db      	ldrh	r3, [r3, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d03a      	beq.n	8005a94 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	b25b      	sxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	da1b      	bge.n	8005a60 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	33b0      	adds	r3, #176	@ 0xb0
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005a3e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	88d2      	ldrh	r2, [r2, #6]
 8005a44:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	88db      	ldrh	r3, [r3, #6]
 8005a4a:	2b07      	cmp	r3, #7
 8005a4c:	bf28      	it	cs
 8005a4e:	2307      	movcs	r3, #7
 8005a50:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	89fa      	ldrh	r2, [r7, #14]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f001 fd93 	bl	8007584 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005a5e:	e090      	b.n	8005b82 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	785a      	ldrb	r2, [r3, #1]
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	88db      	ldrh	r3, [r3, #6]
 8005a6e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a70:	d803      	bhi.n	8005a7a <USBD_CDC_Setup+0xa6>
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	88db      	ldrh	r3, [r3, #6]
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	e000      	b.n	8005a7c <USBD_CDC_Setup+0xa8>
 8005a7a:	2240      	movs	r2, #64	@ 0x40
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005a82:	6939      	ldr	r1, [r7, #16]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fda5 	bl	80075dc <USBD_CtlPrepareRx>
      break;
 8005a92:	e076      	b.n	8005b82 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	33b0      	adds	r3, #176	@ 0xb0
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	7850      	ldrb	r0, [r2, #1]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	6839      	ldr	r1, [r7, #0]
 8005aae:	4798      	blx	r3
      break;
 8005ab0:	e067      	b.n	8005b82 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	785b      	ldrb	r3, [r3, #1]
 8005ab6:	2b0b      	cmp	r3, #11
 8005ab8:	d851      	bhi.n	8005b5e <USBD_CDC_Setup+0x18a>
 8005aba:	a201      	add	r2, pc, #4	@ (adr r2, 8005ac0 <USBD_CDC_Setup+0xec>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005af1 	.word	0x08005af1
 8005ac4:	08005b6d 	.word	0x08005b6d
 8005ac8:	08005b5f 	.word	0x08005b5f
 8005acc:	08005b5f 	.word	0x08005b5f
 8005ad0:	08005b5f 	.word	0x08005b5f
 8005ad4:	08005b5f 	.word	0x08005b5f
 8005ad8:	08005b5f 	.word	0x08005b5f
 8005adc:	08005b5f 	.word	0x08005b5f
 8005ae0:	08005b5f 	.word	0x08005b5f
 8005ae4:	08005b5f 	.word	0x08005b5f
 8005ae8:	08005b1b 	.word	0x08005b1b
 8005aec:	08005b45 	.word	0x08005b45
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d107      	bne.n	8005b0c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005afc:	f107 030a 	add.w	r3, r7, #10
 8005b00:	2202      	movs	r2, #2
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fd3d 	bl	8007584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b0a:	e032      	b.n	8005b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f001 fcbb 	bl	800748a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	75fb      	strb	r3, [r7, #23]
          break;
 8005b18:	e02b      	b.n	8005b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d107      	bne.n	8005b36 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005b26:	f107 030d 	add.w	r3, r7, #13
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fd28 	bl	8007584 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b34:	e01d      	b.n	8005b72 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fca6 	bl	800748a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	75fb      	strb	r3, [r7, #23]
          break;
 8005b42:	e016      	b.n	8005b72 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b03      	cmp	r3, #3
 8005b4e:	d00f      	beq.n	8005b70 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 fc99 	bl	800748a <USBD_CtlError>
            ret = USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005b5c:	e008      	b.n	8005b70 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b5e:	6839      	ldr	r1, [r7, #0]
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f001 fc92 	bl	800748a <USBD_CtlError>
          ret = USBD_FAIL;
 8005b66:	2303      	movs	r3, #3
 8005b68:	75fb      	strb	r3, [r7, #23]
          break;
 8005b6a:	e002      	b.n	8005b72 <USBD_CDC_Setup+0x19e>
          break;
 8005b6c:	bf00      	nop
 8005b6e:	e008      	b.n	8005b82 <USBD_CDC_Setup+0x1ae>
          break;
 8005b70:	bf00      	nop
      }
      break;
 8005b72:	e006      	b.n	8005b82 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f001 fc87 	bl	800748a <USBD_CtlError>
      ret = USBD_FAIL;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b80:	bf00      	nop
  }

  return (uint8_t)ret;
 8005b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005b9e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	32b0      	adds	r2, #176	@ 0xb0
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e065      	b.n	8005c82 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	32b0      	adds	r2, #176	@ 0xb0
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	f003 020f 	and.w	r2, r3, #15
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	3318      	adds	r3, #24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02f      	beq.n	8005c40 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	f003 020f 	and.w	r2, r3, #15
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 010f 	and.w	r1, r3, #15
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	440b      	add	r3, r1
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4403      	add	r3, r0
 8005c08:	331c      	adds	r3, #28
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d112      	bne.n	8005c40 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005c1a:	78fb      	ldrb	r3, [r7, #3]
 8005c1c:	f003 020f 	and.w	r2, r3, #15
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	440b      	add	r3, r1
 8005c2c:	3318      	adds	r3, #24
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005c32:	78f9      	ldrb	r1, [r7, #3]
 8005c34:	2300      	movs	r3, #0
 8005c36:	2200      	movs	r2, #0
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f002 f9b0 	bl	8007f9e <USBD_LL_Transmit>
 8005c3e:	e01f      	b.n	8005c80 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	33b0      	adds	r3, #176	@ 0xb0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	33b0      	adds	r3, #176	@ 0xb0
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005c7c:	78fa      	ldrb	r2, [r7, #3]
 8005c7e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3710      	adds	r7, #16
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b084      	sub	sp, #16
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	460b      	mov	r3, r1
 8005c94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	32b0      	adds	r2, #176	@ 0xb0
 8005ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	32b0      	adds	r2, #176	@ 0xb0
 8005cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d101      	bne.n	8005cbc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e01a      	b.n	8005cf2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f002 f9ae 	bl	8008022 <USBD_LL_GetRxDataSize>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	33b0      	adds	r3, #176	@ 0xb0
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005cec:	4611      	mov	r1, r2
 8005cee:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3710      	adds	r7, #16
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b084      	sub	sp, #16
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	32b0      	adds	r2, #176	@ 0xb0
 8005d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d10:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e024      	b.n	8005d66 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	33b0      	adds	r3, #176	@ 0xb0
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d019      	beq.n	8005d64 <USBD_CDC_EP0_RxReady+0x6a>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d36:	2bff      	cmp	r3, #255	@ 0xff
 8005d38:	d014      	beq.n	8005d64 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	33b0      	adds	r3, #176	@ 0xb0
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8005d52:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005d5a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	22ff      	movs	r2, #255	@ 0xff
 8005d60:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d78:	2182      	movs	r1, #130	@ 0x82
 8005d7a:	4818      	ldr	r0, [pc, #96]	@ (8005ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d7c:	f000 fd4f 	bl	800681e <USBD_GetEpDesc>
 8005d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d82:	2101      	movs	r1, #1
 8005d84:	4815      	ldr	r0, [pc, #84]	@ (8005ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d86:	f000 fd4a 	bl	800681e <USBD_GetEpDesc>
 8005d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d8c:	2181      	movs	r1, #129	@ 0x81
 8005d8e:	4813      	ldr	r0, [pc, #76]	@ (8005ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005d90:	f000 fd45 	bl	800681e <USBD_GetEpDesc>
 8005d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2210      	movs	r2, #16
 8005da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d006      	beq.n	8005db6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db0:	711a      	strb	r2, [r3, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d006      	beq.n	8005dca <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc4:	711a      	strb	r2, [r3, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2243      	movs	r2, #67	@ 0x43
 8005dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005dd0:	4b02      	ldr	r3, [pc, #8]	@ (8005ddc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	20000058 	.word	0x20000058

08005de0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005de8:	2182      	movs	r1, #130	@ 0x82
 8005dea:	4818      	ldr	r0, [pc, #96]	@ (8005e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005dec:	f000 fd17 	bl	800681e <USBD_GetEpDesc>
 8005df0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005df2:	2101      	movs	r1, #1
 8005df4:	4815      	ldr	r0, [pc, #84]	@ (8005e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005df6:	f000 fd12 	bl	800681e <USBD_GetEpDesc>
 8005dfa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dfc:	2181      	movs	r1, #129	@ 0x81
 8005dfe:	4813      	ldr	r0, [pc, #76]	@ (8005e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e00:	f000 fd0d 	bl	800681e <USBD_GetEpDesc>
 8005e04:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	2210      	movs	r2, #16
 8005e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d006      	beq.n	8005e26 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	711a      	strb	r2, [r3, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f042 0202 	orr.w	r2, r2, #2
 8005e24:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d006      	beq.n	8005e3a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	711a      	strb	r2, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f042 0202 	orr.w	r2, r2, #2
 8005e38:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2243      	movs	r2, #67	@ 0x43
 8005e3e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e40:	4b02      	ldr	r3, [pc, #8]	@ (8005e4c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3718      	adds	r7, #24
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	20000058 	.word	0x20000058

08005e50 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e58:	2182      	movs	r1, #130	@ 0x82
 8005e5a:	4818      	ldr	r0, [pc, #96]	@ (8005ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e5c:	f000 fcdf 	bl	800681e <USBD_GetEpDesc>
 8005e60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e62:	2101      	movs	r1, #1
 8005e64:	4815      	ldr	r0, [pc, #84]	@ (8005ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e66:	f000 fcda 	bl	800681e <USBD_GetEpDesc>
 8005e6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e6c:	2181      	movs	r1, #129	@ 0x81
 8005e6e:	4813      	ldr	r0, [pc, #76]	@ (8005ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005e70:	f000 fcd5 	bl	800681e <USBD_GetEpDesc>
 8005e74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d002      	beq.n	8005e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d006      	beq.n	8005e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e90:	711a      	strb	r2, [r3, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ea4:	711a      	strb	r2, [r3, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2243      	movs	r2, #67	@ 0x43
 8005eae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005eb0:	4b02      	ldr	r3, [pc, #8]	@ (8005ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3718      	adds	r7, #24
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	20000058 	.word	0x20000058

08005ec0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	220a      	movs	r2, #10
 8005ecc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005ece:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	20000014 	.word	0x20000014

08005ee0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d101      	bne.n	8005ef4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e009      	b.n	8005f08 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	33b0      	adds	r3, #176	@ 0xb0
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4413      	add	r3, r2
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b087      	sub	sp, #28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	32b0      	adds	r2, #176	@ 0xb0
 8005f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f2e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d101      	bne.n	8005f3a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e008      	b.n	8005f4c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32b0      	adds	r2, #176	@ 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e004      	b.n	8005f86 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
	...

08005f94 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	32b0      	adds	r2, #176	@ 0xb0
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e025      	b.n	8006006 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d11f      	bne.n	8006004 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005fcc:	4b10      	ldr	r3, [pc, #64]	@ (8006010 <USBD_CDC_TransmitPacket+0x7c>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	f003 020f 	and.w	r2, r3, #15
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4403      	add	r3, r0
 8005fe6:	3318      	adds	r3, #24
 8005fe8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005fea:	4b09      	ldr	r3, [pc, #36]	@ (8006010 <USBD_CDC_TransmitPacket+0x7c>)
 8005fec:	7819      	ldrb	r1, [r3, #0]
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 ffcf 	bl	8007f9e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006000:	2300      	movs	r3, #0
 8006002:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006004:	7bfb      	ldrb	r3, [r7, #15]
}
 8006006:	4618      	mov	r0, r3
 8006008:	3710      	adds	r7, #16
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	2000009b 	.word	0x2000009b

08006014 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	32b0      	adds	r2, #176	@ 0xb0
 8006026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800602a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32b0      	adds	r2, #176	@ 0xb0
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800603e:	2303      	movs	r3, #3
 8006040:	e018      	b.n	8006074 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	7c1b      	ldrb	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10a      	bne.n	8006060 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800604a:	4b0c      	ldr	r3, [pc, #48]	@ (800607c <USBD_CDC_ReceivePacket+0x68>)
 800604c:	7819      	ldrb	r1, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006054:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 ffc1 	bl	8007fe0 <USBD_LL_PrepareReceive>
 800605e:	e008      	b.n	8006072 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006060:	4b06      	ldr	r3, [pc, #24]	@ (800607c <USBD_CDC_ReceivePacket+0x68>)
 8006062:	7819      	ldrb	r1, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800606a:	2340      	movs	r3, #64	@ 0x40
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 ffb7 	bl	8007fe0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	2000009c 	.word	0x2000009c

08006080 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	4613      	mov	r3, r2
 800608c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006094:	2303      	movs	r3, #3
 8006096:	e01f      	b.n	80060d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	79fa      	ldrb	r2, [r7, #7]
 80060ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f001 fe31 	bl	8007d34 <USBD_LL_Init>
 80060d2:	4603      	mov	r3, r0
 80060d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060ea:	2300      	movs	r3, #0
 80060ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e025      	b.n	8006144 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	32ae      	adds	r2, #174	@ 0xae
 800610a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00f      	beq.n	8006134 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	32ae      	adds	r2, #174	@ 0xae
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006124:	f107 020e 	add.w	r2, r7, #14
 8006128:	4610      	mov	r0, r2
 800612a:	4798      	blx	r3
 800612c:	4602      	mov	r2, r0
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f001 fe39 	bl	8007dcc <USBD_LL_Start>
 800615a:	4603      	mov	r3, r0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800616c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800616e:	4618      	mov	r0, r3
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr

0800617a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800617a:	b580      	push	{r7, lr}
 800617c:	b084      	sub	sp, #16
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	78fa      	ldrb	r2, [r7, #3]
 800619e:	4611      	mov	r1, r2
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b084      	sub	sp, #16
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	4611      	mov	r1, r2
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	4798      	blx	r3
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d001      	beq.n	80061dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80061d8:	2303      	movs	r3, #3
 80061da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
 80061ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f001 f90c 	bl	8007416 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2b02      	cmp	r3, #2
 8006220:	d01a      	beq.n	8006258 <USBD_LL_SetupStage+0x72>
 8006222:	2b02      	cmp	r3, #2
 8006224:	d822      	bhi.n	800626c <USBD_LL_SetupStage+0x86>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <USBD_LL_SetupStage+0x4a>
 800622a:	2b01      	cmp	r3, #1
 800622c:	d00a      	beq.n	8006244 <USBD_LL_SetupStage+0x5e>
 800622e:	e01d      	b.n	800626c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fb63 	bl	8006904 <USBD_StdDevReq>
 800623e:	4603      	mov	r3, r0
 8006240:	73fb      	strb	r3, [r7, #15]
      break;
 8006242:	e020      	b.n	8006286 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fbcb 	bl	80069e8 <USBD_StdItfReq>
 8006252:	4603      	mov	r3, r0
 8006254:	73fb      	strb	r3, [r7, #15]
      break;
 8006256:	e016      	b.n	8006286 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800625e:	4619      	mov	r1, r3
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fc2d 	bl	8006ac0 <USBD_StdEPReq>
 8006266:	4603      	mov	r3, r0
 8006268:	73fb      	strb	r3, [r7, #15]
      break;
 800626a:	e00c      	b.n	8006286 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006272:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006276:	b2db      	uxtb	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f001 fe06 	bl	8007e8c <USBD_LL_StallEP>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
      break;
 8006284:	bf00      	nop
  }

  return ret;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	460b      	mov	r3, r1
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80062a2:	7afb      	ldrb	r3, [r7, #11]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d16e      	bne.n	8006386 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80062ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	f040 8098 	bne.w	80063ec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	689a      	ldr	r2, [r3, #8]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d913      	bls.n	80062f0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	1ad2      	subs	r2, r2, r3
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	68da      	ldr	r2, [r3, #12]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4293      	cmp	r3, r2
 80062e0:	bf28      	it	cs
 80062e2:	4613      	movcs	r3, r2
 80062e4:	461a      	mov	r2, r3
 80062e6:	6879      	ldr	r1, [r7, #4]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f001 f994 	bl	8007616 <USBD_CtlContinueRx>
 80062ee:	e07d      	b.n	80063ec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80062f6:	f003 031f 	and.w	r3, r3, #31
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d014      	beq.n	8006328 <USBD_LL_DataOutStage+0x98>
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d81d      	bhi.n	800633e <USBD_LL_DataOutStage+0xae>
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <USBD_LL_DataOutStage+0x7c>
 8006306:	2b01      	cmp	r3, #1
 8006308:	d003      	beq.n	8006312 <USBD_LL_DataOutStage+0x82>
 800630a:	e018      	b.n	800633e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	75bb      	strb	r3, [r7, #22]
            break;
 8006310:	e018      	b.n	8006344 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006318:	b2db      	uxtb	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f000 fa64 	bl	80067ea <USBD_CoreFindIF>
 8006322:	4603      	mov	r3, r0
 8006324:	75bb      	strb	r3, [r7, #22]
            break;
 8006326:	e00d      	b.n	8006344 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800632e:	b2db      	uxtb	r3, r3
 8006330:	4619      	mov	r1, r3
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 fa66 	bl	8006804 <USBD_CoreFindEP>
 8006338:	4603      	mov	r3, r0
 800633a:	75bb      	strb	r3, [r7, #22]
            break;
 800633c:	e002      	b.n	8006344 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	75bb      	strb	r3, [r7, #22]
            break;
 8006342:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006344:	7dbb      	ldrb	r3, [r7, #22]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d119      	bne.n	800637e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b03      	cmp	r3, #3
 8006354:	d113      	bne.n	800637e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006356:	7dba      	ldrb	r2, [r7, #22]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	32ae      	adds	r2, #174	@ 0xae
 800635c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006366:	7dba      	ldrb	r2, [r7, #22]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800636e:	7dba      	ldrb	r2, [r7, #22]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	32ae      	adds	r2, #174	@ 0xae
 8006374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f001 f95a 	bl	8007638 <USBD_CtlSendStatus>
 8006384:	e032      	b.n	80063ec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006386:	7afb      	ldrb	r3, [r7, #11]
 8006388:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800638c:	b2db      	uxtb	r3, r3
 800638e:	4619      	mov	r1, r3
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fa37 	bl	8006804 <USBD_CoreFindEP>
 8006396:	4603      	mov	r3, r0
 8006398:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800639a:	7dbb      	ldrb	r3, [r7, #22]
 800639c:	2bff      	cmp	r3, #255	@ 0xff
 800639e:	d025      	beq.n	80063ec <USBD_LL_DataOutStage+0x15c>
 80063a0:	7dbb      	ldrb	r3, [r7, #22]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d122      	bne.n	80063ec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b03      	cmp	r3, #3
 80063b0:	d117      	bne.n	80063e2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80063b2:	7dba      	ldrb	r2, [r7, #22]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	32ae      	adds	r2, #174	@ 0xae
 80063b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00f      	beq.n	80063e2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80063c2:	7dba      	ldrb	r2, [r7, #22]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80063ca:	7dba      	ldrb	r2, [r7, #22]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	32ae      	adds	r2, #174	@ 0xae
 80063d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	7afa      	ldrb	r2, [r7, #11]
 80063d8:	4611      	mov	r1, r2
 80063da:	68f8      	ldr	r0, [r7, #12]
 80063dc:	4798      	blx	r3
 80063de:	4603      	mov	r3, r0
 80063e0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80063e2:	7dfb      	ldrb	r3, [r7, #23]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d001      	beq.n	80063ec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	e000      	b.n	80063ee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b086      	sub	sp, #24
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	60f8      	str	r0, [r7, #12]
 80063fe:	460b      	mov	r3, r1
 8006400:	607a      	str	r2, [r7, #4]
 8006402:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006404:	7afb      	ldrb	r3, [r7, #11]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d16f      	bne.n	80064ea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3314      	adds	r3, #20
 800640e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006416:	2b02      	cmp	r3, #2
 8006418:	d15a      	bne.n	80064d0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	689a      	ldr	r2, [r3, #8]
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	429a      	cmp	r2, r3
 8006424:	d914      	bls.n	8006450 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	1ad2      	subs	r2, r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	461a      	mov	r2, r3
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f001 f8bc 	bl	80075ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006442:	2300      	movs	r3, #0
 8006444:	2200      	movs	r2, #0
 8006446:	2100      	movs	r1, #0
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f001 fdc9 	bl	8007fe0 <USBD_LL_PrepareReceive>
 800644e:	e03f      	b.n	80064d0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d11c      	bne.n	8006496 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006464:	429a      	cmp	r2, r3
 8006466:	d316      	bcc.n	8006496 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006472:	429a      	cmp	r2, r3
 8006474:	d20f      	bcs.n	8006496 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006476:	2200      	movs	r2, #0
 8006478:	2100      	movs	r1, #0
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f001 f89d 	bl	80075ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006488:	2300      	movs	r3, #0
 800648a:	2200      	movs	r2, #0
 800648c:	2100      	movs	r1, #0
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 fda6 	bl	8007fe0 <USBD_LL_PrepareReceive>
 8006494:	e01c      	b.n	80064d0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b03      	cmp	r3, #3
 80064a0:	d10f      	bne.n	80064c2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80064c2:	2180      	movs	r1, #128	@ 0x80
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f001 fce1 	bl	8007e8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f001 f8c7 	bl	800765e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d03a      	beq.n	8006550 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f7ff fe42 	bl	8006164 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80064e8:	e032      	b.n	8006550 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80064ea:	7afb      	ldrb	r3, [r7, #11]
 80064ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f985 	bl	8006804 <USBD_CoreFindEP>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2bff      	cmp	r3, #255	@ 0xff
 8006502:	d025      	beq.n	8006550 <USBD_LL_DataInStage+0x15a>
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d122      	bne.n	8006550 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d11c      	bne.n	8006550 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006516:	7dfa      	ldrb	r2, [r7, #23]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	32ae      	adds	r2, #174	@ 0xae
 800651c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d014      	beq.n	8006550 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006526:	7dfa      	ldrb	r2, [r7, #23]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800652e:	7dfa      	ldrb	r2, [r7, #23]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	32ae      	adds	r2, #174	@ 0xae
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	7afa      	ldrb	r2, [r7, #11]
 800653c:	4611      	mov	r1, r2
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	4798      	blx	r3
 8006542:	4603      	mov	r3, r0
 8006544:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006546:	7dbb      	ldrb	r3, [r7, #22]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800654c:	7dbb      	ldrb	r3, [r7, #22]
 800654e:	e000      	b.n	8006552 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2200      	movs	r2, #0
 8006580:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d014      	beq.n	80065c0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00e      	beq.n	80065c0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6852      	ldr	r2, [r2, #4]
 80065ae:	b2d2      	uxtb	r2, r2
 80065b0:	4611      	mov	r1, r2
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80065bc:	2303      	movs	r3, #3
 80065be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065c0:	2340      	movs	r3, #64	@ 0x40
 80065c2:	2200      	movs	r2, #0
 80065c4:	2100      	movs	r1, #0
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f001 fc1b 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2240      	movs	r2, #64	@ 0x40
 80065d8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80065dc:	2340      	movs	r3, #64	@ 0x40
 80065de:	2200      	movs	r2, #0
 80065e0:	2180      	movs	r1, #128	@ 0x80
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 fc0d 	bl	8007e02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2240      	movs	r2, #64	@ 0x40
 80065f2:	621a      	str	r2, [r3, #32]

  return ret;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	460b      	mov	r3, r1
 8006608:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b04      	cmp	r3, #4
 8006630:	d006      	beq.n	8006640 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006638:	b2da      	uxtb	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2204      	movs	r2, #4
 8006644:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b04      	cmp	r3, #4
 8006668:	d106      	bne.n	8006678 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006670:	b2da      	uxtb	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b082      	sub	sp, #8
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b03      	cmp	r3, #3
 8006698:	d110      	bne.n	80066bc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d005      	beq.n	80066bc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b082      	sub	sp, #8
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	460b      	mov	r3, r1
 80066d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32ae      	adds	r2, #174	@ 0xae
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d101      	bne.n	80066e8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e01c      	b.n	8006722 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d115      	bne.n	8006720 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	32ae      	adds	r2, #174	@ 0xae
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	6a1b      	ldr	r3, [r3, #32]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	32ae      	adds	r2, #174	@ 0xae
 8006712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	78fa      	ldrb	r2, [r7, #3]
 800671a:	4611      	mov	r1, r2
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	460b      	mov	r3, r1
 8006734:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	32ae      	adds	r2, #174	@ 0xae
 8006740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006748:	2303      	movs	r3, #3
 800674a:	e01c      	b.n	8006786 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b03      	cmp	r3, #3
 8006756:	d115      	bne.n	8006784 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	32ae      	adds	r2, #174	@ 0xae
 8006762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00b      	beq.n	8006784 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	32ae      	adds	r2, #174	@ 0xae
 8006776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800677a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800677c:	78fa      	ldrb	r2, [r7, #3]
 800677e:	4611      	mov	r1, r2
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800678e:	b480      	push	{r7}
 8006790:	b083      	sub	sp, #12
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6852      	ldr	r2, [r2, #4]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	4611      	mov	r1, r2
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	4798      	blx	r3
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80067f6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	460b      	mov	r3, r1
 800680e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006810:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006812:	4618      	mov	r0, r3
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr

0800681e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b086      	sub	sp, #24
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	b29b      	uxth	r3, r3
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	7812      	ldrb	r2, [r2, #0]
 8006840:	4293      	cmp	r3, r2
 8006842:	d91f      	bls.n	8006884 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800684a:	e013      	b.n	8006874 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800684c:	f107 030a 	add.w	r3, r7, #10
 8006850:	4619      	mov	r1, r3
 8006852:	6978      	ldr	r0, [r7, #20]
 8006854:	f000 f81b 	bl	800688e <USBD_GetNextDesc>
 8006858:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2b05      	cmp	r3, #5
 8006860:	d108      	bne.n	8006874 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	789b      	ldrb	r3, [r3, #2]
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	429a      	cmp	r2, r3
 800686e:	d008      	beq.n	8006882 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	885b      	ldrh	r3, [r3, #2]
 8006878:	b29a      	uxth	r2, r3
 800687a:	897b      	ldrh	r3, [r7, #10]
 800687c:	429a      	cmp	r2, r3
 800687e:	d8e5      	bhi.n	800684c <USBD_GetEpDesc+0x2e>
 8006880:	e000      	b.n	8006884 <USBD_GetEpDesc+0x66>
          break;
 8006882:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006884:	693b      	ldr	r3, [r7, #16]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	7812      	ldrb	r2, [r2, #0]
 80068a4:	4413      	add	r3, r2
 80068a6:	b29a      	uxth	r2, r3
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	781b      	ldrb	r3, [r3, #0]
 80068b0:	461a      	mov	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80068b8:	68fb      	ldr	r3, [r7, #12]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3714      	adds	r7, #20
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b087      	sub	sp, #28
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	3301      	adds	r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80068e4:	8a3b      	ldrh	r3, [r7, #16]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	b21a      	sxth	r2, r3
 80068ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	b21b      	sxth	r3, r3
 80068f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80068f4:	89fb      	ldrh	r3, [r7, #14]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	371c      	adds	r7, #28
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
	...

08006904 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800691a:	2b40      	cmp	r3, #64	@ 0x40
 800691c:	d005      	beq.n	800692a <USBD_StdDevReq+0x26>
 800691e:	2b40      	cmp	r3, #64	@ 0x40
 8006920:	d857      	bhi.n	80069d2 <USBD_StdDevReq+0xce>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00f      	beq.n	8006946 <USBD_StdDevReq+0x42>
 8006926:	2b20      	cmp	r3, #32
 8006928:	d153      	bne.n	80069d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	32ae      	adds	r2, #174	@ 0xae
 8006934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	4798      	blx	r3
 8006940:	4603      	mov	r3, r0
 8006942:	73fb      	strb	r3, [r7, #15]
      break;
 8006944:	e04a      	b.n	80069dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b09      	cmp	r3, #9
 800694c:	d83b      	bhi.n	80069c6 <USBD_StdDevReq+0xc2>
 800694e:	a201      	add	r2, pc, #4	@ (adr r2, 8006954 <USBD_StdDevReq+0x50>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	080069a9 	.word	0x080069a9
 8006958:	080069bd 	.word	0x080069bd
 800695c:	080069c7 	.word	0x080069c7
 8006960:	080069b3 	.word	0x080069b3
 8006964:	080069c7 	.word	0x080069c7
 8006968:	08006987 	.word	0x08006987
 800696c:	0800697d 	.word	0x0800697d
 8006970:	080069c7 	.word	0x080069c7
 8006974:	0800699f 	.word	0x0800699f
 8006978:	08006991 	.word	0x08006991
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa3c 	bl	8006dfc <USBD_GetDescriptor>
          break;
 8006984:	e024      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 fba1 	bl	80070d0 <USBD_SetAddress>
          break;
 800698e:	e01f      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006990:	6839      	ldr	r1, [r7, #0]
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbe0 	bl	8007158 <USBD_SetConfig>
 8006998:	4603      	mov	r3, r0
 800699a:	73fb      	strb	r3, [r7, #15]
          break;
 800699c:	e018      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800699e:	6839      	ldr	r1, [r7, #0]
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f000 fc83 	bl	80072ac <USBD_GetConfig>
          break;
 80069a6:	e013      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fcb4 	bl	8007318 <USBD_GetStatus>
          break;
 80069b0:	e00e      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069b2:	6839      	ldr	r1, [r7, #0]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fce3 	bl	8007380 <USBD_SetFeature>
          break;
 80069ba:	e009      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 fd07 	bl	80073d2 <USBD_ClrFeature>
          break;
 80069c4:	e004      	b.n	80069d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd5e 	bl	800748a <USBD_CtlError>
          break;
 80069ce:	bf00      	nop
      }
      break;
 80069d0:	e004      	b.n	80069dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80069d2:	6839      	ldr	r1, [r7, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fd58 	bl	800748a <USBD_CtlError>
      break;
 80069da:	bf00      	nop
  }

  return ret;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop

080069e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80069fe:	2b40      	cmp	r3, #64	@ 0x40
 8006a00:	d005      	beq.n	8006a0e <USBD_StdItfReq+0x26>
 8006a02:	2b40      	cmp	r3, #64	@ 0x40
 8006a04:	d852      	bhi.n	8006aac <USBD_StdItfReq+0xc4>
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <USBD_StdItfReq+0x26>
 8006a0a:	2b20      	cmp	r3, #32
 8006a0c:	d14e      	bne.n	8006aac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	3b01      	subs	r3, #1
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d840      	bhi.n	8006a9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	889b      	ldrh	r3, [r3, #4]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d836      	bhi.n	8006a94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	889b      	ldrh	r3, [r3, #4]
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7ff fedb 	bl	80067ea <USBD_CoreFindIF>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a38:	7bbb      	ldrb	r3, [r7, #14]
 8006a3a:	2bff      	cmp	r3, #255	@ 0xff
 8006a3c:	d01d      	beq.n	8006a7a <USBD_StdItfReq+0x92>
 8006a3e:	7bbb      	ldrb	r3, [r7, #14]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d11a      	bne.n	8006a7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006a44:	7bba      	ldrb	r2, [r7, #14]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	32ae      	adds	r2, #174	@ 0xae
 8006a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006a54:	7bba      	ldrb	r2, [r7, #14]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006a5c:	7bba      	ldrb	r2, [r7, #14]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	32ae      	adds	r2, #174	@ 0xae
 8006a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	6839      	ldr	r1, [r7, #0]
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a72:	e004      	b.n	8006a7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006a78:	e001      	b.n	8006a7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	88db      	ldrh	r3, [r3, #6]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d110      	bne.n	8006aa8 <USBD_StdItfReq+0xc0>
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10d      	bne.n	8006aa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fdd3 	bl	8007638 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a92:	e009      	b.n	8006aa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fcf7 	bl	800748a <USBD_CtlError>
          break;
 8006a9c:	e004      	b.n	8006aa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 fcf2 	bl	800748a <USBD_CtlError>
          break;
 8006aa6:	e000      	b.n	8006aaa <USBD_StdItfReq+0xc2>
          break;
 8006aa8:	bf00      	nop
      }
      break;
 8006aaa:	e004      	b.n	8006ab6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fceb 	bl	800748a <USBD_CtlError>
      break;
 8006ab4:	bf00      	nop
  }

  return ret;
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3710      	adds	r7, #16
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	889b      	ldrh	r3, [r3, #4]
 8006ad2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	d007      	beq.n	8006af0 <USBD_StdEPReq+0x30>
 8006ae0:	2b40      	cmp	r3, #64	@ 0x40
 8006ae2:	f200 817f 	bhi.w	8006de4 <USBD_StdEPReq+0x324>
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d02a      	beq.n	8006b40 <USBD_StdEPReq+0x80>
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	f040 817a 	bne.w	8006de4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006af0:	7bbb      	ldrb	r3, [r7, #14]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fe85 	bl	8006804 <USBD_CoreFindEP>
 8006afa:	4603      	mov	r3, r0
 8006afc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006afe:	7b7b      	ldrb	r3, [r7, #13]
 8006b00:	2bff      	cmp	r3, #255	@ 0xff
 8006b02:	f000 8174 	beq.w	8006dee <USBD_StdEPReq+0x32e>
 8006b06:	7b7b      	ldrb	r3, [r7, #13]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f040 8170 	bne.w	8006dee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006b0e:	7b7a      	ldrb	r2, [r7, #13]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006b16:	7b7a      	ldrb	r2, [r7, #13]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	32ae      	adds	r2, #174	@ 0xae
 8006b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f000 8163 	beq.w	8006dee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006b28:	7b7a      	ldrb	r2, [r7, #13]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	32ae      	adds	r2, #174	@ 0xae
 8006b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	6839      	ldr	r1, [r7, #0]
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	4798      	blx	r3
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b3e:	e156      	b.n	8006dee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	785b      	ldrb	r3, [r3, #1]
 8006b44:	2b03      	cmp	r3, #3
 8006b46:	d008      	beq.n	8006b5a <USBD_StdEPReq+0x9a>
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	f300 8145 	bgt.w	8006dd8 <USBD_StdEPReq+0x318>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 809b 	beq.w	8006c8a <USBD_StdEPReq+0x1ca>
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d03c      	beq.n	8006bd2 <USBD_StdEPReq+0x112>
 8006b58:	e13e      	b.n	8006dd8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b02      	cmp	r3, #2
 8006b64:	d002      	beq.n	8006b6c <USBD_StdEPReq+0xac>
 8006b66:	2b03      	cmp	r3, #3
 8006b68:	d016      	beq.n	8006b98 <USBD_StdEPReq+0xd8>
 8006b6a:	e02c      	b.n	8006bc6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b6c:	7bbb      	ldrb	r3, [r7, #14]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <USBD_StdEPReq+0xce>
 8006b72:	7bbb      	ldrb	r3, [r7, #14]
 8006b74:	2b80      	cmp	r3, #128	@ 0x80
 8006b76:	d00a      	beq.n	8006b8e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f985 	bl	8007e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b82:	2180      	movs	r1, #128	@ 0x80
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 f981 	bl	8007e8c <USBD_LL_StallEP>
 8006b8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b8c:	e020      	b.n	8006bd0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fc7a 	bl	800748a <USBD_CtlError>
              break;
 8006b96:	e01b      	b.n	8006bd0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	885b      	ldrh	r3, [r3, #2]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10e      	bne.n	8006bbe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00b      	beq.n	8006bbe <USBD_StdEPReq+0xfe>
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	2b80      	cmp	r3, #128	@ 0x80
 8006baa:	d008      	beq.n	8006bbe <USBD_StdEPReq+0xfe>
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	88db      	ldrh	r3, [r3, #6]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bb4:	7bbb      	ldrb	r3, [r7, #14]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 f967 	bl	8007e8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fd3a 	bl	8007638 <USBD_CtlSendStatus>

              break;
 8006bc4:	e004      	b.n	8006bd0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006bc6:	6839      	ldr	r1, [r7, #0]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fc5e 	bl	800748a <USBD_CtlError>
              break;
 8006bce:	bf00      	nop
          }
          break;
 8006bd0:	e107      	b.n	8006de2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d002      	beq.n	8006be4 <USBD_StdEPReq+0x124>
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	d016      	beq.n	8006c10 <USBD_StdEPReq+0x150>
 8006be2:	e04b      	b.n	8006c7c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be4:	7bbb      	ldrb	r3, [r7, #14]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <USBD_StdEPReq+0x146>
 8006bea:	7bbb      	ldrb	r3, [r7, #14]
 8006bec:	2b80      	cmp	r3, #128	@ 0x80
 8006bee:	d00a      	beq.n	8006c06 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f001 f949 	bl	8007e8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bfa:	2180      	movs	r1, #128	@ 0x80
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 f945 	bl	8007e8c <USBD_LL_StallEP>
 8006c02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c04:	e040      	b.n	8006c88 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc3e 	bl	800748a <USBD_CtlError>
              break;
 8006c0e:	e03b      	b.n	8006c88 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d136      	bne.n	8006c86 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d004      	beq.n	8006c2c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	4619      	mov	r1, r3
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f001 f94f 	bl	8007eca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fd03 	bl	8007638 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	4619      	mov	r1, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7ff fde4 	bl	8006804 <USBD_CoreFindEP>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c40:	7b7b      	ldrb	r3, [r7, #13]
 8006c42:	2bff      	cmp	r3, #255	@ 0xff
 8006c44:	d01f      	beq.n	8006c86 <USBD_StdEPReq+0x1c6>
 8006c46:	7b7b      	ldrb	r3, [r7, #13]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d11c      	bne.n	8006c86 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006c4c:	7b7a      	ldrb	r2, [r7, #13]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006c54:	7b7a      	ldrb	r2, [r7, #13]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	32ae      	adds	r2, #174	@ 0xae
 8006c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d010      	beq.n	8006c86 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c64:	7b7a      	ldrb	r2, [r7, #13]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32ae      	adds	r2, #174	@ 0xae
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	6839      	ldr	r1, [r7, #0]
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	4798      	blx	r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006c7a:	e004      	b.n	8006c86 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc03 	bl	800748a <USBD_CtlError>
              break;
 8006c84:	e000      	b.n	8006c88 <USBD_StdEPReq+0x1c8>
              break;
 8006c86:	bf00      	nop
          }
          break;
 8006c88:	e0ab      	b.n	8006de2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d002      	beq.n	8006c9c <USBD_StdEPReq+0x1dc>
 8006c96:	2b03      	cmp	r3, #3
 8006c98:	d032      	beq.n	8006d00 <USBD_StdEPReq+0x240>
 8006c9a:	e097      	b.n	8006dcc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c9c:	7bbb      	ldrb	r3, [r7, #14]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d007      	beq.n	8006cb2 <USBD_StdEPReq+0x1f2>
 8006ca2:	7bbb      	ldrb	r3, [r7, #14]
 8006ca4:	2b80      	cmp	r3, #128	@ 0x80
 8006ca6:	d004      	beq.n	8006cb2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fbed 	bl	800748a <USBD_CtlError>
                break;
 8006cb0:	e091      	b.n	8006dd6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	da0b      	bge.n	8006cd2 <USBD_StdEPReq+0x212>
 8006cba:	7bbb      	ldrb	r3, [r7, #14]
 8006cbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	3310      	adds	r3, #16
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	3304      	adds	r3, #4
 8006cd0:	e00b      	b.n	8006cea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	3304      	adds	r3, #4
 8006cea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 fc43 	bl	8007584 <USBD_CtlSendData>
              break;
 8006cfe:	e06a      	b.n	8006dd6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	da11      	bge.n	8006d2c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d08:	7bbb      	ldrb	r3, [r7, #14]
 8006d0a:	f003 020f 	and.w	r2, r3, #15
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	3324      	adds	r3, #36	@ 0x24
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d117      	bne.n	8006d52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fbb0 	bl	800748a <USBD_CtlError>
                  break;
 8006d2a:	e054      	b.n	8006dd6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d2c:	7bbb      	ldrb	r3, [r7, #14]
 8006d2e:	f003 020f 	and.w	r2, r3, #15
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	4613      	mov	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	4413      	add	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	440b      	add	r3, r1
 8006d3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d104      	bne.n	8006d52 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb9d 	bl	800748a <USBD_CtlError>
                  break;
 8006d50:	e041      	b.n	8006dd6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da0b      	bge.n	8006d72 <USBD_StdEPReq+0x2b2>
 8006d5a:	7bbb      	ldrb	r3, [r7, #14]
 8006d5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006d60:	4613      	mov	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	3310      	adds	r3, #16
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	3304      	adds	r3, #4
 8006d70:	e00b      	b.n	8006d8a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	4413      	add	r3, r2
 8006d88:	3304      	adds	r3, #4
 8006d8a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <USBD_StdEPReq+0x2d8>
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b80      	cmp	r3, #128	@ 0x80
 8006d96:	d103      	bne.n	8006da0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
 8006d9e:	e00e      	b.n	8006dbe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f8af 	bl	8007f08 <USBD_LL_IsStallEP>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d003      	beq.n	8006db8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2201      	movs	r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e002      	b.n	8006dbe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fbdd 	bl	8007584 <USBD_CtlSendData>
              break;
 8006dca:	e004      	b.n	8006dd6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fb5b 	bl	800748a <USBD_CtlError>
              break;
 8006dd4:	bf00      	nop
          }
          break;
 8006dd6:	e004      	b.n	8006de2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb55 	bl	800748a <USBD_CtlError>
          break;
 8006de0:	bf00      	nop
      }
      break;
 8006de2:	e005      	b.n	8006df0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb4f 	bl	800748a <USBD_CtlError>
      break;
 8006dec:	e000      	b.n	8006df0 <USBD_StdEPReq+0x330>
      break;
 8006dee:	bf00      	nop
  }

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	885b      	ldrh	r3, [r3, #2]
 8006e16:	0a1b      	lsrs	r3, r3, #8
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	2b06      	cmp	r3, #6
 8006e1e:	f200 8128 	bhi.w	8007072 <USBD_GetDescriptor+0x276>
 8006e22:	a201      	add	r2, pc, #4	@ (adr r2, 8006e28 <USBD_GetDescriptor+0x2c>)
 8006e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e28:	08006e45 	.word	0x08006e45
 8006e2c:	08006e5d 	.word	0x08006e5d
 8006e30:	08006e9d 	.word	0x08006e9d
 8006e34:	08007073 	.word	0x08007073
 8006e38:	08007073 	.word	0x08007073
 8006e3c:	08007013 	.word	0x08007013
 8006e40:	0800703f 	.word	0x0800703f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	7c12      	ldrb	r2, [r2, #16]
 8006e50:	f107 0108 	add.w	r1, r7, #8
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	60f8      	str	r0, [r7, #12]
      break;
 8006e5a:	e112      	b.n	8007082 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	7c1b      	ldrb	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10d      	bne.n	8006e80 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e6c:	f107 0208 	add.w	r2, r7, #8
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	3301      	adds	r3, #1
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e7e:	e100      	b.n	8007082 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e88:	f107 0208 	add.w	r2, r7, #8
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4798      	blx	r3
 8006e90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	3301      	adds	r3, #1
 8006e96:	2202      	movs	r2, #2
 8006e98:	701a      	strb	r2, [r3, #0]
      break;
 8006e9a:	e0f2      	b.n	8007082 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	885b      	ldrh	r3, [r3, #2]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	f200 80ac 	bhi.w	8007000 <USBD_GetDescriptor+0x204>
 8006ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8006eb0 <USBD_GetDescriptor+0xb4>)
 8006eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eae:	bf00      	nop
 8006eb0:	08006ec9 	.word	0x08006ec9
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006f31 	.word	0x08006f31
 8006ebc:	08006f65 	.word	0x08006f65
 8006ec0:	08006f99 	.word	0x08006f99
 8006ec4:	08006fcd 	.word	0x08006fcd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e091      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 facb 	bl	800748a <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e089      	b.n	8007010 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1e:	e077      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fab1 	bl	800748a <USBD_CtlError>
            err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2e:	e06f      	b.n	8007010 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f52:	e05d      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa97 	bl	800748a <USBD_CtlError>
            err++;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	72fb      	strb	r3, [r7, #11]
          break;
 8006f62:	e055      	b.n	8007010 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e043      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa7d 	bl	800748a <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e03b      	b.n	8007010 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006faa:	695b      	ldr	r3, [r3, #20]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e029      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa63 	bl	800748a <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e021      	b.n	8007010 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fd2:	699b      	ldr	r3, [r3, #24]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e00f      	b.n	8007010 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa49 	bl	800748a <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e007      	b.n	8007010 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007000:	6839      	ldr	r1, [r7, #0]
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa41 	bl	800748a <USBD_CtlError>
          err++;
 8007008:	7afb      	ldrb	r3, [r7, #11]
 800700a:	3301      	adds	r3, #1
 800700c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800700e:	bf00      	nop
      }
      break;
 8007010:	e037      	b.n	8007082 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	7c1b      	ldrb	r3, [r3, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007020:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007022:	f107 0208 	add.w	r2, r7, #8
 8007026:	4610      	mov	r0, r2
 8007028:	4798      	blx	r3
 800702a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800702c:	e029      	b.n	8007082 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fa2a 	bl	800748a <USBD_CtlError>
        err++;
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	3301      	adds	r3, #1
 800703a:	72fb      	strb	r3, [r7, #11]
      break;
 800703c:	e021      	b.n	8007082 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	7c1b      	ldrb	r3, [r3, #16]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d10d      	bne.n	8007062 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800704c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800704e:	f107 0208 	add.w	r2, r7, #8
 8007052:	4610      	mov	r0, r2
 8007054:	4798      	blx	r3
 8007056:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	2207      	movs	r2, #7
 800705e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007060:	e00f      	b.n	8007082 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007062:	6839      	ldr	r1, [r7, #0]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa10 	bl	800748a <USBD_CtlError>
        err++;
 800706a:	7afb      	ldrb	r3, [r7, #11]
 800706c:	3301      	adds	r3, #1
 800706e:	72fb      	strb	r3, [r7, #11]
      break;
 8007070:	e007      	b.n	8007082 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa08 	bl	800748a <USBD_CtlError>
      err++;
 800707a:	7afb      	ldrb	r3, [r7, #11]
 800707c:	3301      	adds	r3, #1
 800707e:	72fb      	strb	r3, [r7, #11]
      break;
 8007080:	bf00      	nop
  }

  if (err != 0U)
 8007082:	7afb      	ldrb	r3, [r7, #11]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d11e      	bne.n	80070c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	88db      	ldrh	r3, [r3, #6]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d016      	beq.n	80070be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007090:	893b      	ldrh	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d00e      	beq.n	80070b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88da      	ldrh	r2, [r3, #6]
 800709a:	893b      	ldrh	r3, [r7, #8]
 800709c:	4293      	cmp	r3, r2
 800709e:	bf28      	it	cs
 80070a0:	4613      	movcs	r3, r2
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070a6:	893b      	ldrh	r3, [r7, #8]
 80070a8:	461a      	mov	r2, r3
 80070aa:	68f9      	ldr	r1, [r7, #12]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 fa69 	bl	8007584 <USBD_CtlSendData>
 80070b2:	e009      	b.n	80070c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9e7 	bl	800748a <USBD_CtlError>
 80070bc:	e004      	b.n	80070c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 faba 	bl	8007638 <USBD_CtlSendStatus>
 80070c4:	e000      	b.n	80070c8 <USBD_GetDescriptor+0x2cc>
    return;
 80070c6:	bf00      	nop
  }
}
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	889b      	ldrh	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d131      	bne.n	8007146 <USBD_SetAddress+0x76>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88db      	ldrh	r3, [r3, #6]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d12d      	bne.n	8007146 <USBD_SetAddress+0x76>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	885b      	ldrh	r3, [r3, #2]
 80070ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80070f0:	d829      	bhi.n	8007146 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	885b      	ldrh	r3, [r3, #2]
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b03      	cmp	r3, #3
 8007108:	d104      	bne.n	8007114 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f9bc 	bl	800748a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007112:	e01d      	b.n	8007150 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	7bfa      	ldrb	r2, [r7, #15]
 8007118:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 ff1d 	bl	8007f60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fa86 	bl	8007638 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d004      	beq.n	800713c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800713a:	e009      	b.n	8007150 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007144:	e004      	b.n	8007150 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f99e 	bl	800748a <USBD_CtlError>
  }
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	885b      	ldrh	r3, [r3, #2]
 800716a:	b2da      	uxtb	r2, r3
 800716c:	4b4e      	ldr	r3, [pc, #312]	@ (80072a8 <USBD_SetConfig+0x150>)
 800716e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007170:	4b4d      	ldr	r3, [pc, #308]	@ (80072a8 <USBD_SetConfig+0x150>)
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d905      	bls.n	8007184 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f985 	bl	800748a <USBD_CtlError>
    return USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	e08c      	b.n	800729e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b02      	cmp	r3, #2
 800718e:	d002      	beq.n	8007196 <USBD_SetConfig+0x3e>
 8007190:	2b03      	cmp	r3, #3
 8007192:	d029      	beq.n	80071e8 <USBD_SetConfig+0x90>
 8007194:	e075      	b.n	8007282 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007196:	4b44      	ldr	r3, [pc, #272]	@ (80072a8 <USBD_SetConfig+0x150>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d020      	beq.n	80071e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800719e:	4b42      	ldr	r3, [pc, #264]	@ (80072a8 <USBD_SetConfig+0x150>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071a8:	4b3f      	ldr	r3, [pc, #252]	@ (80072a8 <USBD_SetConfig+0x150>)
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f7fe ffe3 	bl	800617a <USBD_SetClassConfig>
 80071b4:	4603      	mov	r3, r0
 80071b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f962 	bl	800748a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80071ce:	e065      	b.n	800729c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fa31 	bl	8007638 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2203      	movs	r2, #3
 80071da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80071de:	e05d      	b.n	800729c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fa29 	bl	8007638 <USBD_CtlSendStatus>
      break;
 80071e6:	e059      	b.n	800729c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80071e8:	4b2f      	ldr	r3, [pc, #188]	@ (80072a8 <USBD_SetConfig+0x150>)
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d112      	bne.n	8007216 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80071f8:	4b2b      	ldr	r3, [pc, #172]	@ (80072a8 <USBD_SetConfig+0x150>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007202:	4b29      	ldr	r3, [pc, #164]	@ (80072a8 <USBD_SetConfig+0x150>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7fe ffd2 	bl	80061b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa12 	bl	8007638 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007214:	e042      	b.n	800729c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007216:	4b24      	ldr	r3, [pc, #144]	@ (80072a8 <USBD_SetConfig+0x150>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d02a      	beq.n	800727a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f7fe ffc0 	bl	80061b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007232:	4b1d      	ldr	r3, [pc, #116]	@ (80072a8 <USBD_SetConfig+0x150>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	461a      	mov	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800723c:	4b1a      	ldr	r3, [pc, #104]	@ (80072a8 <USBD_SetConfig+0x150>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe ff99 	bl	800617a <USBD_SetClassConfig>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00f      	beq.n	8007272 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007252:	6839      	ldr	r1, [r7, #0]
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f918 	bl	800748a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f7fe ffa5 	bl	80061b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007270:	e014      	b.n	800729c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9e0 	bl	8007638 <USBD_CtlSendStatus>
      break;
 8007278:	e010      	b.n	800729c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9dc 	bl	8007638 <USBD_CtlSendStatus>
      break;
 8007280:	e00c      	b.n	800729c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007282:	6839      	ldr	r1, [r7, #0]
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f900 	bl	800748a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800728a:	4b07      	ldr	r3, [pc, #28]	@ (80072a8 <USBD_SetConfig+0x150>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fe ff8e 	bl	80061b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007296:	2303      	movs	r3, #3
 8007298:	73fb      	strb	r3, [r7, #15]
      break;
 800729a:	bf00      	nop
  }

  return ret;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	20000214 	.word	0x20000214

080072ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	88db      	ldrh	r3, [r3, #6]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d004      	beq.n	80072c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072be:	6839      	ldr	r1, [r7, #0]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 f8e2 	bl	800748a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072c6:	e023      	b.n	8007310 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	dc02      	bgt.n	80072da <USBD_GetConfig+0x2e>
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	dc03      	bgt.n	80072e0 <USBD_GetConfig+0x34>
 80072d8:	e015      	b.n	8007306 <USBD_GetConfig+0x5a>
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d00b      	beq.n	80072f6 <USBD_GetConfig+0x4a>
 80072de:	e012      	b.n	8007306 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3308      	adds	r3, #8
 80072ea:	2201      	movs	r2, #1
 80072ec:	4619      	mov	r1, r3
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f948 	bl	8007584 <USBD_CtlSendData>
        break;
 80072f4:	e00c      	b.n	8007310 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3304      	adds	r3, #4
 80072fa:	2201      	movs	r2, #1
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f940 	bl	8007584 <USBD_CtlSendData>
        break;
 8007304:	e004      	b.n	8007310 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007306:	6839      	ldr	r1, [r7, #0]
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8be 	bl	800748a <USBD_CtlError>
        break;
 800730e:	bf00      	nop
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007328:	b2db      	uxtb	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	2b02      	cmp	r3, #2
 800732e:	d81e      	bhi.n	800736e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	88db      	ldrh	r3, [r3, #6]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d004      	beq.n	8007342 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007338:	6839      	ldr	r1, [r7, #0]
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8a5 	bl	800748a <USBD_CtlError>
        break;
 8007340:	e01a      	b.n	8007378 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d005      	beq.n	800735e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	f043 0202 	orr.w	r2, r3, #2
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	330c      	adds	r3, #12
 8007362:	2202      	movs	r2, #2
 8007364:	4619      	mov	r1, r3
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f90c 	bl	8007584 <USBD_CtlSendData>
      break;
 800736c:	e004      	b.n	8007378 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f88a 	bl	800748a <USBD_CtlError>
      break;
 8007376:	bf00      	nop
  }
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	885b      	ldrh	r3, [r3, #2]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d107      	bne.n	80073a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f94c 	bl	8007638 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80073a0:	e013      	b.n	80073ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	885b      	ldrh	r3, [r3, #2]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d10b      	bne.n	80073c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	889b      	ldrh	r3, [r3, #4]
 80073ae:	0a1b      	lsrs	r3, r3, #8
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f93c 	bl	8007638 <USBD_CtlSendStatus>
}
 80073c0:	e003      	b.n	80073ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 f860 	bl	800748a <USBD_CtlError>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d80b      	bhi.n	8007402 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	885b      	ldrh	r3, [r3, #2]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d10c      	bne.n	800740c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f91c 	bl	8007638 <USBD_CtlSendStatus>
      }
      break;
 8007400:	e004      	b.n	800740c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f840 	bl	800748a <USBD_CtlError>
      break;
 800740a:	e000      	b.n	800740e <USBD_ClrFeature+0x3c>
      break;
 800740c:	bf00      	nop
  }
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	781a      	ldrb	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3301      	adds	r3, #1
 800743e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007440:	68f8      	ldr	r0, [r7, #12]
 8007442:	f7ff fa40 	bl	80068c6 <SWAPBYTE>
 8007446:	4603      	mov	r3, r0
 8007448:	461a      	mov	r2, r3
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	3301      	adds	r3, #1
 8007452:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fa33 	bl	80068c6 <SWAPBYTE>
 8007460:	4603      	mov	r3, r0
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	3301      	adds	r3, #1
 8007472:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f7ff fa26 	bl	80068c6 <SWAPBYTE>
 800747a:	4603      	mov	r3, r0
 800747c:	461a      	mov	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	80da      	strh	r2, [r3, #6]
}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007494:	2180      	movs	r1, #128	@ 0x80
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fcf8 	bl	8007e8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800749c:	2100      	movs	r1, #0
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fcf4 	bl	8007e8c <USBD_LL_StallEP>
}
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d042      	beq.n	8007548 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80074c6:	6938      	ldr	r0, [r7, #16]
 80074c8:	f000 f842 	bl	8007550 <USBD_GetLen>
 80074cc:	4603      	mov	r3, r0
 80074ce:	3301      	adds	r3, #1
 80074d0:	005b      	lsls	r3, r3, #1
 80074d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074d6:	d808      	bhi.n	80074ea <USBD_GetString+0x3e>
 80074d8:	6938      	ldr	r0, [r7, #16]
 80074da:	f000 f839 	bl	8007550 <USBD_GetLen>
 80074de:	4603      	mov	r3, r0
 80074e0:	3301      	adds	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	b29a      	uxth	r2, r3
 80074e8:	e001      	b.n	80074ee <USBD_GetString+0x42>
 80074ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80074f2:	7dfb      	ldrb	r3, [r7, #23]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4413      	add	r3, r2
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80074fe:	7dfb      	ldrb	r3, [r7, #23]
 8007500:	3301      	adds	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007504:	7dfb      	ldrb	r3, [r7, #23]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	4413      	add	r3, r2
 800750a:	2203      	movs	r2, #3
 800750c:	701a      	strb	r2, [r3, #0]
  idx++;
 800750e:	7dfb      	ldrb	r3, [r7, #23]
 8007510:	3301      	adds	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007514:	e013      	b.n	800753e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	4413      	add	r3, r2
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3301      	adds	r3, #1
 8007526:	613b      	str	r3, [r7, #16]
    idx++;
 8007528:	7dfb      	ldrb	r3, [r7, #23]
 800752a:	3301      	adds	r3, #1
 800752c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	4413      	add	r3, r2
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
    idx++;
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	3301      	adds	r3, #1
 800753c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e7      	bne.n	8007516 <USBD_GetString+0x6a>
 8007546:	e000      	b.n	800754a <USBD_GetString+0x9e>
    return;
 8007548:	bf00      	nop
  }
}
 800754a:	3718      	adds	r7, #24
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007560:	e005      	b.n	800756e <USBD_GetLen+0x1e>
  {
    len++;
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	3301      	adds	r3, #1
 8007566:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	3301      	adds	r3, #1
 800756c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1f5      	bne.n	8007562 <USBD_GetLen+0x12>
  }

  return len;
 8007576:	7bfb      	ldrb	r3, [r7, #15]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	60b9      	str	r1, [r7, #8]
 800758e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2202      	movs	r2, #2
 8007594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	2100      	movs	r1, #0
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	f000 fcf7 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	2100      	movs	r1, #0
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fce6 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2203      	movs	r2, #3
 80075ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68ba      	ldr	r2, [r7, #8]
 8007604:	2100      	movs	r1, #0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 fcea 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	60f8      	str	r0, [r7, #12]
 800761e:	60b9      	str	r1, [r7, #8]
 8007620:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	2100      	movs	r1, #0
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 fcd9 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2204      	movs	r2, #4
 8007644:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007648:	2300      	movs	r3, #0
 800764a:	2200      	movs	r2, #0
 800764c:	2100      	movs	r1, #0
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fca5 	bl	8007f9e <USBD_LL_Transmit>

  return USBD_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b082      	sub	sp, #8
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2205      	movs	r2, #5
 800766a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800766e:	2300      	movs	r3, #0
 8007670:	2200      	movs	r2, #0
 8007672:	2100      	movs	r1, #0
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f000 fcb3 	bl	8007fe0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3708      	adds	r7, #8
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007688:	2200      	movs	r2, #0
 800768a:	4912      	ldr	r1, [pc, #72]	@ (80076d4 <MX_USB_DEVICE_Init+0x50>)
 800768c:	4812      	ldr	r0, [pc, #72]	@ (80076d8 <MX_USB_DEVICE_Init+0x54>)
 800768e:	f7fe fcf7 	bl	8006080 <USBD_Init>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d001      	beq.n	800769c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007698:	f7f9 f9b8 	bl	8000a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800769c:	490f      	ldr	r1, [pc, #60]	@ (80076dc <MX_USB_DEVICE_Init+0x58>)
 800769e:	480e      	ldr	r0, [pc, #56]	@ (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076a0:	f7fe fd1e 	bl	80060e0 <USBD_RegisterClass>
 80076a4:	4603      	mov	r3, r0
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d001      	beq.n	80076ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80076aa:	f7f9 f9af 	bl	8000a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80076ae:	490c      	ldr	r1, [pc, #48]	@ (80076e0 <MX_USB_DEVICE_Init+0x5c>)
 80076b0:	4809      	ldr	r0, [pc, #36]	@ (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076b2:	f7fe fc15 	bl	8005ee0 <USBD_CDC_RegisterInterface>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80076bc:	f7f9 f9a6 	bl	8000a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80076c0:	4805      	ldr	r0, [pc, #20]	@ (80076d8 <MX_USB_DEVICE_Init+0x54>)
 80076c2:	f7fe fd43 	bl	800614c <USBD_Start>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80076cc:	f7f9 f99e 	bl	8000a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200000b4 	.word	0x200000b4
 80076d8:	20000218 	.word	0x20000218
 80076dc:	20000020 	.word	0x20000020
 80076e0:	200000a0 	.word	0x200000a0

080076e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80076e8:	2200      	movs	r2, #0
 80076ea:	4905      	ldr	r1, [pc, #20]	@ (8007700 <CDC_Init_FS+0x1c>)
 80076ec:	4805      	ldr	r0, [pc, #20]	@ (8007704 <CDC_Init_FS+0x20>)
 80076ee:	f7fe fc11 	bl	8005f14 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80076f2:	4905      	ldr	r1, [pc, #20]	@ (8007708 <CDC_Init_FS+0x24>)
 80076f4:	4803      	ldr	r0, [pc, #12]	@ (8007704 <CDC_Init_FS+0x20>)
 80076f6:	f7fe fc2f 	bl	8005f58 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80076fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200008f4 	.word	0x200008f4
 8007704:	20000218 	.word	0x20000218
 8007708:	200004f4 	.word	0x200004f4

0800770c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800770c:	b480      	push	{r7}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007712:	4618      	mov	r0, r3
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	6039      	str	r1, [r7, #0]
 8007726:	71fb      	strb	r3, [r7, #7]
 8007728:	4613      	mov	r3, r2
 800772a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800772c:	79fb      	ldrb	r3, [r7, #7]
 800772e:	2b23      	cmp	r3, #35	@ 0x23
 8007730:	d84a      	bhi.n	80077c8 <CDC_Control_FS+0xac>
 8007732:	a201      	add	r2, pc, #4	@ (adr r2, 8007738 <CDC_Control_FS+0x1c>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	080077c9 	.word	0x080077c9
 800773c:	080077c9 	.word	0x080077c9
 8007740:	080077c9 	.word	0x080077c9
 8007744:	080077c9 	.word	0x080077c9
 8007748:	080077c9 	.word	0x080077c9
 800774c:	080077c9 	.word	0x080077c9
 8007750:	080077c9 	.word	0x080077c9
 8007754:	080077c9 	.word	0x080077c9
 8007758:	080077c9 	.word	0x080077c9
 800775c:	080077c9 	.word	0x080077c9
 8007760:	080077c9 	.word	0x080077c9
 8007764:	080077c9 	.word	0x080077c9
 8007768:	080077c9 	.word	0x080077c9
 800776c:	080077c9 	.word	0x080077c9
 8007770:	080077c9 	.word	0x080077c9
 8007774:	080077c9 	.word	0x080077c9
 8007778:	080077c9 	.word	0x080077c9
 800777c:	080077c9 	.word	0x080077c9
 8007780:	080077c9 	.word	0x080077c9
 8007784:	080077c9 	.word	0x080077c9
 8007788:	080077c9 	.word	0x080077c9
 800778c:	080077c9 	.word	0x080077c9
 8007790:	080077c9 	.word	0x080077c9
 8007794:	080077c9 	.word	0x080077c9
 8007798:	080077c9 	.word	0x080077c9
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	080077c9 	.word	0x080077c9
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077c9 	.word	0x080077c9
 80077b4:	080077c9 	.word	0x080077c9
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077c9 	.word	0x080077c9
 80077c0:	080077c9 	.word	0x080077c9
 80077c4:	080077c9 	.word	0x080077c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80077c8:	bf00      	nop
  }

  return (USBD_OK);
 80077ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80077e2:	6879      	ldr	r1, [r7, #4]
 80077e4:	480f      	ldr	r0, [pc, #60]	@ (8007824 <CDC_Receive_FS+0x4c>)
 80077e6:	f7fe fbb7 	bl	8005f58 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80077ea:	480e      	ldr	r0, [pc, #56]	@ (8007824 <CDC_Receive_FS+0x4c>)
 80077ec:	f7fe fc12 	bl	8006014 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t)* Len;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	73fb      	strb	r3, [r7, #15]
  memset (buffer, '\0', 64);
 80077f6:	2240      	movs	r2, #64	@ 0x40
 80077f8:	2100      	movs	r1, #0
 80077fa:	480b      	ldr	r0, [pc, #44]	@ (8007828 <CDC_Receive_FS+0x50>)
 80077fc:	f000 fc88 	bl	8008110 <memset>
  memcpy(buffer, Buf, len);
 8007800:	7bfb      	ldrb	r3, [r7, #15]
 8007802:	461a      	mov	r2, r3
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4808      	ldr	r0, [pc, #32]	@ (8007828 <CDC_Receive_FS+0x50>)
 8007808:	f000 fcb6 	bl	8008178 <memcpy>
  memset (Buf, '\0', len);
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	461a      	mov	r2, r3
 8007810:	2100      	movs	r1, #0
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fc7c 	bl	8008110 <memset>
  return (USBD_OK);
 8007818:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000218 	.word	0x20000218
 8007828:	200001c4 	.word	0x200001c4

0800782c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800783c:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <CDC_Transmit_FS+0x48>)
 800783e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007842:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800784e:	2301      	movs	r3, #1
 8007850:	e00b      	b.n	800786a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007852:	887b      	ldrh	r3, [r7, #2]
 8007854:	461a      	mov	r2, r3
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4806      	ldr	r0, [pc, #24]	@ (8007874 <CDC_Transmit_FS+0x48>)
 800785a:	f7fe fb5b 	bl	8005f14 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800785e:	4805      	ldr	r0, [pc, #20]	@ (8007874 <CDC_Transmit_FS+0x48>)
 8007860:	f7fe fb98 	bl	8005f94 <USBD_CDC_TransmitPacket>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007868:	7bfb      	ldrb	r3, [r7, #15]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	20000218 	.word	0x20000218

08007878 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007878:	b480      	push	{r7}
 800787a:	b087      	sub	sp, #28
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800788a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800788e:	4618      	mov	r0, r3
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	6039      	str	r1, [r7, #0]
 80078a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2212      	movs	r2, #18
 80078ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078ae:	4b03      	ldr	r3, [pc, #12]	@ (80078bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	200000d0 	.word	0x200000d0

080078c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2204      	movs	r2, #4
 80078d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078d2:	4b03      	ldr	r3, [pc, #12]	@ (80078e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	200000e4 	.word	0x200000e4

080078e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	4603      	mov	r3, r0
 80078ec:	6039      	str	r1, [r7, #0]
 80078ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078f0:	79fb      	ldrb	r3, [r7, #7]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d105      	bne.n	8007902 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	4907      	ldr	r1, [pc, #28]	@ (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
 80078fa:	4808      	ldr	r0, [pc, #32]	@ (800791c <USBD_FS_ProductStrDescriptor+0x38>)
 80078fc:	f7ff fdd6 	bl	80074ac <USBD_GetString>
 8007900:	e004      	b.n	800790c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	4904      	ldr	r1, [pc, #16]	@ (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
 8007906:	4805      	ldr	r0, [pc, #20]	@ (800791c <USBD_FS_ProductStrDescriptor+0x38>)
 8007908:	f7ff fdd0 	bl	80074ac <USBD_GetString>
  }
  return USBD_StrDesc;
 800790c:	4b02      	ldr	r3, [pc, #8]	@ (8007918 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000cf4 	.word	0x20000cf4
 800791c:	08008a6c 	.word	0x08008a6c

08007920 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	4603      	mov	r3, r0
 8007928:	6039      	str	r1, [r7, #0]
 800792a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800792c:	683a      	ldr	r2, [r7, #0]
 800792e:	4904      	ldr	r1, [pc, #16]	@ (8007940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007930:	4804      	ldr	r0, [pc, #16]	@ (8007944 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007932:	f7ff fdbb 	bl	80074ac <USBD_GetString>
  return USBD_StrDesc;
 8007936:	4b02      	ldr	r3, [pc, #8]	@ (8007940 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	20000cf4 	.word	0x20000cf4
 8007944:	08008a84 	.word	0x08008a84

08007948 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	221a      	movs	r2, #26
 8007958:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800795a:	f000 f843 	bl	80079e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800795e:	4b02      	ldr	r3, [pc, #8]	@ (8007968 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	200000e8 	.word	0x200000e8

0800796c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	4603      	mov	r3, r0
 8007974:	6039      	str	r1, [r7, #0]
 8007976:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d105      	bne.n	800798a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800797e:	683a      	ldr	r2, [r7, #0]
 8007980:	4907      	ldr	r1, [pc, #28]	@ (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007982:	4808      	ldr	r0, [pc, #32]	@ (80079a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007984:	f7ff fd92 	bl	80074ac <USBD_GetString>
 8007988:	e004      	b.n	8007994 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4904      	ldr	r1, [pc, #16]	@ (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800798e:	4805      	ldr	r0, [pc, #20]	@ (80079a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007990:	f7ff fd8c 	bl	80074ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007994:	4b02      	ldr	r3, [pc, #8]	@ (80079a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007996:	4618      	mov	r0, r3
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	20000cf4 	.word	0x20000cf4
 80079a4:	08008a98 	.word	0x08008a98

080079a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	4603      	mov	r3, r0
 80079b0:	6039      	str	r1, [r7, #0]
 80079b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079b4:	79fb      	ldrb	r3, [r7, #7]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d105      	bne.n	80079c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ba:	683a      	ldr	r2, [r7, #0]
 80079bc:	4907      	ldr	r1, [pc, #28]	@ (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079be:	4808      	ldr	r0, [pc, #32]	@ (80079e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079c0:	f7ff fd74 	bl	80074ac <USBD_GetString>
 80079c4:	e004      	b.n	80079d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	4904      	ldr	r1, [pc, #16]	@ (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079ca:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079cc:	f7ff fd6e 	bl	80074ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80079d0:	4b02      	ldr	r3, [pc, #8]	@ (80079dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20000cf4 	.word	0x20000cf4
 80079e0:	08008aa4 	.word	0x08008aa4

080079e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b084      	sub	sp, #16
 80079e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007a28 <Get_SerialNum+0x44>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079f0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <Get_SerialNum+0x48>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007a30 <Get_SerialNum+0x4c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d009      	beq.n	8007a1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a0a:	2208      	movs	r2, #8
 8007a0c:	4909      	ldr	r1, [pc, #36]	@ (8007a34 <Get_SerialNum+0x50>)
 8007a0e:	68f8      	ldr	r0, [r7, #12]
 8007a10:	f000 f814 	bl	8007a3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a14:	2204      	movs	r2, #4
 8007a16:	4908      	ldr	r1, [pc, #32]	@ (8007a38 <Get_SerialNum+0x54>)
 8007a18:	68b8      	ldr	r0, [r7, #8]
 8007a1a:	f000 f80f 	bl	8007a3c <IntToUnicode>
  }
}
 8007a1e:	bf00      	nop
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	1fff7a10 	.word	0x1fff7a10
 8007a2c:	1fff7a14 	.word	0x1fff7a14
 8007a30:	1fff7a18 	.word	0x1fff7a18
 8007a34:	200000ea 	.word	0x200000ea
 8007a38:	200000fa 	.word	0x200000fa

08007a3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b087      	sub	sp, #28
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	60f8      	str	r0, [r7, #12]
 8007a44:	60b9      	str	r1, [r7, #8]
 8007a46:	4613      	mov	r3, r2
 8007a48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a4e:	2300      	movs	r3, #0
 8007a50:	75fb      	strb	r3, [r7, #23]
 8007a52:	e027      	b.n	8007aa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	0f1b      	lsrs	r3, r3, #28
 8007a58:	2b09      	cmp	r3, #9
 8007a5a:	d80b      	bhi.n	8007a74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	0f1b      	lsrs	r3, r3, #28
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	7dfb      	ldrb	r3, [r7, #23]
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	4619      	mov	r1, r3
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	440b      	add	r3, r1
 8007a6c:	3230      	adds	r2, #48	@ 0x30
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	e00a      	b.n	8007a8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0f1b      	lsrs	r3, r3, #28
 8007a78:	b2da      	uxtb	r2, r3
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	4619      	mov	r1, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	440b      	add	r3, r1
 8007a84:	3237      	adds	r2, #55	@ 0x37
 8007a86:	b2d2      	uxtb	r2, r2
 8007a88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	011b      	lsls	r3, r3, #4
 8007a8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	3301      	adds	r3, #1
 8007a96:	68ba      	ldr	r2, [r7, #8]
 8007a98:	4413      	add	r3, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	75fb      	strb	r3, [r7, #23]
 8007aa4:	7dfa      	ldrb	r2, [r7, #23]
 8007aa6:	79fb      	ldrb	r3, [r7, #7]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3d3      	bcc.n	8007a54 <IntToUnicode+0x18>
  }
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
	...

08007abc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b08a      	sub	sp, #40	@ 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ac4:	f107 0314 	add.w	r3, r7, #20
 8007ac8:	2200      	movs	r2, #0
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	609a      	str	r2, [r3, #8]
 8007ad0:	60da      	str	r2, [r3, #12]
 8007ad2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007adc:	d13a      	bne.n	8007b54 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ade:	2300      	movs	r3, #0
 8007ae0:	613b      	str	r3, [r7, #16]
 8007ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007ae8:	f043 0301 	orr.w	r3, r3, #1
 8007aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8007aee:	4b1b      	ldr	r3, [pc, #108]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af2:	f003 0301 	and.w	r3, r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007afa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b00:	2302      	movs	r3, #2
 8007b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b04:	2300      	movs	r3, #0
 8007b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b0c:	230a      	movs	r3, #10
 8007b0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b10:	f107 0314 	add.w	r3, r7, #20
 8007b14:	4619      	mov	r1, r3
 8007b16:	4812      	ldr	r0, [pc, #72]	@ (8007b60 <HAL_PCD_MspInit+0xa4>)
 8007b18:	f7f9 fa42 	bl	8000fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b20:	4a0e      	ldr	r2, [pc, #56]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	6353      	str	r3, [r2, #52]	@ 0x34
 8007b28:	2300      	movs	r3, #0
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b30:	4a0a      	ldr	r2, [pc, #40]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007b36:	6453      	str	r3, [r2, #68]	@ 0x44
 8007b38:	4b08      	ldr	r3, [pc, #32]	@ (8007b5c <HAL_PCD_MspInit+0xa0>)
 8007b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b44:	2200      	movs	r2, #0
 8007b46:	2100      	movs	r1, #0
 8007b48:	2043      	movs	r0, #67	@ 0x43
 8007b4a:	f7f9 f9f2 	bl	8000f32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b4e:	2043      	movs	r0, #67	@ 0x43
 8007b50:	f7f9 fa0b 	bl	8000f6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b54:	bf00      	nop
 8007b56:	3728      	adds	r7, #40	@ 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	40023800 	.word	0x40023800
 8007b60:	40020000 	.word	0x40020000

08007b64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b78:	4619      	mov	r1, r3
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	f7fe fb33 	bl	80061e6 <USBD_LL_SetupStage>
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007b9a:	78fa      	ldrb	r2, [r7, #3]
 8007b9c:	6879      	ldr	r1, [r7, #4]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	440b      	add	r3, r1
 8007ba8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	f7fe fb6d 	bl	8006290 <USBD_LL_DataOutStage>
}
 8007bb6:	bf00      	nop
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007bd0:	78fa      	ldrb	r2, [r7, #3]
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	00db      	lsls	r3, r3, #3
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	3320      	adds	r3, #32
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	4619      	mov	r1, r3
 8007be6:	f7fe fc06 	bl	80063f6 <USBD_LL_DataInStage>
}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fd40 	bl	8006686 <USBD_LL_SOF>
}
 8007c06:	bf00      	nop
 8007c08:	3708      	adds	r7, #8
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c0e:	b580      	push	{r7, lr}
 8007c10:	b084      	sub	sp, #16
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c16:	2301      	movs	r3, #1
 8007c18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	79db      	ldrb	r3, [r3, #7]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d001      	beq.n	8007c26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c22:	f7f8 fef3 	bl	8000a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c2c:	7bfa      	ldrb	r2, [r7, #15]
 8007c2e:	4611      	mov	r1, r2
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7fe fce4 	bl	80065fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f7fe fc8c 	bl	800655a <USBD_LL_Reset>
}
 8007c42:	bf00      	nop
 8007c44:	3710      	adds	r7, #16
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7fe fcdf 	bl	800661e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6812      	ldr	r2, [r2, #0]
 8007c6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	7adb      	ldrb	r3, [r3, #11]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d005      	beq.n	8007c8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c80:	4b04      	ldr	r3, [pc, #16]	@ (8007c94 <HAL_PCD_SuspendCallback+0x48>)
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	4a03      	ldr	r2, [pc, #12]	@ (8007c94 <HAL_PCD_SuspendCallback+0x48>)
 8007c86:	f043 0306 	orr.w	r3, r3, #6
 8007c8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	e000ed00 	.word	0xe000ed00

08007c98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f7fe fcd5 	bl	8006656 <USBD_LL_Resume>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cc6:	78fa      	ldrb	r2, [r7, #3]
 8007cc8:	4611      	mov	r1, r2
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f7fe fd2d 	bl	800672a <USBD_LL_IsoOUTIncomplete>
}
 8007cd0:	bf00      	nop
 8007cd2:	3708      	adds	r7, #8
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}

08007cd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007cea:	78fa      	ldrb	r2, [r7, #3]
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fce9 	bl	80066c6 <USBD_LL_IsoINIncomplete>
}
 8007cf4:	bf00      	nop
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fd3f 	bl	800678e <USBD_LL_DevConnected>
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b082      	sub	sp, #8
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe fd3c 	bl	80067a4 <USBD_LL_DevDisconnected>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d13c      	bne.n	8007dbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d44:	4a20      	ldr	r2, [pc, #128]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d54:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007d5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d5e:	2204      	movs	r2, #4
 8007d60:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d64:	2202      	movs	r2, #2
 8007d66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d68:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d6e:	4b16      	ldr	r3, [pc, #88]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d70:	2202      	movs	r2, #2
 8007d72:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d74:	4b14      	ldr	r3, [pc, #80]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d76:	2200      	movs	r2, #0
 8007d78:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d7a:	4b13      	ldr	r3, [pc, #76]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d80:	4b11      	ldr	r3, [pc, #68]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d86:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d8e:	2200      	movs	r2, #0
 8007d90:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d92:	480d      	ldr	r0, [pc, #52]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007d94:	f7fa fac6 	bl	8002324 <HAL_PCD_Init>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d9e:	f7f8 fe35 	bl	8000a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007da2:	2180      	movs	r1, #128	@ 0x80
 8007da4:	4808      	ldr	r0, [pc, #32]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007da6:	f7fb fcf2 	bl	800378e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007daa:	2240      	movs	r2, #64	@ 0x40
 8007dac:	2100      	movs	r1, #0
 8007dae:	4806      	ldr	r0, [pc, #24]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007db0:	f7fb fca6 	bl	8003700 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007db4:	2280      	movs	r2, #128	@ 0x80
 8007db6:	2101      	movs	r1, #1
 8007db8:	4803      	ldr	r0, [pc, #12]	@ (8007dc8 <USBD_LL_Init+0x94>)
 8007dba:	f7fb fca1 	bl	8003700 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3708      	adds	r7, #8
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	20000ef4 	.word	0x20000ef4

08007dcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7fa fbad 	bl	8002542 <HAL_PCD_Start>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 f942 	bl	8008078 <USBD_Get_USB_Status>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	4608      	mov	r0, r1
 8007e0c:	4611      	mov	r1, r2
 8007e0e:	461a      	mov	r2, r3
 8007e10:	4603      	mov	r3, r0
 8007e12:	70fb      	strb	r3, [r7, #3]
 8007e14:	460b      	mov	r3, r1
 8007e16:	70bb      	strb	r3, [r7, #2]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007e2a:	78bb      	ldrb	r3, [r7, #2]
 8007e2c:	883a      	ldrh	r2, [r7, #0]
 8007e2e:	78f9      	ldrb	r1, [r7, #3]
 8007e30:	f7fb f881 	bl	8002f36 <HAL_PCD_EP_Open>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 f91c 	bl	8008078 <USBD_Get_USB_Status>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b084      	sub	sp, #16
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7fb f8cc 	bl	800300a <HAL_PCD_EP_Close>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f000 f8fd 	bl	8008078 <USBD_Get_USB_Status>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e82:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ea6:	78fa      	ldrb	r2, [r7, #3]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fb f984 	bl	80031b8 <HAL_PCD_EP_SetStall>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f000 f8de 	bl	8008078 <USBD_Get_USB_Status>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eca:	b580      	push	{r7, lr}
 8007ecc:	b084      	sub	sp, #16
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eda:	2300      	movs	r3, #0
 8007edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007ee4:	78fa      	ldrb	r2, [r7, #3]
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fb f9c8 	bl	800327e <HAL_PCD_EP_ClrStall>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f000 f8bf 	bl	8008078 <USBD_Get_USB_Status>
 8007efa:	4603      	mov	r3, r0
 8007efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b085      	sub	sp, #20
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	da0b      	bge.n	8007f3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f2a:	68f9      	ldr	r1, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	3316      	adds	r3, #22
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	e00b      	b.n	8007f54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f42:	68f9      	ldr	r1, [r7, #12]
 8007f44:	4613      	mov	r3, r2
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	440b      	add	r3, r1
 8007f4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007f52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007f7a:	78fa      	ldrb	r2, [r7, #3]
 8007f7c:	4611      	mov	r1, r2
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fa ffb5 	bl	8002eee <HAL_PCD_SetAddress>
 8007f84:	4603      	mov	r3, r0
 8007f86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f88:	7bfb      	ldrb	r3, [r7, #15]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 f874 	bl	8008078 <USBD_Get_USB_Status>
 8007f90:	4603      	mov	r3, r0
 8007f92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3710      	adds	r7, #16
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b086      	sub	sp, #24
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	607a      	str	r2, [r7, #4]
 8007fa8:	603b      	str	r3, [r7, #0]
 8007faa:	460b      	mov	r3, r1
 8007fac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007fbc:	7af9      	ldrb	r1, [r7, #11]
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	f7fb f8bf 	bl	8003144 <HAL_PCD_EP_Transmit>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 f853 	bl	8008078 <USBD_Get_USB_Status>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3718      	adds	r7, #24
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b086      	sub	sp, #24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	603b      	str	r3, [r7, #0]
 8007fec:	460b      	mov	r3, r1
 8007fee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ffe:	7af9      	ldrb	r1, [r7, #11]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	f7fb f84b 	bl	800309e <HAL_PCD_EP_Receive>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	4618      	mov	r0, r3
 8008010:	f000 f832 	bl	8008078 <USBD_Get_USB_Status>
 8008014:	4603      	mov	r3, r0
 8008016:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008018:	7dbb      	ldrb	r3, [r7, #22]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008022:	b580      	push	{r7, lr}
 8008024:	b082      	sub	sp, #8
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
 800802a:	460b      	mov	r3, r1
 800802c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008034:	78fa      	ldrb	r2, [r7, #3]
 8008036:	4611      	mov	r1, r2
 8008038:	4618      	mov	r0, r3
 800803a:	f7fb f86b 	bl	8003114 <HAL_PCD_EP_GetRxCount>
 800803e:	4603      	mov	r3, r0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008050:	4b03      	ldr	r3, [pc, #12]	@ (8008060 <USBD_static_malloc+0x18>)
}
 8008052:	4618      	mov	r0, r3
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	200013d8 	.word	0x200013d8

08008064 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]

}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d817      	bhi.n	80080bc <USBD_Get_USB_Status+0x44>
 800808c:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <USBD_Get_USB_Status+0x1c>)
 800808e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008092:	bf00      	nop
 8008094:	080080a5 	.word	0x080080a5
 8008098:	080080ab 	.word	0x080080ab
 800809c:	080080b1 	.word	0x080080b1
 80080a0:	080080b7 	.word	0x080080b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e00b      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080aa:	2303      	movs	r3, #3
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	e008      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
    break;
 80080b4:	e005      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080b6:	2303      	movs	r3, #3
 80080b8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ba:	e002      	b.n	80080c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080bc:	2303      	movs	r3, #3
 80080be:	73fb      	strb	r3, [r7, #15]
    break;
 80080c0:	bf00      	nop
  }
  return usb_status;
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <siprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	b500      	push	{lr}
 80080d4:	b09c      	sub	sp, #112	@ 0x70
 80080d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80080d8:	9002      	str	r0, [sp, #8]
 80080da:	9006      	str	r0, [sp, #24]
 80080dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80080e0:	4809      	ldr	r0, [pc, #36]	@ (8008108 <siprintf+0x38>)
 80080e2:	9107      	str	r1, [sp, #28]
 80080e4:	9104      	str	r1, [sp, #16]
 80080e6:	4909      	ldr	r1, [pc, #36]	@ (800810c <siprintf+0x3c>)
 80080e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	a902      	add	r1, sp, #8
 80080f4:	f000 f9a2 	bl	800843c <_svfiprintf_r>
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	b01c      	add	sp, #112	@ 0x70
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	20000104 	.word	0x20000104
 800810c:	ffff0208 	.word	0xffff0208

08008110 <memset>:
 8008110:	4402      	add	r2, r0
 8008112:	4603      	mov	r3, r0
 8008114:	4293      	cmp	r3, r2
 8008116:	d100      	bne.n	800811a <memset+0xa>
 8008118:	4770      	bx	lr
 800811a:	f803 1b01 	strb.w	r1, [r3], #1
 800811e:	e7f9      	b.n	8008114 <memset+0x4>

08008120 <__errno>:
 8008120:	4b01      	ldr	r3, [pc, #4]	@ (8008128 <__errno+0x8>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop
 8008128:	20000104 	.word	0x20000104

0800812c <__libc_init_array>:
 800812c:	b570      	push	{r4, r5, r6, lr}
 800812e:	4d0d      	ldr	r5, [pc, #52]	@ (8008164 <__libc_init_array+0x38>)
 8008130:	4c0d      	ldr	r4, [pc, #52]	@ (8008168 <__libc_init_array+0x3c>)
 8008132:	1b64      	subs	r4, r4, r5
 8008134:	10a4      	asrs	r4, r4, #2
 8008136:	2600      	movs	r6, #0
 8008138:	42a6      	cmp	r6, r4
 800813a:	d109      	bne.n	8008150 <__libc_init_array+0x24>
 800813c:	4d0b      	ldr	r5, [pc, #44]	@ (800816c <__libc_init_array+0x40>)
 800813e:	4c0c      	ldr	r4, [pc, #48]	@ (8008170 <__libc_init_array+0x44>)
 8008140:	f000 fc66 	bl	8008a10 <_init>
 8008144:	1b64      	subs	r4, r4, r5
 8008146:	10a4      	asrs	r4, r4, #2
 8008148:	2600      	movs	r6, #0
 800814a:	42a6      	cmp	r6, r4
 800814c:	d105      	bne.n	800815a <__libc_init_array+0x2e>
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	f855 3b04 	ldr.w	r3, [r5], #4
 8008154:	4798      	blx	r3
 8008156:	3601      	adds	r6, #1
 8008158:	e7ee      	b.n	8008138 <__libc_init_array+0xc>
 800815a:	f855 3b04 	ldr.w	r3, [r5], #4
 800815e:	4798      	blx	r3
 8008160:	3601      	adds	r6, #1
 8008162:	e7f2      	b.n	800814a <__libc_init_array+0x1e>
 8008164:	08008b08 	.word	0x08008b08
 8008168:	08008b08 	.word	0x08008b08
 800816c:	08008b08 	.word	0x08008b08
 8008170:	08008b0c 	.word	0x08008b0c

08008174 <__retarget_lock_acquire_recursive>:
 8008174:	4770      	bx	lr

08008176 <__retarget_lock_release_recursive>:
 8008176:	4770      	bx	lr

08008178 <memcpy>:
 8008178:	440a      	add	r2, r1
 800817a:	4291      	cmp	r1, r2
 800817c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008180:	d100      	bne.n	8008184 <memcpy+0xc>
 8008182:	4770      	bx	lr
 8008184:	b510      	push	{r4, lr}
 8008186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800818a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800818e:	4291      	cmp	r1, r2
 8008190:	d1f9      	bne.n	8008186 <memcpy+0xe>
 8008192:	bd10      	pop	{r4, pc}

08008194 <_free_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4605      	mov	r5, r0
 8008198:	2900      	cmp	r1, #0
 800819a:	d041      	beq.n	8008220 <_free_r+0x8c>
 800819c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a0:	1f0c      	subs	r4, r1, #4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	bfb8      	it	lt
 80081a6:	18e4      	addlt	r4, r4, r3
 80081a8:	f000 f8e0 	bl	800836c <__malloc_lock>
 80081ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008224 <_free_r+0x90>)
 80081ae:	6813      	ldr	r3, [r2, #0]
 80081b0:	b933      	cbnz	r3, 80081c0 <_free_r+0x2c>
 80081b2:	6063      	str	r3, [r4, #4]
 80081b4:	6014      	str	r4, [r2, #0]
 80081b6:	4628      	mov	r0, r5
 80081b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081bc:	f000 b8dc 	b.w	8008378 <__malloc_unlock>
 80081c0:	42a3      	cmp	r3, r4
 80081c2:	d908      	bls.n	80081d6 <_free_r+0x42>
 80081c4:	6820      	ldr	r0, [r4, #0]
 80081c6:	1821      	adds	r1, r4, r0
 80081c8:	428b      	cmp	r3, r1
 80081ca:	bf01      	itttt	eq
 80081cc:	6819      	ldreq	r1, [r3, #0]
 80081ce:	685b      	ldreq	r3, [r3, #4]
 80081d0:	1809      	addeq	r1, r1, r0
 80081d2:	6021      	streq	r1, [r4, #0]
 80081d4:	e7ed      	b.n	80081b2 <_free_r+0x1e>
 80081d6:	461a      	mov	r2, r3
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	b10b      	cbz	r3, 80081e0 <_free_r+0x4c>
 80081dc:	42a3      	cmp	r3, r4
 80081de:	d9fa      	bls.n	80081d6 <_free_r+0x42>
 80081e0:	6811      	ldr	r1, [r2, #0]
 80081e2:	1850      	adds	r0, r2, r1
 80081e4:	42a0      	cmp	r0, r4
 80081e6:	d10b      	bne.n	8008200 <_free_r+0x6c>
 80081e8:	6820      	ldr	r0, [r4, #0]
 80081ea:	4401      	add	r1, r0
 80081ec:	1850      	adds	r0, r2, r1
 80081ee:	4283      	cmp	r3, r0
 80081f0:	6011      	str	r1, [r2, #0]
 80081f2:	d1e0      	bne.n	80081b6 <_free_r+0x22>
 80081f4:	6818      	ldr	r0, [r3, #0]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	6053      	str	r3, [r2, #4]
 80081fa:	4408      	add	r0, r1
 80081fc:	6010      	str	r0, [r2, #0]
 80081fe:	e7da      	b.n	80081b6 <_free_r+0x22>
 8008200:	d902      	bls.n	8008208 <_free_r+0x74>
 8008202:	230c      	movs	r3, #12
 8008204:	602b      	str	r3, [r5, #0]
 8008206:	e7d6      	b.n	80081b6 <_free_r+0x22>
 8008208:	6820      	ldr	r0, [r4, #0]
 800820a:	1821      	adds	r1, r4, r0
 800820c:	428b      	cmp	r3, r1
 800820e:	bf04      	itt	eq
 8008210:	6819      	ldreq	r1, [r3, #0]
 8008212:	685b      	ldreq	r3, [r3, #4]
 8008214:	6063      	str	r3, [r4, #4]
 8008216:	bf04      	itt	eq
 8008218:	1809      	addeq	r1, r1, r0
 800821a:	6021      	streq	r1, [r4, #0]
 800821c:	6054      	str	r4, [r2, #4]
 800821e:	e7ca      	b.n	80081b6 <_free_r+0x22>
 8008220:	bd38      	pop	{r3, r4, r5, pc}
 8008222:	bf00      	nop
 8008224:	2000173c 	.word	0x2000173c

08008228 <sbrk_aligned>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	4e0f      	ldr	r6, [pc, #60]	@ (8008268 <sbrk_aligned+0x40>)
 800822c:	460c      	mov	r4, r1
 800822e:	6831      	ldr	r1, [r6, #0]
 8008230:	4605      	mov	r5, r0
 8008232:	b911      	cbnz	r1, 800823a <sbrk_aligned+0x12>
 8008234:	f000 fba6 	bl	8008984 <_sbrk_r>
 8008238:	6030      	str	r0, [r6, #0]
 800823a:	4621      	mov	r1, r4
 800823c:	4628      	mov	r0, r5
 800823e:	f000 fba1 	bl	8008984 <_sbrk_r>
 8008242:	1c43      	adds	r3, r0, #1
 8008244:	d103      	bne.n	800824e <sbrk_aligned+0x26>
 8008246:	f04f 34ff 	mov.w	r4, #4294967295
 800824a:	4620      	mov	r0, r4
 800824c:	bd70      	pop	{r4, r5, r6, pc}
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d0f8      	beq.n	800824a <sbrk_aligned+0x22>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 fb92 	bl	8008984 <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d1f2      	bne.n	800824a <sbrk_aligned+0x22>
 8008264:	e7ef      	b.n	8008246 <sbrk_aligned+0x1e>
 8008266:	bf00      	nop
 8008268:	20001738 	.word	0x20001738

0800826c <_malloc_r>:
 800826c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008270:	1ccd      	adds	r5, r1, #3
 8008272:	f025 0503 	bic.w	r5, r5, #3
 8008276:	3508      	adds	r5, #8
 8008278:	2d0c      	cmp	r5, #12
 800827a:	bf38      	it	cc
 800827c:	250c      	movcc	r5, #12
 800827e:	2d00      	cmp	r5, #0
 8008280:	4606      	mov	r6, r0
 8008282:	db01      	blt.n	8008288 <_malloc_r+0x1c>
 8008284:	42a9      	cmp	r1, r5
 8008286:	d904      	bls.n	8008292 <_malloc_r+0x26>
 8008288:	230c      	movs	r3, #12
 800828a:	6033      	str	r3, [r6, #0]
 800828c:	2000      	movs	r0, #0
 800828e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008292:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008368 <_malloc_r+0xfc>
 8008296:	f000 f869 	bl	800836c <__malloc_lock>
 800829a:	f8d8 3000 	ldr.w	r3, [r8]
 800829e:	461c      	mov	r4, r3
 80082a0:	bb44      	cbnz	r4, 80082f4 <_malloc_r+0x88>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff ffbf 	bl	8008228 <sbrk_aligned>
 80082aa:	1c43      	adds	r3, r0, #1
 80082ac:	4604      	mov	r4, r0
 80082ae:	d158      	bne.n	8008362 <_malloc_r+0xf6>
 80082b0:	f8d8 4000 	ldr.w	r4, [r8]
 80082b4:	4627      	mov	r7, r4
 80082b6:	2f00      	cmp	r7, #0
 80082b8:	d143      	bne.n	8008342 <_malloc_r+0xd6>
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d04b      	beq.n	8008356 <_malloc_r+0xea>
 80082be:	6823      	ldr	r3, [r4, #0]
 80082c0:	4639      	mov	r1, r7
 80082c2:	4630      	mov	r0, r6
 80082c4:	eb04 0903 	add.w	r9, r4, r3
 80082c8:	f000 fb5c 	bl	8008984 <_sbrk_r>
 80082cc:	4581      	cmp	r9, r0
 80082ce:	d142      	bne.n	8008356 <_malloc_r+0xea>
 80082d0:	6821      	ldr	r1, [r4, #0]
 80082d2:	1a6d      	subs	r5, r5, r1
 80082d4:	4629      	mov	r1, r5
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff ffa6 	bl	8008228 <sbrk_aligned>
 80082dc:	3001      	adds	r0, #1
 80082de:	d03a      	beq.n	8008356 <_malloc_r+0xea>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	442b      	add	r3, r5
 80082e4:	6023      	str	r3, [r4, #0]
 80082e6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	bb62      	cbnz	r2, 8008348 <_malloc_r+0xdc>
 80082ee:	f8c8 7000 	str.w	r7, [r8]
 80082f2:	e00f      	b.n	8008314 <_malloc_r+0xa8>
 80082f4:	6822      	ldr	r2, [r4, #0]
 80082f6:	1b52      	subs	r2, r2, r5
 80082f8:	d420      	bmi.n	800833c <_malloc_r+0xd0>
 80082fa:	2a0b      	cmp	r2, #11
 80082fc:	d917      	bls.n	800832e <_malloc_r+0xc2>
 80082fe:	1961      	adds	r1, r4, r5
 8008300:	42a3      	cmp	r3, r4
 8008302:	6025      	str	r5, [r4, #0]
 8008304:	bf18      	it	ne
 8008306:	6059      	strne	r1, [r3, #4]
 8008308:	6863      	ldr	r3, [r4, #4]
 800830a:	bf08      	it	eq
 800830c:	f8c8 1000 	streq.w	r1, [r8]
 8008310:	5162      	str	r2, [r4, r5]
 8008312:	604b      	str	r3, [r1, #4]
 8008314:	4630      	mov	r0, r6
 8008316:	f000 f82f 	bl	8008378 <__malloc_unlock>
 800831a:	f104 000b 	add.w	r0, r4, #11
 800831e:	1d23      	adds	r3, r4, #4
 8008320:	f020 0007 	bic.w	r0, r0, #7
 8008324:	1ac2      	subs	r2, r0, r3
 8008326:	bf1c      	itt	ne
 8008328:	1a1b      	subne	r3, r3, r0
 800832a:	50a3      	strne	r3, [r4, r2]
 800832c:	e7af      	b.n	800828e <_malloc_r+0x22>
 800832e:	6862      	ldr	r2, [r4, #4]
 8008330:	42a3      	cmp	r3, r4
 8008332:	bf0c      	ite	eq
 8008334:	f8c8 2000 	streq.w	r2, [r8]
 8008338:	605a      	strne	r2, [r3, #4]
 800833a:	e7eb      	b.n	8008314 <_malloc_r+0xa8>
 800833c:	4623      	mov	r3, r4
 800833e:	6864      	ldr	r4, [r4, #4]
 8008340:	e7ae      	b.n	80082a0 <_malloc_r+0x34>
 8008342:	463c      	mov	r4, r7
 8008344:	687f      	ldr	r7, [r7, #4]
 8008346:	e7b6      	b.n	80082b6 <_malloc_r+0x4a>
 8008348:	461a      	mov	r2, r3
 800834a:	685b      	ldr	r3, [r3, #4]
 800834c:	42a3      	cmp	r3, r4
 800834e:	d1fb      	bne.n	8008348 <_malloc_r+0xdc>
 8008350:	2300      	movs	r3, #0
 8008352:	6053      	str	r3, [r2, #4]
 8008354:	e7de      	b.n	8008314 <_malloc_r+0xa8>
 8008356:	230c      	movs	r3, #12
 8008358:	6033      	str	r3, [r6, #0]
 800835a:	4630      	mov	r0, r6
 800835c:	f000 f80c 	bl	8008378 <__malloc_unlock>
 8008360:	e794      	b.n	800828c <_malloc_r+0x20>
 8008362:	6005      	str	r5, [r0, #0]
 8008364:	e7d6      	b.n	8008314 <_malloc_r+0xa8>
 8008366:	bf00      	nop
 8008368:	2000173c 	.word	0x2000173c

0800836c <__malloc_lock>:
 800836c:	4801      	ldr	r0, [pc, #4]	@ (8008374 <__malloc_lock+0x8>)
 800836e:	f7ff bf01 	b.w	8008174 <__retarget_lock_acquire_recursive>
 8008372:	bf00      	nop
 8008374:	20001734 	.word	0x20001734

08008378 <__malloc_unlock>:
 8008378:	4801      	ldr	r0, [pc, #4]	@ (8008380 <__malloc_unlock+0x8>)
 800837a:	f7ff befc 	b.w	8008176 <__retarget_lock_release_recursive>
 800837e:	bf00      	nop
 8008380:	20001734 	.word	0x20001734

08008384 <__ssputs_r>:
 8008384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008388:	688e      	ldr	r6, [r1, #8]
 800838a:	461f      	mov	r7, r3
 800838c:	42be      	cmp	r6, r7
 800838e:	680b      	ldr	r3, [r1, #0]
 8008390:	4682      	mov	sl, r0
 8008392:	460c      	mov	r4, r1
 8008394:	4690      	mov	r8, r2
 8008396:	d82d      	bhi.n	80083f4 <__ssputs_r+0x70>
 8008398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800839c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80083a0:	d026      	beq.n	80083f0 <__ssputs_r+0x6c>
 80083a2:	6965      	ldr	r5, [r4, #20]
 80083a4:	6909      	ldr	r1, [r1, #16]
 80083a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083aa:	eba3 0901 	sub.w	r9, r3, r1
 80083ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b2:	1c7b      	adds	r3, r7, #1
 80083b4:	444b      	add	r3, r9
 80083b6:	106d      	asrs	r5, r5, #1
 80083b8:	429d      	cmp	r5, r3
 80083ba:	bf38      	it	cc
 80083bc:	461d      	movcc	r5, r3
 80083be:	0553      	lsls	r3, r2, #21
 80083c0:	d527      	bpl.n	8008412 <__ssputs_r+0x8e>
 80083c2:	4629      	mov	r1, r5
 80083c4:	f7ff ff52 	bl	800826c <_malloc_r>
 80083c8:	4606      	mov	r6, r0
 80083ca:	b360      	cbz	r0, 8008426 <__ssputs_r+0xa2>
 80083cc:	6921      	ldr	r1, [r4, #16]
 80083ce:	464a      	mov	r2, r9
 80083d0:	f7ff fed2 	bl	8008178 <memcpy>
 80083d4:	89a3      	ldrh	r3, [r4, #12]
 80083d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083de:	81a3      	strh	r3, [r4, #12]
 80083e0:	6126      	str	r6, [r4, #16]
 80083e2:	6165      	str	r5, [r4, #20]
 80083e4:	444e      	add	r6, r9
 80083e6:	eba5 0509 	sub.w	r5, r5, r9
 80083ea:	6026      	str	r6, [r4, #0]
 80083ec:	60a5      	str	r5, [r4, #8]
 80083ee:	463e      	mov	r6, r7
 80083f0:	42be      	cmp	r6, r7
 80083f2:	d900      	bls.n	80083f6 <__ssputs_r+0x72>
 80083f4:	463e      	mov	r6, r7
 80083f6:	6820      	ldr	r0, [r4, #0]
 80083f8:	4632      	mov	r2, r6
 80083fa:	4641      	mov	r1, r8
 80083fc:	f000 faa8 	bl	8008950 <memmove>
 8008400:	68a3      	ldr	r3, [r4, #8]
 8008402:	1b9b      	subs	r3, r3, r6
 8008404:	60a3      	str	r3, [r4, #8]
 8008406:	6823      	ldr	r3, [r4, #0]
 8008408:	4433      	add	r3, r6
 800840a:	6023      	str	r3, [r4, #0]
 800840c:	2000      	movs	r0, #0
 800840e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008412:	462a      	mov	r2, r5
 8008414:	f000 fac6 	bl	80089a4 <_realloc_r>
 8008418:	4606      	mov	r6, r0
 800841a:	2800      	cmp	r0, #0
 800841c:	d1e0      	bne.n	80083e0 <__ssputs_r+0x5c>
 800841e:	6921      	ldr	r1, [r4, #16]
 8008420:	4650      	mov	r0, sl
 8008422:	f7ff feb7 	bl	8008194 <_free_r>
 8008426:	230c      	movs	r3, #12
 8008428:	f8ca 3000 	str.w	r3, [sl]
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	e7e9      	b.n	800840e <__ssputs_r+0x8a>
	...

0800843c <_svfiprintf_r>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	4698      	mov	r8, r3
 8008442:	898b      	ldrh	r3, [r1, #12]
 8008444:	061b      	lsls	r3, r3, #24
 8008446:	b09d      	sub	sp, #116	@ 0x74
 8008448:	4607      	mov	r7, r0
 800844a:	460d      	mov	r5, r1
 800844c:	4614      	mov	r4, r2
 800844e:	d510      	bpl.n	8008472 <_svfiprintf_r+0x36>
 8008450:	690b      	ldr	r3, [r1, #16]
 8008452:	b973      	cbnz	r3, 8008472 <_svfiprintf_r+0x36>
 8008454:	2140      	movs	r1, #64	@ 0x40
 8008456:	f7ff ff09 	bl	800826c <_malloc_r>
 800845a:	6028      	str	r0, [r5, #0]
 800845c:	6128      	str	r0, [r5, #16]
 800845e:	b930      	cbnz	r0, 800846e <_svfiprintf_r+0x32>
 8008460:	230c      	movs	r3, #12
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	b01d      	add	sp, #116	@ 0x74
 800846a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800846e:	2340      	movs	r3, #64	@ 0x40
 8008470:	616b      	str	r3, [r5, #20]
 8008472:	2300      	movs	r3, #0
 8008474:	9309      	str	r3, [sp, #36]	@ 0x24
 8008476:	2320      	movs	r3, #32
 8008478:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800847c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008480:	2330      	movs	r3, #48	@ 0x30
 8008482:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008620 <_svfiprintf_r+0x1e4>
 8008486:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800848a:	f04f 0901 	mov.w	r9, #1
 800848e:	4623      	mov	r3, r4
 8008490:	469a      	mov	sl, r3
 8008492:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008496:	b10a      	cbz	r2, 800849c <_svfiprintf_r+0x60>
 8008498:	2a25      	cmp	r2, #37	@ 0x25
 800849a:	d1f9      	bne.n	8008490 <_svfiprintf_r+0x54>
 800849c:	ebba 0b04 	subs.w	fp, sl, r4
 80084a0:	d00b      	beq.n	80084ba <_svfiprintf_r+0x7e>
 80084a2:	465b      	mov	r3, fp
 80084a4:	4622      	mov	r2, r4
 80084a6:	4629      	mov	r1, r5
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ff6b 	bl	8008384 <__ssputs_r>
 80084ae:	3001      	adds	r0, #1
 80084b0:	f000 80a7 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084b6:	445a      	add	r2, fp
 80084b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084ba:	f89a 3000 	ldrb.w	r3, [sl]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 809f 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084c4:	2300      	movs	r3, #0
 80084c6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ce:	f10a 0a01 	add.w	sl, sl, #1
 80084d2:	9304      	str	r3, [sp, #16]
 80084d4:	9307      	str	r3, [sp, #28]
 80084d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084da:	931a      	str	r3, [sp, #104]	@ 0x68
 80084dc:	4654      	mov	r4, sl
 80084de:	2205      	movs	r2, #5
 80084e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e4:	484e      	ldr	r0, [pc, #312]	@ (8008620 <_svfiprintf_r+0x1e4>)
 80084e6:	f7f7 fe93 	bl	8000210 <memchr>
 80084ea:	9a04      	ldr	r2, [sp, #16]
 80084ec:	b9d8      	cbnz	r0, 8008526 <_svfiprintf_r+0xea>
 80084ee:	06d0      	lsls	r0, r2, #27
 80084f0:	bf44      	itt	mi
 80084f2:	2320      	movmi	r3, #32
 80084f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f8:	0711      	lsls	r1, r2, #28
 80084fa:	bf44      	itt	mi
 80084fc:	232b      	movmi	r3, #43	@ 0x2b
 80084fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008502:	f89a 3000 	ldrb.w	r3, [sl]
 8008506:	2b2a      	cmp	r3, #42	@ 0x2a
 8008508:	d015      	beq.n	8008536 <_svfiprintf_r+0xfa>
 800850a:	9a07      	ldr	r2, [sp, #28]
 800850c:	4654      	mov	r4, sl
 800850e:	2000      	movs	r0, #0
 8008510:	f04f 0c0a 	mov.w	ip, #10
 8008514:	4621      	mov	r1, r4
 8008516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800851a:	3b30      	subs	r3, #48	@ 0x30
 800851c:	2b09      	cmp	r3, #9
 800851e:	d94b      	bls.n	80085b8 <_svfiprintf_r+0x17c>
 8008520:	b1b0      	cbz	r0, 8008550 <_svfiprintf_r+0x114>
 8008522:	9207      	str	r2, [sp, #28]
 8008524:	e014      	b.n	8008550 <_svfiprintf_r+0x114>
 8008526:	eba0 0308 	sub.w	r3, r0, r8
 800852a:	fa09 f303 	lsl.w	r3, r9, r3
 800852e:	4313      	orrs	r3, r2
 8008530:	9304      	str	r3, [sp, #16]
 8008532:	46a2      	mov	sl, r4
 8008534:	e7d2      	b.n	80084dc <_svfiprintf_r+0xa0>
 8008536:	9b03      	ldr	r3, [sp, #12]
 8008538:	1d19      	adds	r1, r3, #4
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	9103      	str	r1, [sp, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfbb      	ittet	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	f042 0202 	orrlt.w	r2, r2, #2
 8008548:	9307      	strge	r3, [sp, #28]
 800854a:	9307      	strlt	r3, [sp, #28]
 800854c:	bfb8      	it	lt
 800854e:	9204      	strlt	r2, [sp, #16]
 8008550:	7823      	ldrb	r3, [r4, #0]
 8008552:	2b2e      	cmp	r3, #46	@ 0x2e
 8008554:	d10a      	bne.n	800856c <_svfiprintf_r+0x130>
 8008556:	7863      	ldrb	r3, [r4, #1]
 8008558:	2b2a      	cmp	r3, #42	@ 0x2a
 800855a:	d132      	bne.n	80085c2 <_svfiprintf_r+0x186>
 800855c:	9b03      	ldr	r3, [sp, #12]
 800855e:	1d1a      	adds	r2, r3, #4
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	9203      	str	r2, [sp, #12]
 8008564:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008568:	3402      	adds	r4, #2
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008630 <_svfiprintf_r+0x1f4>
 8008570:	7821      	ldrb	r1, [r4, #0]
 8008572:	2203      	movs	r2, #3
 8008574:	4650      	mov	r0, sl
 8008576:	f7f7 fe4b 	bl	8000210 <memchr>
 800857a:	b138      	cbz	r0, 800858c <_svfiprintf_r+0x150>
 800857c:	9b04      	ldr	r3, [sp, #16]
 800857e:	eba0 000a 	sub.w	r0, r0, sl
 8008582:	2240      	movs	r2, #64	@ 0x40
 8008584:	4082      	lsls	r2, r0
 8008586:	4313      	orrs	r3, r2
 8008588:	3401      	adds	r4, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	4824      	ldr	r0, [pc, #144]	@ (8008624 <_svfiprintf_r+0x1e8>)
 8008592:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008596:	2206      	movs	r2, #6
 8008598:	f7f7 fe3a 	bl	8000210 <memchr>
 800859c:	2800      	cmp	r0, #0
 800859e:	d036      	beq.n	800860e <_svfiprintf_r+0x1d2>
 80085a0:	4b21      	ldr	r3, [pc, #132]	@ (8008628 <_svfiprintf_r+0x1ec>)
 80085a2:	bb1b      	cbnz	r3, 80085ec <_svfiprintf_r+0x1b0>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	3307      	adds	r3, #7
 80085a8:	f023 0307 	bic.w	r3, r3, #7
 80085ac:	3308      	adds	r3, #8
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b2:	4433      	add	r3, r6
 80085b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085b6:	e76a      	b.n	800848e <_svfiprintf_r+0x52>
 80085b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80085bc:	460c      	mov	r4, r1
 80085be:	2001      	movs	r0, #1
 80085c0:	e7a8      	b.n	8008514 <_svfiprintf_r+0xd8>
 80085c2:	2300      	movs	r3, #0
 80085c4:	3401      	adds	r4, #1
 80085c6:	9305      	str	r3, [sp, #20]
 80085c8:	4619      	mov	r1, r3
 80085ca:	f04f 0c0a 	mov.w	ip, #10
 80085ce:	4620      	mov	r0, r4
 80085d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d4:	3a30      	subs	r2, #48	@ 0x30
 80085d6:	2a09      	cmp	r2, #9
 80085d8:	d903      	bls.n	80085e2 <_svfiprintf_r+0x1a6>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c6      	beq.n	800856c <_svfiprintf_r+0x130>
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	e7c4      	b.n	800856c <_svfiprintf_r+0x130>
 80085e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e6:	4604      	mov	r4, r0
 80085e8:	2301      	movs	r3, #1
 80085ea:	e7f0      	b.n	80085ce <_svfiprintf_r+0x192>
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4b0e      	ldr	r3, [pc, #56]	@ (800862c <_svfiprintf_r+0x1f0>)
 80085f4:	a904      	add	r1, sp, #16
 80085f6:	4638      	mov	r0, r7
 80085f8:	f3af 8000 	nop.w
 80085fc:	1c42      	adds	r2, r0, #1
 80085fe:	4606      	mov	r6, r0
 8008600:	d1d6      	bne.n	80085b0 <_svfiprintf_r+0x174>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	065b      	lsls	r3, r3, #25
 8008606:	f53f af2d 	bmi.w	8008464 <_svfiprintf_r+0x28>
 800860a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800860c:	e72c      	b.n	8008468 <_svfiprintf_r+0x2c>
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	462a      	mov	r2, r5
 8008614:	4b05      	ldr	r3, [pc, #20]	@ (800862c <_svfiprintf_r+0x1f0>)
 8008616:	a904      	add	r1, sp, #16
 8008618:	4638      	mov	r0, r7
 800861a:	f000 f879 	bl	8008710 <_printf_i>
 800861e:	e7ed      	b.n	80085fc <_svfiprintf_r+0x1c0>
 8008620:	08008acc 	.word	0x08008acc
 8008624:	08008ad6 	.word	0x08008ad6
 8008628:	00000000 	.word	0x00000000
 800862c:	08008385 	.word	0x08008385
 8008630:	08008ad2 	.word	0x08008ad2

08008634 <_printf_common>:
 8008634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	4616      	mov	r6, r2
 800863a:	4698      	mov	r8, r3
 800863c:	688a      	ldr	r2, [r1, #8]
 800863e:	690b      	ldr	r3, [r1, #16]
 8008640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008644:	4293      	cmp	r3, r2
 8008646:	bfb8      	it	lt
 8008648:	4613      	movlt	r3, r2
 800864a:	6033      	str	r3, [r6, #0]
 800864c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008650:	4607      	mov	r7, r0
 8008652:	460c      	mov	r4, r1
 8008654:	b10a      	cbz	r2, 800865a <_printf_common+0x26>
 8008656:	3301      	adds	r3, #1
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	6823      	ldr	r3, [r4, #0]
 800865c:	0699      	lsls	r1, r3, #26
 800865e:	bf42      	ittt	mi
 8008660:	6833      	ldrmi	r3, [r6, #0]
 8008662:	3302      	addmi	r3, #2
 8008664:	6033      	strmi	r3, [r6, #0]
 8008666:	6825      	ldr	r5, [r4, #0]
 8008668:	f015 0506 	ands.w	r5, r5, #6
 800866c:	d106      	bne.n	800867c <_printf_common+0x48>
 800866e:	f104 0a19 	add.w	sl, r4, #25
 8008672:	68e3      	ldr	r3, [r4, #12]
 8008674:	6832      	ldr	r2, [r6, #0]
 8008676:	1a9b      	subs	r3, r3, r2
 8008678:	42ab      	cmp	r3, r5
 800867a:	dc26      	bgt.n	80086ca <_printf_common+0x96>
 800867c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	3b00      	subs	r3, #0
 8008684:	bf18      	it	ne
 8008686:	2301      	movne	r3, #1
 8008688:	0692      	lsls	r2, r2, #26
 800868a:	d42b      	bmi.n	80086e4 <_printf_common+0xb0>
 800868c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008690:	4641      	mov	r1, r8
 8008692:	4638      	mov	r0, r7
 8008694:	47c8      	blx	r9
 8008696:	3001      	adds	r0, #1
 8008698:	d01e      	beq.n	80086d8 <_printf_common+0xa4>
 800869a:	6823      	ldr	r3, [r4, #0]
 800869c:	6922      	ldr	r2, [r4, #16]
 800869e:	f003 0306 	and.w	r3, r3, #6
 80086a2:	2b04      	cmp	r3, #4
 80086a4:	bf02      	ittt	eq
 80086a6:	68e5      	ldreq	r5, [r4, #12]
 80086a8:	6833      	ldreq	r3, [r6, #0]
 80086aa:	1aed      	subeq	r5, r5, r3
 80086ac:	68a3      	ldr	r3, [r4, #8]
 80086ae:	bf0c      	ite	eq
 80086b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b4:	2500      	movne	r5, #0
 80086b6:	4293      	cmp	r3, r2
 80086b8:	bfc4      	itt	gt
 80086ba:	1a9b      	subgt	r3, r3, r2
 80086bc:	18ed      	addgt	r5, r5, r3
 80086be:	2600      	movs	r6, #0
 80086c0:	341a      	adds	r4, #26
 80086c2:	42b5      	cmp	r5, r6
 80086c4:	d11a      	bne.n	80086fc <_printf_common+0xc8>
 80086c6:	2000      	movs	r0, #0
 80086c8:	e008      	b.n	80086dc <_printf_common+0xa8>
 80086ca:	2301      	movs	r3, #1
 80086cc:	4652      	mov	r2, sl
 80086ce:	4641      	mov	r1, r8
 80086d0:	4638      	mov	r0, r7
 80086d2:	47c8      	blx	r9
 80086d4:	3001      	adds	r0, #1
 80086d6:	d103      	bne.n	80086e0 <_printf_common+0xac>
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e0:	3501      	adds	r5, #1
 80086e2:	e7c6      	b.n	8008672 <_printf_common+0x3e>
 80086e4:	18e1      	adds	r1, r4, r3
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	2030      	movs	r0, #48	@ 0x30
 80086ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80086ee:	4422      	add	r2, r4
 80086f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80086f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80086f8:	3302      	adds	r3, #2
 80086fa:	e7c7      	b.n	800868c <_printf_common+0x58>
 80086fc:	2301      	movs	r3, #1
 80086fe:	4622      	mov	r2, r4
 8008700:	4641      	mov	r1, r8
 8008702:	4638      	mov	r0, r7
 8008704:	47c8      	blx	r9
 8008706:	3001      	adds	r0, #1
 8008708:	d0e6      	beq.n	80086d8 <_printf_common+0xa4>
 800870a:	3601      	adds	r6, #1
 800870c:	e7d9      	b.n	80086c2 <_printf_common+0x8e>
	...

08008710 <_printf_i>:
 8008710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008714:	7e0f      	ldrb	r7, [r1, #24]
 8008716:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008718:	2f78      	cmp	r7, #120	@ 0x78
 800871a:	4691      	mov	r9, r2
 800871c:	4680      	mov	r8, r0
 800871e:	460c      	mov	r4, r1
 8008720:	469a      	mov	sl, r3
 8008722:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008726:	d807      	bhi.n	8008738 <_printf_i+0x28>
 8008728:	2f62      	cmp	r7, #98	@ 0x62
 800872a:	d80a      	bhi.n	8008742 <_printf_i+0x32>
 800872c:	2f00      	cmp	r7, #0
 800872e:	f000 80d2 	beq.w	80088d6 <_printf_i+0x1c6>
 8008732:	2f58      	cmp	r7, #88	@ 0x58
 8008734:	f000 80b9 	beq.w	80088aa <_printf_i+0x19a>
 8008738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800873c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008740:	e03a      	b.n	80087b8 <_printf_i+0xa8>
 8008742:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008746:	2b15      	cmp	r3, #21
 8008748:	d8f6      	bhi.n	8008738 <_printf_i+0x28>
 800874a:	a101      	add	r1, pc, #4	@ (adr r1, 8008750 <_printf_i+0x40>)
 800874c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008750:	080087a9 	.word	0x080087a9
 8008754:	080087bd 	.word	0x080087bd
 8008758:	08008739 	.word	0x08008739
 800875c:	08008739 	.word	0x08008739
 8008760:	08008739 	.word	0x08008739
 8008764:	08008739 	.word	0x08008739
 8008768:	080087bd 	.word	0x080087bd
 800876c:	08008739 	.word	0x08008739
 8008770:	08008739 	.word	0x08008739
 8008774:	08008739 	.word	0x08008739
 8008778:	08008739 	.word	0x08008739
 800877c:	080088bd 	.word	0x080088bd
 8008780:	080087e7 	.word	0x080087e7
 8008784:	08008877 	.word	0x08008877
 8008788:	08008739 	.word	0x08008739
 800878c:	08008739 	.word	0x08008739
 8008790:	080088df 	.word	0x080088df
 8008794:	08008739 	.word	0x08008739
 8008798:	080087e7 	.word	0x080087e7
 800879c:	08008739 	.word	0x08008739
 80087a0:	08008739 	.word	0x08008739
 80087a4:	0800887f 	.word	0x0800887f
 80087a8:	6833      	ldr	r3, [r6, #0]
 80087aa:	1d1a      	adds	r2, r3, #4
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	6032      	str	r2, [r6, #0]
 80087b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087b8:	2301      	movs	r3, #1
 80087ba:	e09d      	b.n	80088f8 <_printf_i+0x1e8>
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	6820      	ldr	r0, [r4, #0]
 80087c0:	1d19      	adds	r1, r3, #4
 80087c2:	6031      	str	r1, [r6, #0]
 80087c4:	0606      	lsls	r6, r0, #24
 80087c6:	d501      	bpl.n	80087cc <_printf_i+0xbc>
 80087c8:	681d      	ldr	r5, [r3, #0]
 80087ca:	e003      	b.n	80087d4 <_printf_i+0xc4>
 80087cc:	0645      	lsls	r5, r0, #25
 80087ce:	d5fb      	bpl.n	80087c8 <_printf_i+0xb8>
 80087d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	da03      	bge.n	80087e0 <_printf_i+0xd0>
 80087d8:	232d      	movs	r3, #45	@ 0x2d
 80087da:	426d      	negs	r5, r5
 80087dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087e0:	4859      	ldr	r0, [pc, #356]	@ (8008948 <_printf_i+0x238>)
 80087e2:	230a      	movs	r3, #10
 80087e4:	e011      	b.n	800880a <_printf_i+0xfa>
 80087e6:	6821      	ldr	r1, [r4, #0]
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	0608      	lsls	r0, r1, #24
 80087ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80087f0:	d402      	bmi.n	80087f8 <_printf_i+0xe8>
 80087f2:	0649      	lsls	r1, r1, #25
 80087f4:	bf48      	it	mi
 80087f6:	b2ad      	uxthmi	r5, r5
 80087f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80087fa:	4853      	ldr	r0, [pc, #332]	@ (8008948 <_printf_i+0x238>)
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	bf14      	ite	ne
 8008800:	230a      	movne	r3, #10
 8008802:	2308      	moveq	r3, #8
 8008804:	2100      	movs	r1, #0
 8008806:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800880a:	6866      	ldr	r6, [r4, #4]
 800880c:	60a6      	str	r6, [r4, #8]
 800880e:	2e00      	cmp	r6, #0
 8008810:	bfa2      	ittt	ge
 8008812:	6821      	ldrge	r1, [r4, #0]
 8008814:	f021 0104 	bicge.w	r1, r1, #4
 8008818:	6021      	strge	r1, [r4, #0]
 800881a:	b90d      	cbnz	r5, 8008820 <_printf_i+0x110>
 800881c:	2e00      	cmp	r6, #0
 800881e:	d04b      	beq.n	80088b8 <_printf_i+0x1a8>
 8008820:	4616      	mov	r6, r2
 8008822:	fbb5 f1f3 	udiv	r1, r5, r3
 8008826:	fb03 5711 	mls	r7, r3, r1, r5
 800882a:	5dc7      	ldrb	r7, [r0, r7]
 800882c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008830:	462f      	mov	r7, r5
 8008832:	42bb      	cmp	r3, r7
 8008834:	460d      	mov	r5, r1
 8008836:	d9f4      	bls.n	8008822 <_printf_i+0x112>
 8008838:	2b08      	cmp	r3, #8
 800883a:	d10b      	bne.n	8008854 <_printf_i+0x144>
 800883c:	6823      	ldr	r3, [r4, #0]
 800883e:	07df      	lsls	r7, r3, #31
 8008840:	d508      	bpl.n	8008854 <_printf_i+0x144>
 8008842:	6923      	ldr	r3, [r4, #16]
 8008844:	6861      	ldr	r1, [r4, #4]
 8008846:	4299      	cmp	r1, r3
 8008848:	bfde      	ittt	le
 800884a:	2330      	movle	r3, #48	@ 0x30
 800884c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008850:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008854:	1b92      	subs	r2, r2, r6
 8008856:	6122      	str	r2, [r4, #16]
 8008858:	f8cd a000 	str.w	sl, [sp]
 800885c:	464b      	mov	r3, r9
 800885e:	aa03      	add	r2, sp, #12
 8008860:	4621      	mov	r1, r4
 8008862:	4640      	mov	r0, r8
 8008864:	f7ff fee6 	bl	8008634 <_printf_common>
 8008868:	3001      	adds	r0, #1
 800886a:	d14a      	bne.n	8008902 <_printf_i+0x1f2>
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	b004      	add	sp, #16
 8008872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f043 0320 	orr.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	4833      	ldr	r0, [pc, #204]	@ (800894c <_printf_i+0x23c>)
 8008880:	2778      	movs	r7, #120	@ 0x78
 8008882:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6831      	ldr	r1, [r6, #0]
 800888a:	061f      	lsls	r7, r3, #24
 800888c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008890:	d402      	bmi.n	8008898 <_printf_i+0x188>
 8008892:	065f      	lsls	r7, r3, #25
 8008894:	bf48      	it	mi
 8008896:	b2ad      	uxthmi	r5, r5
 8008898:	6031      	str	r1, [r6, #0]
 800889a:	07d9      	lsls	r1, r3, #31
 800889c:	bf44      	itt	mi
 800889e:	f043 0320 	orrmi.w	r3, r3, #32
 80088a2:	6023      	strmi	r3, [r4, #0]
 80088a4:	b11d      	cbz	r5, 80088ae <_printf_i+0x19e>
 80088a6:	2310      	movs	r3, #16
 80088a8:	e7ac      	b.n	8008804 <_printf_i+0xf4>
 80088aa:	4827      	ldr	r0, [pc, #156]	@ (8008948 <_printf_i+0x238>)
 80088ac:	e7e9      	b.n	8008882 <_printf_i+0x172>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f023 0320 	bic.w	r3, r3, #32
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	e7f6      	b.n	80088a6 <_printf_i+0x196>
 80088b8:	4616      	mov	r6, r2
 80088ba:	e7bd      	b.n	8008838 <_printf_i+0x128>
 80088bc:	6833      	ldr	r3, [r6, #0]
 80088be:	6825      	ldr	r5, [r4, #0]
 80088c0:	6961      	ldr	r1, [r4, #20]
 80088c2:	1d18      	adds	r0, r3, #4
 80088c4:	6030      	str	r0, [r6, #0]
 80088c6:	062e      	lsls	r6, r5, #24
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	d501      	bpl.n	80088d0 <_printf_i+0x1c0>
 80088cc:	6019      	str	r1, [r3, #0]
 80088ce:	e002      	b.n	80088d6 <_printf_i+0x1c6>
 80088d0:	0668      	lsls	r0, r5, #25
 80088d2:	d5fb      	bpl.n	80088cc <_printf_i+0x1bc>
 80088d4:	8019      	strh	r1, [r3, #0]
 80088d6:	2300      	movs	r3, #0
 80088d8:	6123      	str	r3, [r4, #16]
 80088da:	4616      	mov	r6, r2
 80088dc:	e7bc      	b.n	8008858 <_printf_i+0x148>
 80088de:	6833      	ldr	r3, [r6, #0]
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	6032      	str	r2, [r6, #0]
 80088e4:	681e      	ldr	r6, [r3, #0]
 80088e6:	6862      	ldr	r2, [r4, #4]
 80088e8:	2100      	movs	r1, #0
 80088ea:	4630      	mov	r0, r6
 80088ec:	f7f7 fc90 	bl	8000210 <memchr>
 80088f0:	b108      	cbz	r0, 80088f6 <_printf_i+0x1e6>
 80088f2:	1b80      	subs	r0, r0, r6
 80088f4:	6060      	str	r0, [r4, #4]
 80088f6:	6863      	ldr	r3, [r4, #4]
 80088f8:	6123      	str	r3, [r4, #16]
 80088fa:	2300      	movs	r3, #0
 80088fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008900:	e7aa      	b.n	8008858 <_printf_i+0x148>
 8008902:	6923      	ldr	r3, [r4, #16]
 8008904:	4632      	mov	r2, r6
 8008906:	4649      	mov	r1, r9
 8008908:	4640      	mov	r0, r8
 800890a:	47d0      	blx	sl
 800890c:	3001      	adds	r0, #1
 800890e:	d0ad      	beq.n	800886c <_printf_i+0x15c>
 8008910:	6823      	ldr	r3, [r4, #0]
 8008912:	079b      	lsls	r3, r3, #30
 8008914:	d413      	bmi.n	800893e <_printf_i+0x22e>
 8008916:	68e0      	ldr	r0, [r4, #12]
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	4298      	cmp	r0, r3
 800891c:	bfb8      	it	lt
 800891e:	4618      	movlt	r0, r3
 8008920:	e7a6      	b.n	8008870 <_printf_i+0x160>
 8008922:	2301      	movs	r3, #1
 8008924:	4632      	mov	r2, r6
 8008926:	4649      	mov	r1, r9
 8008928:	4640      	mov	r0, r8
 800892a:	47d0      	blx	sl
 800892c:	3001      	adds	r0, #1
 800892e:	d09d      	beq.n	800886c <_printf_i+0x15c>
 8008930:	3501      	adds	r5, #1
 8008932:	68e3      	ldr	r3, [r4, #12]
 8008934:	9903      	ldr	r1, [sp, #12]
 8008936:	1a5b      	subs	r3, r3, r1
 8008938:	42ab      	cmp	r3, r5
 800893a:	dcf2      	bgt.n	8008922 <_printf_i+0x212>
 800893c:	e7eb      	b.n	8008916 <_printf_i+0x206>
 800893e:	2500      	movs	r5, #0
 8008940:	f104 0619 	add.w	r6, r4, #25
 8008944:	e7f5      	b.n	8008932 <_printf_i+0x222>
 8008946:	bf00      	nop
 8008948:	08008add 	.word	0x08008add
 800894c:	08008aee 	.word	0x08008aee

08008950 <memmove>:
 8008950:	4288      	cmp	r0, r1
 8008952:	b510      	push	{r4, lr}
 8008954:	eb01 0402 	add.w	r4, r1, r2
 8008958:	d902      	bls.n	8008960 <memmove+0x10>
 800895a:	4284      	cmp	r4, r0
 800895c:	4623      	mov	r3, r4
 800895e:	d807      	bhi.n	8008970 <memmove+0x20>
 8008960:	1e43      	subs	r3, r0, #1
 8008962:	42a1      	cmp	r1, r4
 8008964:	d008      	beq.n	8008978 <memmove+0x28>
 8008966:	f811 2b01 	ldrb.w	r2, [r1], #1
 800896a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800896e:	e7f8      	b.n	8008962 <memmove+0x12>
 8008970:	4402      	add	r2, r0
 8008972:	4601      	mov	r1, r0
 8008974:	428a      	cmp	r2, r1
 8008976:	d100      	bne.n	800897a <memmove+0x2a>
 8008978:	bd10      	pop	{r4, pc}
 800897a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800897e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008982:	e7f7      	b.n	8008974 <memmove+0x24>

08008984 <_sbrk_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_sbrk_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7f8 f8ec 	bl	8000b6c <_sbrk>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_sbrk_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_sbrk_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20001730 	.word	0x20001730

080089a4 <_realloc_r>:
 80089a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089a8:	4680      	mov	r8, r0
 80089aa:	4615      	mov	r5, r2
 80089ac:	460c      	mov	r4, r1
 80089ae:	b921      	cbnz	r1, 80089ba <_realloc_r+0x16>
 80089b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	4611      	mov	r1, r2
 80089b6:	f7ff bc59 	b.w	800826c <_malloc_r>
 80089ba:	b92a      	cbnz	r2, 80089c8 <_realloc_r+0x24>
 80089bc:	f7ff fbea 	bl	8008194 <_free_r>
 80089c0:	2400      	movs	r4, #0
 80089c2:	4620      	mov	r0, r4
 80089c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089c8:	f000 f81a 	bl	8008a00 <_malloc_usable_size_r>
 80089cc:	4285      	cmp	r5, r0
 80089ce:	4606      	mov	r6, r0
 80089d0:	d802      	bhi.n	80089d8 <_realloc_r+0x34>
 80089d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80089d6:	d8f4      	bhi.n	80089c2 <_realloc_r+0x1e>
 80089d8:	4629      	mov	r1, r5
 80089da:	4640      	mov	r0, r8
 80089dc:	f7ff fc46 	bl	800826c <_malloc_r>
 80089e0:	4607      	mov	r7, r0
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0ec      	beq.n	80089c0 <_realloc_r+0x1c>
 80089e6:	42b5      	cmp	r5, r6
 80089e8:	462a      	mov	r2, r5
 80089ea:	4621      	mov	r1, r4
 80089ec:	bf28      	it	cs
 80089ee:	4632      	movcs	r2, r6
 80089f0:	f7ff fbc2 	bl	8008178 <memcpy>
 80089f4:	4621      	mov	r1, r4
 80089f6:	4640      	mov	r0, r8
 80089f8:	f7ff fbcc 	bl	8008194 <_free_r>
 80089fc:	463c      	mov	r4, r7
 80089fe:	e7e0      	b.n	80089c2 <_realloc_r+0x1e>

08008a00 <_malloc_usable_size_r>:
 8008a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a04:	1f18      	subs	r0, r3, #4
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfbc      	itt	lt
 8008a0a:	580b      	ldrlt	r3, [r1, r0]
 8008a0c:	18c0      	addlt	r0, r0, r3
 8008a0e:	4770      	bx	lr

08008a10 <_init>:
 8008a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a12:	bf00      	nop
 8008a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a16:	bc08      	pop	{r3}
 8008a18:	469e      	mov	lr, r3
 8008a1a:	4770      	bx	lr

08008a1c <_fini>:
 8008a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1e:	bf00      	nop
 8008a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a22:	bc08      	pop	{r3}
 8008a24:	469e      	mov	lr, r3
 8008a26:	4770      	bx	lr
